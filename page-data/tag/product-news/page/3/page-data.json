{"componentChunkName":"component---src-templates-tag-tsx","path":"/tag/product-news/page/3/","result":{"data":{"ghostTag":{"slug":"product-news","name":"Product News","visibility":"public","feature_image":null,"featureImageSharp":null,"description":null,"meta_title":null,"meta_description":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5dd55473ec5ed300387889a5","title":"Announcing TraefikEE v1.1","slug":"announcing-traefikee-v1-1-1338e9b7cd79","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/11/traefikee-v1.1.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/b0a42f21d3fb40cce89db9b6a9378543/f3583/traefikee-v1.1.png","srcSet":"/static/b0a42f21d3fb40cce89db9b6a9378543/630fb/traefikee-v1.1.png 300w,\n/static/b0a42f21d3fb40cce89db9b6a9378543/2a4de/traefikee-v1.1.png 600w,\n/static/b0a42f21d3fb40cce89db9b6a9378543/f3583/traefikee-v1.1.png 1200w,\n/static/b0a42f21d3fb40cce89db9b6a9378543/bbee5/traefikee-v1.1.png 1800w,\n/static/b0a42f21d3fb40cce89db9b6a9378543/ed396/traefikee-v1.1.png 2000w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"Traefik Enterprise Edition is a platform built on top of Traefik. Version 1.1 offers Automatic Certificate Management, Distributed Features, and Enhanced...","custom_excerpt":"Traefik Enterprise Edition is a platform built on top of Traefik. Version 1.1 offers Automatic Certificate Management, Distributed Features, and Enhanced...","visibility":"public","created_at_pretty":"20 November, 2019","published_at_pretty":"July 11, 2019","updated_at_pretty":"21 May, 2020","created_at":"2019-11-20T14:57:55.000+00:00","published_at":"2019-07-11T14:57:00.000+00:00","updated_at":"2020-05-21T23:53:47.000+00:00","meta_title":"Announcing TraefikEE v1.1","meta_description":"Traefik Enterprise 1.1 offers Automatic Certificate Management, Distributed Features, and support for Docker Enterprise","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Brendan LE GLAUNEC","slug":"brendan","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/NewAvatar.png","twitter":null,"facebook":null,"website":"https://github.com/Ullaakut"}],"primary_author":{"name":"Brendan LE GLAUNEC","slug":"brendan","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/NewAvatar.png","twitter":null,"facebook":null,"website":"https://github.com/Ullaakut"},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Offers Automatic Certificate Management, Distributed Features, and Enhanced\nSupport for DockerEE\n\nIt’s been two months since the general availability\n[/blog/announcing-general-availability-of-traefik-enterprise-edition-9c9aad363ce/] \nof the 1.0 version of Traefik Enterprise Edition. Encouraged by its successful\nlaunch, and propelled by the immense feedback we received from customers, the\nteam started to work on 1.1 right away.\n\n> Traefik Enterprise Edition [/traefikee/] is a new platform built on top of \nTraefik [/traefik/], the popular open-source cloud-native edge router, designed\nfor business-critical deployments. It adds clustering features to satisfy the\nneeds of enterprise customers. See it in action in the video demonstration\n[https://info.containo.us/request-demo-traefikee]!\nSo, let’s see what’s new in this 1.1 for TraefikEE and traefikeectl, its control\ntool!\n\nACME Account & Certificate Management\nDesigned for users that already leverage Let’s Encrypt and its automatic\ncertificate management, TraefikEE 1.1 allows you to seamlessly import your\ncertificates right into the cluster.\n\ntraefikeectl acme-add-certificate \\\n\t--certfile=\"cert.pem\" \\\n\t--keyfile=\"key.pem\" \\\n\t--accountname=\"my account\"\n\nIn the process, it is now possible to manage ACME accounts within your TraefikEE\ncluster using the traefikee and traefikeectl binaries: ask TraefikEE to create\nACME accounts, or to import your existing accounts.\n\n# Adds your me@containo.us account to your TraefikEE cluster!\ntraefikeectl acme-add-account \\\n  --use \\\n  --caserver=\"https://caserver\" \\\n  --email=\"me@containo.us\" \\\n  --name=\"my account\" \n  --privatekey=\"key.pem\"\n  --uri=\"https://registration_uri.com”\n\nWant to learn more about these features, just check out the operating guide\n[https://docs.containo.us/operating/acme/] about TraefikEE 1.1.\n\nDistributed Rate Limiting\nTraefikEE makes autoscaling easy: deploy more data nodes as the number of\nincoming requests grows. Before 1.1, when you configured rate limiting for your\nunderlying services, each node had its own rate limiting. In 1.1, the control\nplane makes sure the rate limiting is distributed within the cluster.\n\nTraefikEE intercepts the rate limiting configuration and inject its own\ndistributed rate limiting middleware into Traefik.\n\nThe best part? The configuration remains exactly the same!\n\n---\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: myservice\n  namespace: traefikee\n  labels:\n    app: myservice\n  annotations:\n    traefik.ingress.kubernetes.io/rate-limit: |\n      extractorfunc: client.ip\n      rateset:\n        bar:\n          period: 10s\n          average: 10000\n          burst: 10000\n\nThis service for example, has a cluster-wide rate limit set to 10,000 requests\nper client IP within 10 seconds.\n\nNetwork Automatic Discovery\nSome users were leveraging Docker Swarm [https://github.com/docker/swarm] \nnetwork capabilities to improve security on their cluster, making sure each\nservice used its own network.\n\nBefore 1.1, they had no choice but to attach another network to their services\nso that Traefik could reach them (and properly route the requests), or to attach\nthe new networks to TraefikEE itself. Since Traefik has always been about\ndynamic configuration, we weren’t satisfied with this situation.\n\nIn 1.1, TraefikEE (thanks to its redesigned architecture) is now able to\ndiscover the new networks and to reach them automatically.\n\nIt means that you are now able to add new applications from different Docker\nnetworks — and TraefikEE will dynamically update the data plane to join those\nnetworks.\n\nYou can turn this feature on during installation time!\n\ntraefikeectl install \\\n  --swarm \\\n  --swarm.networkautodiscovery \\\n  --licensekey=\"$TRAEFIKEE_LICENSE_KEY\"\n\nDocker Enterprise Edition\nTraefikEE is Docker certified\n[/blog/traefikee-now-dockeree-certified-d926bf7255a4/]! It means that it has\nbeen tested and is supported by Docker Enterprise — It complies with Docker best\npractices guidelines, has proven provenance, and has been scanned for security\nvulnerabilities.\n\nBefore 1.1, TraefikEE needed to install its control plane on the docker manager\nnodes, which could be a limitation.\n\nGood news, TraefikEE 1.1 can now be deployed on the worker nodes (and don’t even\nneed any manager node to fully operate).\n\nOn top of that, it now uses the UCP connector with enhanced security and proper\ncredentials.\n\nWhat’s Next?\nWith TraefikEE 1.1, we’re very proud to have helped our customers take full\nbenefit of Traefik and find ways to make sure every detail was taken care of.\n\nIn 1.2 (yes, there will be a 1.2 before the next big step!) we will keep\nimproving the user experience to make sure that managing a TraefikEE cluster is\nas simple as managing a single instance of Traefik, with extra benefits tailored\nfor the enterprise.\n\nTry it now!\nGet a free one month trial [/traefikee/] right now, and install TraefikEE on\nyour favorite environment by following the installation guides\n[https://docs.containo.us/].\n\nAnd if you want to learn more and see a live demo of TraefikEE 1.1, request a\ndemo [https://info.containo.us/request-demo-traefikee] today.","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">Offers Automatic Certificate Management, Distributed Features, and Enhanced Support for DockerEE</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-width-full\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-113.png\" class=\"kg-image\"></figure><p>It’s been two months since the <a href=\"https://containous.ghost.io/blog/announcing-general-availability-of-traefik-enterprise-edition-9c9aad363ce/\">general availability</a> of the 1.0 version of Traefik Enterprise Edition. Encouraged by its successful launch, and propelled by the immense feedback we received from customers, the team started to work on 1.1 right away.</p><blockquote><a href=\"https://containous.ghost.io/traefikee/\" rel=\"noopener\">Traefik Enterprise Edition</a> is a new platform built on top of <a href=\"https://containous.ghost.io/traefik/\">Traefik</a>, the popular open-source cloud-native edge router, designed for business-critical deployments. It adds clustering features to satisfy the needs of enterprise customers. See it in action in the <a href=\"https://info.containo.us/request-demo-traefikee\">video demonstration</a>!</blockquote><p>So, let’s see what’s new in this 1.1 for TraefikEE <em><em>and</em></em> <code>traefikeectl</code>, its control tool!</p><h2 id=\"acme-account-certificate-management\">ACME Account &amp; Certificate Management</h2><p>Designed for users that already leverage Let’s Encrypt and its automatic certificate management, TraefikEE 1.1 allows you to seamlessly import your certificates right into the cluster.</p><pre><code class=\"language-shell\">traefikeectl acme-add-certificate \\\n\t--certfile=\"cert.pem\" \\\n\t--keyfile=\"key.pem\" \\\n\t--accountname=\"my account\"</code></pre><p>In the process, it is now possible to manage ACME accounts within your TraefikEE cluster using the <code>traefikee</code> and <code>traefikeectl</code> binaries: ask TraefikEE to create ACME accounts, or to import your existing accounts.</p><pre><code class=\"language-shell\"># Adds your me@containo.us account to your TraefikEE cluster!\ntraefikeectl acme-add-account \\\n  --use \\\n  --caserver=\"https://caserver\" \\\n  --email=\"me@containo.us\" \\\n  --name=\"my account\" \n  --privatekey=\"key.pem\"\n  --uri=\"https://registration_uri.com”</code></pre><p>Want to learn more about these features, just check out the <a href=\"https://docs.containo.us/operating/acme/\">operating guide</a> about TraefikEE 1.1.</p><h2 id=\"distributed-rate-limiting\">Distributed Rate Limiting</h2><p>TraefikEE makes autoscaling easy: deploy more data nodes as the number of incoming requests grows. Before 1.1, when you configured rate limiting for your underlying services, each node had its own rate limiting. In 1.1, the control plane makes sure the rate limiting is distributed within the cluster.</p><p>TraefikEE intercepts the rate limiting configuration and inject its own distributed rate limiting middleware into Traefik.</p><p>The best part? The configuration remains <strong><strong>exactly the same</strong></strong>!</p><pre><code class=\"language-yaml\">---\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: myservice\n  namespace: traefikee\n  labels:\n    app: myservice\n  annotations:\n    traefik.ingress.kubernetes.io/rate-limit: |\n      extractorfunc: client.ip\n      rateset:\n        bar:\n          period: 10s\n          average: 10000\n          burst: 10000</code></pre><p>This service for example, has a cluster-wide rate limit set to 10,000 requests per client IP within 10 seconds.</p><h2 id=\"network-automatic-discovery\">Network Automatic Discovery</h2><p>Some users were leveraging <a href=\"https://github.com/docker/swarm\" rel=\"noopener\">Docker Swarm</a> network capabilities to improve security on their cluster, making sure each service used its own network.</p><p>Before 1.1, they had no choice but to attach another network to their services so that Traefik could reach them (and properly route the requests), or to attach the new networks to TraefikEE itself. Since Traefik has always been about dynamic configuration, we weren’t satisfied with this situation.</p><p>In 1.1, TraefikEE (thanks to its redesigned architecture) is now able to discover the new networks and to reach them automatically.</p><p>It means that you are now able to add new applications from different Docker networks — and TraefikEE will dynamically update the data plane to join those networks.</p><p>You can turn this feature on during installation time!</p><pre><code class=\"language-shell\">traefikeectl install \\\n  --swarm \\\n  --swarm.networkautodiscovery \\\n  --licensekey=\"$TRAEFIKEE_LICENSE_KEY\"</code></pre><h2 id=\"docker-enterprise-edition\">Docker Enterprise Edition</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/proxy/1*YhmLMOeN6VJwGNqv-H_SiQ.jpeg\" class=\"kg-image\"></figure><p>TraefikEE is <a href=\"https://containous.ghost.io/blog/traefikee-now-dockeree-certified-d926bf7255a4/\">Docker certified</a>! It means that it has been tested and is supported by Docker Enterprise — It complies with Docker best practices guidelines, has proven provenance, and has been scanned for security vulnerabilities.</p><p>Before 1.1, TraefikEE needed to install its control plane on the docker manager nodes, which could be a limitation.</p><p>Good news, TraefikEE 1.1 can now be deployed on the worker nodes (and don’t even need any manager node to fully operate).</p><p>On top of that, it now uses the UCP connector with enhanced security and proper credentials.</p><h2 id=\"what-s-next\">What’s Next?</h2><p>With TraefikEE 1.1, we’re very proud to have helped our customers take full benefit of Traefik and find ways to make sure every detail was taken care of.</p><p>In 1.2 (yes, there will be a 1.2 before the next big step!) we will keep improving the user experience to make sure that managing a TraefikEE cluster is as simple as managing a single instance of Traefik, with extra benefits tailored for the enterprise.</p><h2 id=\"try-it-now-\">Try it now!</h2><p>Get a <a href=\"https://containous.ghost.io/traefikee/\" rel=\"noopener\">free one month trial</a> right now, and install TraefikEE on your favorite environment by following the <a href=\"https://docs.containo.us/\">installation guides</a>.</p><p>And if you want to learn more and see a live demo of TraefikEE 1.1, <a href=\"https://info.containo.us/request-demo-traefikee\">request a demo</a> today.</p>","url":"https://containous.ghost.io/blog/announcing-traefikee-v1-1-1338e9b7cd79/","canonical_url":null,"uuid":"94d88173-729c-4f8d-9108-1443dbfbf758","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dd55473ec5ed300387889a5","reading_time":3}},{"node":{"id":"Ghost__Post__5dd6a50ab6de2b00381d3ff2","title":"TraefikEE, Now Docker Certified!","slug":"traefikee-now-dockeree-certified-d926bf7255a4","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/11/traefikee-certified.jpeg","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/a04be38b2397bcaa594686d082a0fd5f/47498/traefikee-certified.jpg","srcSet":"/static/a04be38b2397bcaa594686d082a0fd5f/9dc27/traefikee-certified.jpg 300w,\n/static/a04be38b2397bcaa594686d082a0fd5f/4fe8c/traefikee-certified.jpg 600w,\n/static/a04be38b2397bcaa594686d082a0fd5f/47498/traefikee-certified.jpg 1200w,\n/static/a04be38b2397bcaa594686d082a0fd5f/52258/traefikee-certified.jpg 1800w,\n/static/a04be38b2397bcaa594686d082a0fd5f/f691d/traefikee-certified.jpg 1833w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"TraefikEE is a production-grade, distributed, and highly available routing solution, and today we’re proud to announce that it is certified as such...","custom_excerpt":"TraefikEE is a production-grade, distributed, and highly available routing solution, and today we’re proud to announce that it is certified as such...","visibility":"public","created_at_pretty":"21 November, 2019","published_at_pretty":"April 30, 2019","updated_at_pretty":"01 October, 2020","created_at":"2019-11-21T14:54:02.000+00:00","published_at":"2019-04-30T14:53:00.000+00:00","updated_at":"2020-10-01T05:07:23.000+00:00","meta_title":"Traefik Enterprise Edition, Now Docker Certified!","meta_description":"TraefikEE is a production-grade, distributed, and highly available routing solution, and today we’re proud to announce that it is certified as such...","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Michael Matur","slug":"michael","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/michael.png","twitter":"@michaelmatur","facebook":null,"website":null}],"primary_author":{"name":"Michael Matur","slug":"michael","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/michael.png","twitter":"@michaelmatur","facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Ready for the Future\n\nBuilding business critical solutions often requires more than leveraging the\nbest tools available — it requires partners to rely on.\n\nTraefik, as one of the most acclaimed open source edge routers, benefits from a\nvibrant and supportive community. With the enterprise edition, not only did we\nadd business-centric features to improve user experience, security,\navailability, and scalability. Additionally, we also made premium support a\nreality.\n\nTraefikEE is a production-grade, distributed, and highly available routing\nsolution, and today we’re proud to announce that it is certified as such\n[https://store.docker.com/_/traefikee]!\n\nWhat Does it Mean?\n\nTraefikEE has been tested and is supported by Docker Enterprise. It complies\nwith Docker best practices guidelines, has proven provenance, and has been\nscanned for security vulnerabilities.\n\nSee It in Action!\nTest It!\n> Note: If you don’t have your license key yet, request your free trial\n[https://traefik.io/traefik-enterprise] on our website and download traefikeectl\n[https://docs.containo.us/installing/teectl-cli/].\nInstallation\nHere is a Swarm One Line Installation:\n\ntraefikeectl install \\\n  --swarm \\\n  --dashboard \\\n  --licensekey=\"${TRAEFIKEE_LICENSE_KEY}\" \\\n  --clustername=traefikee-swarm\n\n> You can learn more about the command-line options used on the traefikeectl\ninstall Reference Guide [https://docs.containo.us/installing/teectl-cli/]\nConfiguration\nManage the cluster with traefikeectl: \n\ntraefikeectl list-nodes --clustername=traefikee-swarm\n\ntraefikeectl backup --clustername=traefikee-swarm\n\n# ...\n\n\n\nDeploy a customized routing configuration to create the Traefik entrypoints:\n\ntraefikeectl deploy --clustername=traefikee-swarm \\\n \t--docker.swarmmode \\\n \t--entryPoints='Name:http Address::80' \\\n \t--entryPoints='Name:https Address::443 TLS' \\\n \t--defaultentrypoints=https,http\n\n> Note: TraefikEE uses the `80` and `443` ports internally, hence these values for\nthe entrypoints.\nDeploy a Demo Application\nYou can deploy applications in Docker Swarm using labels:\n\nversion: '3.4'\nnetworks:\n  traefikee_net:\n    external: true\nservices:\n  whoami:\n    image: containous/whoami\n  deploy:\n    mode: replicated\n    replicas: 2\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.frontend.rule=Host:your.cluster.dns.org\"\n      - \"traefik.port=80\"\n      - \"traefik.backend=whoami\"\n  networks:\n    - traefikee_net\n\n> Note: In the above example, your.cluster.dns.org is the DNS to reach your\ncluster.\nDeploy the application with the following command:\n\ndocker stack deploy whoami --compose-file=./whoami-stack.yaml\n\nWith docker service ls, check that the application deployment status is `2/2`\nreplicas ready. Then you can verify that your requests are routed by TraefikEE\nto the whoami application!\n\ncurl http://your.cluster.dns.org\n\n> Note: Once checked, you can of course cleanup the whoami application with docker\nstack rm whoami.\n\n--------------------------------------------------------------------------------\n\nWant to Go Further?\nThe TraefikEE image is available on the Docker store\n[https://store.docker.com/_/traefikee] with detailed setup instructions\n[https://store.docker.com/_/traefikee/plans/e4082b3e-9d65-425b-a21f-5f1b7b156f2e?tab=instructions]\n. Don’t hesitate to give it a try for free\n[https://traefik.io/traefik-enterprise]!\n\n> Huge thanks goes to Brent Salisbury [https://twitter.com/networkstatic] for his\nhelp during the Docker certification process.","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">Ready for the Future</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2019/12/image.png\" class=\"kg-image\" alt></figure><p>Building business critical solutions often requires more than leveraging the best tools available — it requires partners to rely on.</p><p>Traefik, as one of the most acclaimed open source edge routers, benefits from a vibrant and supportive community. With the enterprise edition, not only did we add business-centric features to improve user experience, security, availability, and scalability. Additionally, we also made premium support a reality.</p><p>TraefikEE is a production-grade, distributed, and highly available routing solution, and today we’re proud to announce that it is <a href=\"https://store.docker.com/_/traefikee\" rel=\"noopener\">certified as such</a>!</p><p><strong><strong>What Does it Mean?</strong></strong></p><p>TraefikEE has been tested and is supported by Docker Enterprise. It complies with Docker best practices guidelines, has proven provenance, and has been scanned for security vulnerabilities.</p><h2 id=\"see-it-in-action-\">See It in Action!</h2><figure class=\"kg-card kg-embed-card\"><iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/joOuUy1ZD7E?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><h2 id=\"test-it-\">Test It!</h2><blockquote><em><em><strong><strong>Note</strong></strong>: If you don’t have your license key yet, request <a href=\"https://traefik.io/traefik-enterprise\">your free trial</a> on our website and download <a href=\"https://docs.containo.us/installing/teectl-cli/\">traefikeectl</a>.</em></em></blockquote><h3 id=\"installation\">Installation</h3><p>Here is a Swarm One Line Installation:</p><pre><code class=\"language-bash\">traefikeectl install \\\n  --swarm \\\n  --dashboard \\\n  --licensekey=\"${TRAEFIKEE_LICENSE_KEY}\" \\\n  --clustername=traefikee-swarm</code></pre><blockquote><em><em>You can learn more about the command-line options used on the <code>traefikeectl install</code> <a href=\"https://docs.containo.us/installing/teectl-cli/\">Reference Guide</a></em></em></blockquote><h3 id=\"configuration\">Configuration</h3><p>Manage the cluster with <code>traefikeectl</code>:<em><em> </em></em></p><pre><code class=\"language-bash\">traefikeectl list-nodes --clustername=traefikee-swarm\n\ntraefikeectl backup --clustername=traefikee-swarm\n\n# ...\n</code></pre><p><br>Deploy a customized routing configuration to create the Traefik entrypoints:</p><pre><code class=\"language-bash\">traefikeectl deploy --clustername=traefikee-swarm \\\n \t--docker.swarmmode \\\n \t--entryPoints='Name:http Address::80' \\\n \t--entryPoints='Name:https Address::443 TLS' \\\n \t--defaultentrypoints=https,http</code></pre><blockquote><em><em><strong><strong>Note:</strong></strong> TraefikEE uses the `80` and `443` ports internally, hence these values for the entrypoints.</em></em></blockquote><h3 id=\"deploy-a-demo-application\">Deploy a Demo Application</h3><p>You can deploy applications in Docker Swarm using labels:</p><pre><code class=\"language-yaml\">version: '3.4'\nnetworks:\n  traefikee_net:\n    external: true\nservices:\n  whoami:\n    image: containous/whoami\n  deploy:\n    mode: replicated\n    replicas: 2\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.frontend.rule=Host:your.cluster.dns.org\"\n      - \"traefik.port=80\"\n      - \"traefik.backend=whoami\"\n  networks:\n    - traefikee_net</code></pre><blockquote><em><em><strong><strong>Note</strong></strong>: In the above example, <code>your.cluster.dns.org</code> is the DNS to reach your cluster.</em></em></blockquote><p>Deploy the application with the following command:</p><pre><code class=\"language-bash\">docker stack deploy whoami --compose-file=./whoami-stack.yaml</code></pre><p>With <code><em><em>docker service ls</em></em></code>, check that the application deployment status is `2/2` replicas ready. Then you can verify that your requests are routed by TraefikEE to the <code><em><em>whoami</em></em></code> application!</p><pre><code class=\"language-bash\">curl http://your.cluster.dns.org</code></pre><blockquote><em><em><strong><strong>Note</strong></strong>: Once checked, you can of course cleanup the <code><em>whoami</em></code> application with <code><em>docker stack rm whoami</em></code><em>.</em></em></em></blockquote><hr><h2 id=\"want-to-go-further\">Want to Go Further?</h2><p>The TraefikEE image is available on the <a href=\"https://store.docker.com/_/traefikee\" rel=\"noopener\">Docker store</a> with <a href=\"https://store.docker.com/_/traefikee/plans/e4082b3e-9d65-425b-a21f-5f1b7b156f2e?tab=instructions\" rel=\"noopener\">detailed setup instructions</a>. Don’t hesitate to give it a<a href=\"https://traefik.io/traefik-enterprise\"> try for free</a>!</p><blockquote>Huge thanks goes to <a href=\"https://twitter.com/networkstatic\" rel=\"noopener\">Brent Salisbury</a> for his help during the Docker certification process.</blockquote>","url":"https://containous.ghost.io/blog/traefikee-now-dockeree-certified-d926bf7255a4/","canonical_url":null,"uuid":"e3a24b5f-ac2c-41ca-bfac-357f8138b09b","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dd6a50ab6de2b00381d3ff2","reading_time":2}},{"node":{"id":"Ghost__Post__5dd6b3d9b6de2b00381d405f","title":"Back to Traefik 2.0","slug":"back-to-traefik-2-0-2f9aa17be305","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/11/back-traefik-2.0.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/eab1b698154eba0f1712590325d76538/f3583/back-traefik-2.0.png","srcSet":"/static/eab1b698154eba0f1712590325d76538/630fb/back-traefik-2.0.png 300w,\n/static/eab1b698154eba0f1712590325d76538/2a4de/back-traefik-2.0.png 600w,\n/static/eab1b698154eba0f1712590325d76538/f3583/back-traefik-2.0.png 1200w,\n/static/eab1b698154eba0f1712590325d76538/bbee5/back-traefik-2.0.png 1800w,\n/static/eab1b698154eba0f1712590325d76538/ed396/back-traefik-2.0.png 2000w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"Today, we’re announcing Traefik 2.0 alpha, the edge router built with the future in mind.\nThe new core is here, help us finalize...","custom_excerpt":"Today, we’re announcing Traefik 2.0 alpha, the edge router built with the future in mind.\nThe new core is here, help us finalize...","visibility":"public","created_at_pretty":"21 November, 2019","published_at_pretty":"March 19, 2019","updated_at_pretty":"22 May, 2020","created_at":"2019-11-21T15:57:13.000+00:00","published_at":"2019-03-19T15:57:00.000+00:00","updated_at":"2020-05-22T00:04:04.000+00:00","meta_title":"Back to Traefik 2.0","meta_description":"Today, we’re announcing Traefik 2.0 alpha, the edge router built with the future in mind.\nThe new core is here, help us finalize...","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Emile Vauge","slug":"emile","bio":null,"profile_image":"//www.gravatar.com/avatar/68e7fb947bb29dffbd46ac8aae45b6de?s=250&d=mm&r=x","twitter":"@emilevauge","facebook":null,"website":null}],"primary_author":{"name":"Emile Vauge","slug":"emile","bio":null,"profile_image":"//www.gravatar.com/avatar/68e7fb947bb29dffbd46ac8aae45b6de?s=250&d=mm&r=x","twitter":"@emilevauge","facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Gigawatts of Routing Power\n\nBack in 2015, a revolution was under way. We were moving from manual,\nhandcrafted infrastructures, to container-based, industrial, and human-free\nplatforms. In those dark ages of orchestration, edge traffic was remarkably\ndifficult to manage. On one side, we had traditional reverse-proxies that were\nbuilt for static infrastructures, on the other side, we were building dynamic\nclusters made to deploy and manage thousands of microservices. The idea of\nhaving a simple and automatic edge router, all in one binary, was appealing, but\nalso idealistic. The foundation of Traefik [/traefik/] was laid that year,\npaving the way to building a project with strong values: simplicity of\nconfiguration, modern features, and open to the community. A few years later,\nthe project has reached 21k stars on Github\n[https://github.com/containous/traefik], and more than 600 millions downloads. \nInsane.\n\nSince then, the ecosystem around containers has changed a lot: Docker has become\na de-facto standard, and Kubernetes has shown itself to be the clear winner in\nthe battle for the best orchestration platform. Because of this, the CNCF\nlandscape [https://landscape.cncf.io/] has exploded, with hundreds of components\nto choose from.\n\n> The time has come to work on something new for Traefik.\nFor several months, the maintainer team has been working on a deep refactoring\nof the codebase to provide the firm foundations for the next iteration of\nTraefik, and we are ready to share this vision with you.\n\nToday, we’re announcing Traefik 2.0 alpha, the edge router built with the future\nin mind.\n\nThe new core is here, help us finalize Traefik with the features you want!\n\n\n--------------------------------------------------------------------------------\n\nWe Want Features!\nLet’s see what we have in store.\n\nVocabulary Clarification\nNot a feature per se, but we still wanted to make it easier for newcomers to\nunderstand the core concepts at work in Traefik. We wanted every word to have a\nclear and unique meaning throughout the code and documentation.\n\nWelcome providers, entrypoints, routers, middleware, and services.\n\n * Providers are the cluster technologies you already use (Kubernetes, Docker,\n   Consul, Mesos, Rancher…). Traefik uses your provider’s API to discover the\n   routes to your services.\n * Entrypoints, in their most basic forms, are the open ports where requests\n   will land.\n * Services represent the software hosted on your infrastructure. Traefik knows\n   how to deal with multiple instances of your programs (currently supporting\n   multiple load balancing capabilities), and use the services configuration to\n   determine how to reach the actual program.\n * Routers connect incoming requests to your services. They hold the rules that\n   decide which service handles the request.\n * Finally, pieces of middleware [https://docs.traefik.io/middlewares/overview/] \n    are components that may update the request before it is handled by a\n   service. Out of the box, Traefik comes with middleware to manage\n   authentication, rate limiting, circuit breaker, whitelisting, buffering, and\n   so on.\n\nConfiguration Structure\nDespite our best efforts, and because so many features have been added to\nTraefik since its first launch, we needed to polish things up and make sure\nevery configuration option belonged in its place.\n\nHere, it was a menial job that needed to be done, and we’ll spare you the\ndetails.\n\nLet Us Be Clear … We Want ACTUAL Features!\nSo, let’s remove the mystery, since we’ve teased you enough. Here are the\nfeatures we’ve added!\n\nTCP Support!\nThat’s right! It’s time to say goodbye to Issue #10\n[https://github.com/containous/traefik/issues/10]!\n\nYes, three years later, after a lot of work\n[https://github.com/containous/traefik/pull/4587] (as foretold\n[https://github.com/containous/traefik/issues/10#issuecomment-142835077]), and a\nlot of discussions, Traefik now fully supports the TCP protocol\n[https://docs.traefik.io/routing/routers/#configuring-tcp-routers].\n\nWant to see an example? Let’s use the File Provider, and redirect every request\non port27010 to your database service!\n\n[entrypoints]\n   [entrypoints.web]\n      address = \":80\"\n\n[entrypoints.mongo-port]\n      address = \":27017\"\n\n[tcp] # YAY!\n   [tcp.routers]\n      [tcp.routers.everything-to-mongo]\n         entrypoints = [\"mongo-port\"]\n         rule = \"HostSNI(`*`)\" # Catches every request       \n         service = \"database\"\n\nThe best part? Traefik supports routing based on SNIs\n[https://en.wikipedia.org/wiki/Server_Name_Indication]!\n\n[entrypoints]\n   [entrypoints.web]\n      address = \":80\"\n\n[entrypoints.mongo-port]\n      address = \":27017\"\n\n[tcp] # YAY!\n   [tcp.routers]\n      [tcp.routers.to-db-1]\n         entrypoints = [\"mongo-port\"]\n         rule = \"HostSNI(`db-1.domain`)\"       \n         service = \"db-1\"\n         [tcp.routers.to-db-1.tls] # The route is for TLS requests only\n      \n      [tcp.routers.to-db-2]\n         entrypoints = [\"mongo-port\"]\n         rule = \"HostSNI(`db-2.domain`)\"       \n         service = \"db-2\"\n         [tcp.routers.to-db-2.tls] # The route is for TLS requests only\n\nWhat’s even better? Traefik can go crazy, and support both HTTP and TCP on the \nsame port.\n\n> Yes, multiple protocols on the same entrypoint!\n[entrypoints]\n   [entrypoints.the-one]\n      address = \":443\"\n\n[tcp]\n   [tcp.routers]\n      [tcp.routers.to-db-1]\n         rule = \"HostSNI(`db-1.domain`)\"       \n         service = \"db-1\"\n         [tcp.routers.to-db-1.tls] # The route is for TLS requests only\n\n[http]\n   [http.routers]\n      [http.routers.my-api]\n         rule = \"Host(`api.domain`)\"       \n         service = \"my-api\"\n\nIn its first alpha version, Traefik only enables TCP routes in the File\nProvider, but stay tuned because it will (very) soon be available for other\nproviders!\n\nMiddleware to Update the Requests\nMany features used to be magically embedded in Traefik, with room for\ncustomization but no option for fine-tuning.\n\nMiddlewares fill the gap and give you the possibility to enable/configure any\nfeature you’d like, per router if you wish.\n\nMiddlewares are components that act on the request before it is actually\nforwarded to the services, and can even decide to not forward the request if a\nrequired condition isn’t met.\n\nAt release, Traefik comes with the following middlewares: AddPrefix\n[https://docs.traefik.io/middlewares/addprefix/] (to add a prefix to the request\npath), BasicAuth [https://docs.traefik.io/middlewares/basicauth/] & DigestAuth\n[https://docs.traefik.io/middlewares/digestauth/], ForwardAuth\n[https://docs.traefik.io/middlewares/forwardauth/] (to delegate authentication\nto a third-party service), Buffering\n[https://docs.traefik.io/middlewares/buffering/], Chain\n[https://docs.traefik.io/middlewares/chain/] (to define reusable sets of\nmiddlewares), CircuitBreaker\n[https://docs.traefik.io/middlewares/circuitbreaker/] (to avoid calling broken\nservices), Compress [https://docs.traefik.io/middlewares/compress/], Errors\n[https://docs.traefik.io/middlewares/errorpages/] (to provide custom error\npages), Headers [https://docs.traefik.io/middlewares/headers/], IpWhitelist\n[https://docs.traefik.io/middlewares/ipwhitelist/], MaxConn (to limit the number\nof simultaneous connections to a service), PassTLSClientCert\n[https://docs.traefik.io/middlewares/passtlsclientcert/], RateLimit\n[https://docs.traefik.io/middlewares/ratelimit/] (to limit the number of\nrequests to a service within a given period of time), RedirectRegex\n[https://docs.traefik.io/middlewares/redirectregex/] and RedirectScheme\n[https://docs.traefik.io/middlewares/redirectscheme/], and ReplacePath\n[https://docs.traefik.io/middlewares/replacepath/] (to update the query path\nbefore forwarding it to the service).\n\nAnd more importantly, we’ve re-architectured the code to make it easier to\nprovide additional middlewares in the near future.\n\nKubernetes & CRD\nIn the past two years, the community has been discussing (a lot) around “better\ningress,” and looking at our previous Kubernetes provider, we agreed that there\nwas room for improvement. With v2, it became obvious that if we wanted to let\nour Kubernetes fans benefit from every feature (like TCP and middleware) without\nbeing swarmed by a clutter of annotations, we had to propose an alternative.\n\nAmong the alternatives, CRD\n[https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/]\ns are more and more popular since they solve shortcomings of the ingress\nspecification. Inspired by what Heptio did in Contour with IngressRoute, we\nextended the specification to implement every Traefik feature.\n\nWe firmly believe that a consensus can emerge from those proposals and lead to\nthe next Ingress specification in Kubernetes.\n\nBelow is an example of this specification.\n\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: test.crd\n  namespace: default\nspec:\n  entrypoints:\n    - web\n    - web-secure\n  routes:\n    - match: Host(`traefik.io`) && PathPrefix(`/foo`)\n      kind: Rule\n      services:\n        - name: whoami1\n          port: 80\n          strategy: RoundRobin\n      middlewares:\n        - name: stripprefix\n        - name: addprefix\n          namespace: foo\n    - match: Host(`containo.us`) && Method(`POST`)\n      kind: Rule\n      services:\n        - name: whoami2\n          port: 80\n  tls:\n    secretName: supersecret\n\nNew Expressive Routing Rule Syntax\nTraefik now supports an expressive syntax to define the router rules, with and, \nor, and parenthesis!\n\nThe available matchers [https://docs.traefik.io/routing/routers/#rule] being \nHeaders, HeadersRegexp, Host, HostRegexp, Method, Path, PathPrefix, and Query.\n\nSince TCP is a whole different world, for now, it only supports a dedicated\nmatcher: HostSNI.\n\nWant to see examples?\n\nrule = (Host(`api.domain`) && PathPrefix(`/v2`)) \n  || Host(`api-v2.domain`)\n\nrule = (Method(`DELETE`) || (Method(`POST`) \n  && Query(`action`, `delete`))) && Host('api.domain')\n\nCross-Provider Support\nTraefik has always been compatible with multiple providers, which is one of its\ngreater strengths: whatever your infrastructure is, from bare metal to\norchestrators and clusters, Traefik just works!\n\nBut with v2, we’ve gone a little further and allowed users to declare elements\n(middlewares, services, routers) in a provider, and to use them from a different\none.\n\nLet’s take a look at the following example, that declares an authentication\nmiddleware in a configuration file (the File Provider), which is being used from\na Docker label (the Docker Provider).\n\n# somewhere in a configuration file for the file provider\n[http.middlewares.my-users.basicauth]\n   users = [\"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\", \n            \"test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\"]\n\n\n--------------------------------------------------------------------------------\n\n# somewhere in a docker compose file\n\nyour-container:\n    image: your-docker-image\n    \n    labels:\n      - \"traefik.http.routers.my-router.middlewares=file.my-users\"\n\nAnd of course, you could declare a router in a provider that points to services\ndeclared by another.\n\nTLS Termination per Route\nWhile adding TCP support to Traefik, we had to re-think almost everything,\nstarting with the entrypoint itself — the very door to your cluster.\n\nOur first idea was to dedicate entrypoints (and as a consequence port numbers)\nto a type of “protocol.” Unfortunately, in some cases, especially when people\nused Traefik to route requests for multiple clusters, we deemed it too\nrestrictive. As a consequence, we allowed multiple protocols per entrypoint.\n\nThen, as debates were still going on, we kept looking for ways to better control\nhow users would configure TLS termination or passthrough. The idea of enabling\nTLS on the Router level won the brainstorming, and then passed the tests of\nproof of concept (we have quite a fan [https://github.com/juliens] of proof of\nconcept branches on the team, to the point it has almost become a meme).\n\nHere is an example with three routers listening on the same entrypoint, the\nfirst router terminates TLS connections (on HTTPS), the second router terminates\nTLS connections (on TCP), and the third router passes through, leaving the\ndetails of the TLS connection to be handled by the service itself.\n\n[entrypoints]\n   [entrypoints.web-secure]\n      address = \":443\"\n\n[http]\n   [http.routers.to-service-1]\n      rule = \"Host(`domain-1`)\"\n      service = \"service-1\"\n      [http.routers.to-service-1.tls]\n         # terminates the tls connection and sends clear data\n         # to service 1\n\n[tcp]\n   [tcp.routers.to-service-2]\n      rule = \"HostSNI(`domain-2`)\"\n      service = \"service-2\"\n      [tcp.routers.to-service-2.tls]\n         # terminates the tls connection and sends clear data\n         # to service 2\n\n[tcp.routers.to-service-3]\n      rule = \"HostSNI(`domain-3`)\"\n      service = \"service-3\"\n      [tcp.routers.to-service-3.tls]\n         passthrough = true # sends encrypted data \"as is\" to service-3\n\nLabels, Key-Value Configuration, Tags, …\nA small tweak on the surface, but quite an impact in the code, we’ve re-written\nthe configuration parser. This new system ensures that every option in Traefik\nhas the same path, whether expressed in TOML [something.that.is.here], a label\nattached to a container something.that.is.there, a key (as in key-value store) \nsomething/that/is/somewhere, or anything that might be available in the future.\n\nRevamped Documentation\nWe’ve updated the documentation [https://docs.traefik.io/] structure to help new\nusers quickly understand how to use and configure Traefik. At the same time, we\ncame up with an outline that mirrored the configuration structure, making it\neasier for expert users to learn more about specific configuration details.\n\n\n--------------------------------------------------------------------------------\n\nThe Road to the Final Version\nYes, more (much more) is on the way, but we were so eager to share the work that\nwe couldn’t wait a minute longer than we already did.\n\n> New WebUI, remaining providers, metrics, UDP, YAML, TLS stores & options,\ncanary, more documentation — everything is possible.\nApart from re-enabling other providers (alpha comes with file, Docker, and k8s\nonly), and enabling TCP for all of them (currently file only), the roadmap is\nfull of features.\n\nFirst, the most visible one, a contributor is actively working on a revamped\nWebUI, and from the mockups we saw, it looks very promising. We expect this new\nUI to help you navigate seamlessly through hundreds of routes.\n\nSecond, we’re working on improvements for TLS configuration, with stores and\noptions, which will deserve its own explanation.\n\nThird, now that we have tried our hand on a new protocol, well, we might as well\nadd others (like UDP).\n\nIf you want to discuss or even help us implementing these features, please join\nus on the community forum [https://community.containo.us/] or on Github\n[https://github.com/containous/traefik], the maintainer team is always open to\nyour contributions.\n\nBut the options don’t stop there — Traefik is a community-driven project, and we\nnever know what is going to happen! We can’t wait to see what you’ll do with\nthis new architecture.\n\n\n--------------------------------------------------------------------------------\n\nTo be continued…\n> The community is at the center of our attention.\nWe’ve scheduled an online meet-up\n[/resources/the-traefik-2-0-online-meetup-100-community-driven/] where the\nmaintainer team will exclusively talk about Traefik v2.0! If you were looking\nfor an opportunity to ask questions or see a live demo, here it is.\n\nProbably the most important, we need your feedback. Tell us what you think,\nvoice your opinion! The alpha stage is the perfect timing to include disruptive\nchanges. Go crazy with pull requests, tests, and ideas.\n\nAnd finally, of course, our goal is to release the final as soon as possible!\n\n> We hope you enjoy Traefik as much as we enjoy building it with you!\n\n--------------------------------------------------------------------------------\n\nGrab the latest binaries\n[https://github.com/containous/traefik/releases/tag/v2.0.0-alpha1] for Linux,\nWindows, and Mac on Github or get the official Docker image!\n\ndocker pull traefik:v2.0.0-alpha1 (or 2.0.0-alpha1, v2.0, 2.0, faisselle)\ndocker pull traefik:v2.0.0-alpha1-alpine\ndocker pull traefik:v2.0.0-alpha1-nanoserver\n\nThe documentation can be found here [https://docs.traefik.io/] and the huge \nchangelog is here\n[https://github.com/containous/traefik/blob/master/CHANGELOG.md#v200-alpha1-2019-03-18]\n.\n\n\n--------------------------------------------------------------------------------\n\nThank you Gérald Croës\n[https://medium.com/u/520ac88c453e?source=post_page-----2f9aa17be305----------------------] \nfor your major contribution on this blog post and congrats to all the team\nmembers that have been working so hard on this alpha release 👏","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">Gigawatts of Routing Power</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-width-full\"><img src=\"https://containous.ghost.io/content/images/2019/12/image-6.png\" class=\"kg-image\"></figure><p>Back in 2015, a revolution was under way. We were moving from manual, handcrafted infrastructures, to container-based, industrial, and human-free platforms. In those dark ages of orchestration, edge traffic was remarkably difficult to manage. On one side, we had traditional reverse-proxies that were built for static infrastructures, on the other side, we were building dynamic clusters made to deploy and manage thousands of microservices. The idea of having a simple and automatic edge router, all in one binary, was appealing, but also idealistic. The foundation of <a href=\"https://containous.ghost.io/traefik/\">Traefik</a> was laid that year, paving the way to building a project with strong values: <em><em>simplicity of configuration</em></em>, <em><em>modern features</em></em>, and <em><em>open to the community</em></em>. A few years later, the project has reached <a href=\"https://github.com/containous/traefik\" rel=\"noopener\">21k stars on Github</a>, and more than 600 millions downloads. <em><em>Insane</em></em>.</p><p>Since then, the ecosystem around containers has changed a lot: Docker has become a de-facto standard, and Kubernetes has shown itself to be the clear winner in the battle for the best orchestration platform. Because of this, the <a href=\"https://landscape.cncf.io/\" rel=\"noopener\">CNCF landscape</a> has exploded, with hundreds of components to choose from.</p><blockquote>The time has come to work on something new for Traefik.</blockquote><p>For several months, the maintainer team has been working on a deep refactoring of the codebase to provide the firm foundations for the next iteration of Traefik, and we are ready to share this vision with you.</p><p>Today, we’re announcing Traefik 2.0 alpha, the edge router built with the future in mind.</p><p>The new core is here, help us finalize Traefik with the features you want!</p><hr><h2 id=\"we-want-features-\">We Want Features!</h2><p>Let’s see what we have in store.</p><h3 id=\"vocabulary-clarification\">Vocabulary Clarification</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-27.png\" class=\"kg-image\"></figure><p>Not a feature per se, but we still wanted to make it easier for newcomers to understand the core concepts at work in Traefik. We wanted every word to have a clear and unique meaning throughout the code and documentation.</p><p>Welcome p<em><em>roviders</em></em>, e<em><em>ntrypoints</em></em>, r<em><em>outers</em></em>, m<em><em>iddleware</em></em>, and s<em><em>ervices</em></em>.</p><ul><li><em><em>Providers</em></em> are the cluster technologies you already use (Kubernetes, Docker, Consul, Mesos, Rancher…). Traefik uses your provider’s API to discover the routes to your services.</li><li><em><em>Entrypoints</em></em>, in their most basic forms, are the open ports where requests will land.</li><li><em><em>Services</em></em> represent the software hosted on your infrastructure. Traefik knows how to deal with multiple instances of your programs (currently supporting multiple load balancing capabilities), and use the s<em><em>ervices</em></em> configuration to determine how to reach the actual program.</li><li><em><em>Routers</em></em> connect incoming requests to your s<em><em>ervices. </em></em>They<em><em> </em></em>hold<em><em> </em></em>the rules that decide which service handles the request.</li><li>Finally, pieces of <em><em><a href=\"https://docs.traefik.io/middlewares/overview/\">middleware</a> </em></em>are components that may update the request before it is handled by a service. Out of the box, Traefik comes with middleware to manage authentication, rate limiting, circuit breaker, whitelisting, buffering, and so on.</li></ul><h3 id=\"configuration-structure\">Configuration Structure</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-28.png\" class=\"kg-image\"></figure><p>Despite our best efforts, and because so many features have been added to Traefik since its first launch, we needed to polish things up and make sure every configuration option belonged in its place.</p><p>Here, it was a menial job that needed to be done, and we’ll spare you the details.</p><h2 id=\"let-us-be-clear-we-want-actual-features-\">Let Us Be Clear … We Want ACTUAL Features!</h2><p>So, let’s remove the mystery, since we’ve teased you enough. Here are the features we’ve added!</p><h3 id=\"tcp-support-\">TCP Support!</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-29.png\" class=\"kg-image\"></figure><p>That’s right! It’s time to say goodbye to <a href=\"https://github.com/containous/traefik/issues/10\" rel=\"noopener\">Issue #10</a>!</p><p>Yes, three years later, after <a href=\"https://github.com/containous/traefik/pull/4587\" rel=\"noopener\">a lot of work</a> (<a href=\"https://github.com/containous/traefik/issues/10#issuecomment-142835077\" rel=\"noopener\">as foretold</a>), and a lot of discussions, <a href=\"https://docs.traefik.io/routing/routers/#configuring-tcp-routers\">Traefik now fully supports the TCP protocol</a>.</p><p>Want to see an example? Let’s use the File Provider, and redirect every request on port<code>27010</code> to your database service!</p><pre><code class=\"language-toml\">[entrypoints]\n   [entrypoints.web]\n      address = \":80\"\n\n[entrypoints.mongo-port]\n      address = \":27017\"\n\n[tcp] # YAY!\n   [tcp.routers]\n      [tcp.routers.everything-to-mongo]\n         entrypoints = [\"mongo-port\"]\n         rule = \"HostSNI(`*`)\" # Catches every request       \n         service = \"database\"</code></pre><p>The best part? Traefik supports routing based on <a href=\"https://en.wikipedia.org/wiki/Server_Name_Indication\" rel=\"noopener\">SNIs</a>!</p><pre><code class=\"language-toml\">[entrypoints]\n   [entrypoints.web]\n      address = \":80\"\n\n[entrypoints.mongo-port]\n      address = \":27017\"\n\n[tcp] # YAY!\n   [tcp.routers]\n      [tcp.routers.to-db-1]\n         entrypoints = [\"mongo-port\"]\n         rule = \"HostSNI(`db-1.domain`)\"       \n         service = \"db-1\"\n         [tcp.routers.to-db-1.tls] # The route is for TLS requests only\n      \n      [tcp.routers.to-db-2]\n         entrypoints = [\"mongo-port\"]\n         rule = \"HostSNI(`db-2.domain`)\"       \n         service = \"db-2\"\n         [tcp.routers.to-db-2.tls] # The route is for TLS requests only</code></pre><p>What’s even better? Traefik can go crazy, and support <em><em>both</em></em> HTTP <em><em>and</em></em> TCP on the <em><em>same</em></em> port.</p><blockquote>Yes, multiple protocols on the same entrypoint!</blockquote><pre><code class=\"language-toml\">[entrypoints]\n   [entrypoints.the-one]\n      address = \":443\"\n\n[tcp]\n   [tcp.routers]\n      [tcp.routers.to-db-1]\n         rule = \"HostSNI(`db-1.domain`)\"       \n         service = \"db-1\"\n         [tcp.routers.to-db-1.tls] # The route is for TLS requests only\n\n[http]\n   [http.routers]\n      [http.routers.my-api]\n         rule = \"Host(`api.domain`)\"       \n         service = \"my-api\"</code></pre><p>In its first alpha version, Traefik only enables TCP routes in the File Provider, but stay tuned because it will (very) soon be available for other providers!</p><h3 id=\"middleware-to-update-the-requests\">Middleware to Update the Requests</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-30.png\" class=\"kg-image\"></figure><p>Many features used to be magically embedded in Traefik, with room for customization but no option for fine-tuning.</p><p>Middlewares fill the gap and give you the possibility to enable/configure any feature you’d like, per router if you wish.</p><p>Middlewares are components that act on the request before it is actually forwarded to the services, and can even decide to <em><em>not</em></em> forward the request if a required condition isn’t met.</p><p>At release, Traefik comes with the following middlewares: <a href=\"https://docs.traefik.io/middlewares/addprefix/\">AddPrefix</a> (to add a prefix to the request path), <a href=\"https://docs.traefik.io/middlewares/basicauth/\">BasicAuth</a> &amp; <a href=\"https://docs.traefik.io/middlewares/digestauth/\">DigestAuth</a>, <a href=\"https://docs.traefik.io/middlewares/forwardauth/\">ForwardAuth</a> (to delegate authentication to a third-party service), <a href=\"https://docs.traefik.io/middlewares/buffering/\">Buffering</a>, <a href=\"https://docs.traefik.io/middlewares/chain/\">Chain</a> (to define reusable sets of middlewares), <a href=\"https://docs.traefik.io/middlewares/circuitbreaker/\">CircuitBreaker</a> (to avoid calling broken services), <a href=\"https://docs.traefik.io/middlewares/compress/\">Compress</a>, <a href=\"https://docs.traefik.io/middlewares/errorpages/\">Errors</a> (to provide custom error pages), <a href=\"https://docs.traefik.io/middlewares/headers/\">Headers</a>, <a href=\"https://docs.traefik.io/middlewares/ipwhitelist/\">IpWhitelist</a>, MaxConn (to limit the number of simultaneous connections to a service), <a href=\"https://docs.traefik.io/middlewares/passtlsclientcert/\">PassTLSClientCert</a>, <a href=\"https://docs.traefik.io/middlewares/ratelimit/\">RateLimit</a> (to limit the number of requests to a service within a given period of time), <a href=\"https://docs.traefik.io/middlewares/redirectregex/\">RedirectRegex</a> and <a href=\"https://docs.traefik.io/middlewares/redirectscheme/\">RedirectScheme</a>, and <a href=\"https://docs.traefik.io/middlewares/replacepath/\">ReplacePath</a> (to update the query path before forwarding it to the service).</p><p>And more importantly, we’ve re-architectured the code to make it easier to provide additional middlewares in the near future.</p><h3 id=\"kubernetes-crd\">Kubernetes &amp; CRD</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-31.png\" class=\"kg-image\"></figure><p>In the past two years, the community has been discussing (a lot) around “better ingress,” and looking at our previous Kubernetes provider, we agreed that there was room for improvement. With v2, it became obvious that if we wanted to let our Kubernetes fans benefit from every feature (like TCP and middleware) without being swarmed by a clutter of annotations, we had to propose an alternative.</p><p>Among the alternatives, <a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/\" rel=\"noopener\">CRD</a>s are more and more popular since they solve shortcomings of the ingress specification. Inspired by what Heptio did in Contour with IngressRoute, we extended the specification to implement every Traefik feature.</p><p>We firmly believe that a consensus can emerge from those proposals and lead to the next Ingress specification in Kubernetes.</p><p>Below is an example of this specification.</p><pre><code class=\"language-yaml\">apiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: test.crd\n  namespace: default\nspec:\n  entrypoints:\n    - web\n    - web-secure\n  routes:\n    - match: Host(`traefik.io`) &amp;&amp; PathPrefix(`/foo`)\n      kind: Rule\n      services:\n        - name: whoami1\n          port: 80\n          strategy: RoundRobin\n      middlewares:\n        - name: stripprefix\n        - name: addprefix\n          namespace: foo\n    - match: Host(`containo.us`) &amp;&amp; Method(`POST`)\n      kind: Rule\n      services:\n        - name: whoami2\n          port: 80\n  tls:\n    secretName: supersecret</code></pre><h3 id=\"new-expressive-routing-rule-syntax\">New Expressive Routing Rule Syntax</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-32.png\" class=\"kg-image\"></figure><p>Traefik now supports an expressive syntax to define the router rules, with <code>and</code>, <code>or</code>, and <code>parenthesis</code>!</p><p>The available <a href=\"https://docs.traefik.io/routing/routers/#rule\">matchers</a> being <code>Headers</code>, <code>HeadersRegexp</code>, <code>Host</code>, <code>HostRegexp</code>, <code>Method</code>, <code>Path</code>, <code>PathPrefix</code>, and <code>Query</code>.</p><p>Since TCP is a whole different world, for now, it only supports a dedicated matcher: <code>HostSNI</code>.</p><p>Want to see examples?</p><pre><code class=\"language-toml\">rule = (Host(`api.domain`) &amp;&amp; PathPrefix(`/v2`)) \n  || Host(`api-v2.domain`)\n\nrule = (Method(`DELETE`) || (Method(`POST`) \n  &amp;&amp; Query(`action`, `delete`))) &amp;&amp; Host('api.domain')</code></pre><h3 id=\"cross-provider-support\">Cross-Provider Support</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-33.png\" class=\"kg-image\"></figure><p>Traefik has always been compatible with multiple providers, which is one of its greater strengths: whatever your infrastructure is, from bare metal to orchestrators and clusters, Traefik just works!</p><p>But with v2, we’ve gone a little further and allowed users to declare elements (middlewares, services, routers) in a provider, and to use them from a different one.</p><p>Let’s take a look at the following example, that declares an authentication middleware in a configuration file (the File Provider), which is being used from a Docker label (the Docker Provider).</p><pre><code class=\"language-toml\"># somewhere in a configuration file for the file provider\n[http.middlewares.my-users.basicauth]\n   users = [\"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\", \n            \"test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\"]</code></pre><hr><pre><code class=\"language-yaml\"># somewhere in a docker compose file\n\nyour-container:\n    image: your-docker-image\n    \n    labels:\n      - \"traefik.http.routers.my-router.middlewares=file.my-users\"</code></pre><p>And of course, you could declare a router in a provider that points to services declared by another.</p><h3 id=\"tls-termination-per-route\">TLS Termination per Route</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-34.png\" class=\"kg-image\"></figure><p>While adding TCP support to Traefik, we had to re-think almost everything, starting with the e<em><em>ntrypoint</em></em> itself — the very door to your cluster.</p><p>Our first idea was to dedicate e<em><em>ntrypoints</em></em> (and as a consequence port numbers) to a type of “protocol.” Unfortunately, in some cases, especially when people used Traefik to route requests for multiple clusters, we deemed it too restrictive. As a consequence, we allowed multiple protocols per e<em><em>ntrypoint</em></em>.</p><p>Then, as debates were still going on, we kept looking for ways to better control how users would configure TLS <em><em>termination</em></em> or <em><em>passthrough. </em></em>The idea of enabling TLS on the <em><em>Router</em></em> level won the brainstorming, and then passed the tests of proof of concept (we have <a href=\"https://github.com/juliens\" rel=\"noopener\">quite a fan</a> of proof of concept branches on the team, to the point it has almost become a meme).</p><p>Here is an example with three routers listening on the same e<em><em>ntrypoint</em></em>, the first router terminates TLS connections (on HTTPS), the second router terminates TLS connections (on TCP), and the third router passes through, leaving the details of the TLS connection to be handled by the s<em><em>ervice </em></em>itself.</p><pre><code class=\"language-toml\">[entrypoints]\n   [entrypoints.web-secure]\n      address = \":443\"\n\n[http]\n   [http.routers.to-service-1]\n      rule = \"Host(`domain-1`)\"\n      service = \"service-1\"\n      [http.routers.to-service-1.tls]\n         # terminates the tls connection and sends clear data\n         # to service 1\n\n[tcp]\n   [tcp.routers.to-service-2]\n      rule = \"HostSNI(`domain-2`)\"\n      service = \"service-2\"\n      [tcp.routers.to-service-2.tls]\n         # terminates the tls connection and sends clear data\n         # to service 2\n\n[tcp.routers.to-service-3]\n      rule = \"HostSNI(`domain-3`)\"\n      service = \"service-3\"\n      [tcp.routers.to-service-3.tls]\n         passthrough = true # sends encrypted data \"as is\" to service-3</code></pre><h3 id=\"labels-key-value-configuration-tags-\">Labels, Key-Value Configuration, Tags, …</h3><p>A small tweak on the surface, but quite an impact in the code, we’ve re-written the configuration parser. This new system ensures that every option in Traefik has the same path, whether expressed in TOML <code>[something.that.is.here]</code>, a label attached to a container <code>something.that.is.there</code>, a key (as in key-value store) <code>something/that/is/somewhere</code>, or anything that might be available in the future.</p><h3 id=\"revamped-documentation\">Revamped Documentation</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-35.png\" class=\"kg-image\"></figure><p>We’ve updated the <a href=\"https://docs.traefik.io/\">documentation</a> structure to help new users quickly understand how to use and configure Traefik. At the same time, we came up with an outline that mirrored the configuration structure, making it easier for expert users to learn more about specific configuration details.</p><hr><h2 id=\"the-road-to-the-final-version\">The Road to the Final Version</h2><p>Yes, more (<em><em>much</em></em> more) is on the way, but we were so eager to share the work that we couldn’t wait a minute longer than we already did.</p><blockquote>New WebUI, remaining providers, metrics, UDP, YAML, TLS stores &amp; options, canary, more documentation — everything is possible.</blockquote><p>Apart from re-enabling other providers (alpha comes with file, Docker, and k8s only), and enabling TCP for all of them (currently file only), the roadmap is full of features.</p><p>First, the most visible one, a contributor is actively working on a revamped WebUI, and from the mockups we saw, it looks <em><em>very</em></em> promising. We expect this new UI to help you navigate seamlessly through hundreds of routes.</p><p>Second, we’re working on improvements for TLS configuration, with stores and options, which will deserve its own explanation.</p><p>Third, now that we have tried our hand on a new protocol, well, we might as well add others (like UDP).</p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-36.png\" class=\"kg-image\"></figure><p>If you want to discuss or even help us implementing these features, please join us on the <a href=\"https://community.containo.us/\">community forum</a> or on <a href=\"https://github.com/containous/traefik\" rel=\"noopener\">Github</a>, the maintainer team is always open to your contributions.</p><p>But the options don’t stop there — Traefik is a community-driven project, and we never know what is going to happen! We can’t wait to see what you’ll do with this new architecture.</p><hr><h2 id=\"to-be-continued-\">To be continued…</h2><blockquote>The community is at the center of our attention.</blockquote><p>We’ve scheduled <a href=\"https://containous.ghost.io/resources/the-traefik-2-0-online-meetup-100-community-driven/\">an online meet-up</a> where the maintainer team will exclusively talk about Traefik v2.0! If you were looking for an opportunity to ask questions or see a live demo, here it is.</p><p>Probably the most important, we <em><em>need</em></em> your feedback. Tell us what you think, voice your opinion! The alpha stage is the perfect timing to include disruptive changes. Go crazy with pull requests, tests, and ideas.</p><p>And finally, of course, our goal is to release the final as soon as possible!</p><blockquote>We hope you enjoy Traefik as much as we enjoy building it with you!</blockquote><hr><p>Grab the <a href=\"https://github.com/containous/traefik/releases/tag/v2.0.0-alpha1\" rel=\"noopener\">latest binaries</a> for Linux, Windows, and Mac on Github or get the official Docker image!</p><pre><code class=\"language-shell\">docker pull traefik:v2.0.0-alpha1 (or 2.0.0-alpha1, v2.0, 2.0, faisselle)\ndocker pull traefik:v2.0.0-alpha1-alpine\ndocker pull traefik:v2.0.0-alpha1-nanoserver</code></pre><p>The documentation can be found <a href=\"https://docs.traefik.io/\">here</a> and the <em><em>huge</em></em> changelog is <a href=\"https://github.com/containous/traefik/blob/master/CHANGELOG.md#v200-alpha1-2019-03-18\" rel=\"noopener\">here</a>.</p><hr><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-37.png\" class=\"kg-image\"></figure><p><em><em>Thank you </em></em><a href=\"https://medium.com/u/520ac88c453e?source=post_page-----2f9aa17be305----------------------\" rel=\"noopener\"><em><em>Gérald Croës</em></em></a><em><em> for your major contribution on this blog post and congrats to all the team members that have been working so hard on this alpha release 👏</em></em></p>","url":"https://containous.ghost.io/blog/back-to-traefik-2-0-2f9aa17be305/","canonical_url":null,"uuid":"393d57dd-4c65-4b3b-9705-07f64521802c","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dd6b3d9b6de2b00381d405f","reading_time":10}},{"node":{"id":"Ghost__Post__5dd7e9cff1db6f0038c743f4","title":"The Journey to Traefik Enterprise Edition: Join the Free “Early Access” Program","slug":"the-journey-to-traefik-enterprise-edition-join-the-early-access-program-b73e07d62f30","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/11/ee.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/6a61f59bb594a837dfeec781fa0238ee/fe3a8/ee.png","srcSet":"/static/6a61f59bb594a837dfeec781fa0238ee/630fb/ee.png 300w,\n/static/6a61f59bb594a837dfeec781fa0238ee/2a4de/ee.png 600w,\n/static/6a61f59bb594a837dfeec781fa0238ee/fe3a8/ee.png 1035w","sizes":"(max-width: 1035px) 100vw, 1035px"}}},"excerpt":"Welcome to the first post of our journey with Traefik Enterprise Edition!\nThis post guides you through the first steps of your TraefikEE discovery journey...","custom_excerpt":"Welcome to the first post of our journey with Traefik Enterprise Edition!\nThis post guides you through the first steps of your TraefikEE discovery journey...","visibility":"public","created_at_pretty":"22 November, 2019","published_at_pretty":"January 14, 2019","updated_at_pretty":"21 May, 2020","created_at":"2019-11-22T13:59:43.000+00:00","published_at":"2019-01-14T13:59:00.000+00:00","updated_at":"2020-05-21T23:47:33.000+00:00","meta_title":"The Journey to TraefikEE: Join the Free “Early Access” Program","meta_description":"Welcome to the first post of our journey with Traefik Enterprise Edition!\nThis post guides you through the first steps of your TraefikEE discovery journey..","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Damien Duportal","slug":"damien","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/dduportal_light.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Damien Duportal","slug":"damien","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/dduportal_light.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Welcome to the first post of our journey with Traefik Enterprise Edition\n[/traefikee/]!\n\nTraefikEE (Enterprise Edition) is available here\n[https://info.containo.us/get-traefik-enterprise-edition-free-for-30-days] for\nfree.\n\nThis post guides you through the first steps of your TraefikEE discovery\njourney: From requesting the “early access” to obtaining your license key and\ngetting started.\n\nTraefikEE: Traefik, for the Enterprise World\nIntroduced during KubeCon US 2018 (check out the “Introducing Traefik\nEnterprise\nEdition” blog post [/blog/introducing-traefik-enterprise-edition-83b78d09efeb/]\n), TraefikEE is built on top of Traefik and adds clustering features to satisfy\nthe needs of Enterprise customers. All Traefik concepts apply to TraefikEE, so\nif you already are a Traefik user, you’re in familiar territory.\n\nTraefikEE runs on the edge of your platform to route the traffic to your\napplications.\n\nGlobal Architecture of Traefik Enterprise EditionTraefikEE is composed of two\nplanes:\n\n * The data plane: horizontally scalable nodes, which forward ingress traffic to\n   your services\n * The control plane: distributed nodes, implementing the raft consensus\n   [http://thesecretlivesofdata.com/raft/], which watch your platform and its\n   services, stores topology changes, and reconfigure the data plane to adapt\n   ingress routing dynamically\n\nThis distributed architecture is the cornerstone of TraefikEE’s strengths:\nnatively highly available, scalable, and secure.\n\nSupport Account and License\nThe journey begins by visiting the TraefikEE website at \nhttps://containo.us/traefikee [/traefikee/], and opting in to the program by\nclicking the “Free Trial” form.\n\n> (A voice in the background): I’ve been told it is free. Why should I give you my\npersonal information?\n> Containous: We need a way to communicate together, so the form creates a\n“Support Account” for you in our ticketing system. So you can raise requests if\nyou get any issue with TraefikEE, and we can send you information about update.\nOnce you’ve filled out the form, look for a “Welcome to Containous” e-mail sent\nfrom support@containous.zendesk.com in your mail’s inbox (or, possibly junk\nfolder). Click on the link it contains to validate your account. You will be\nprompted to set a (strong) password: you know the story [https://xkcd.com/936/].\n\nOnce your account is validated with a (strong) password, the system will\ngenerate a TraefikEE license and send you an e-mail entitled “Your license key”\n(it may take a couple minutes) which will contain instructions.\n\nKnock, knock, you got an email!> (A voice in the background): I never received the email. It’s probably tagged as\nspam by my organization’s mail system.\n> Containous: Instead of the email, you can also browse the customer portal at \nhttps://support.containo.us/\n[https://containous.zendesk.com/hc/en-us/restricted?return_to=https%3A%2F%2Fcontainous.zendesk.com%2Fhc%2Fen-us]\n, select the button “Check my existing requests / License” and open the request\nnamed “Your license key”.\nGet your license and put it somewhere “secure” (e.g. an encrypted system). For\nthis post series, we store the license in a file, encrypted into a Keybase.io\n[https://keybase.io/] volume:\n\n$ cat /keybase/private/dduportal/traefikee-license\nxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n\nThat’s all folks, you can get started with the installation from the\ndocumentation [https://docs.containo.us/].\n\nOn the next post “The Journey to Traefik Enterprise Edition: Product\nEvaluation”, we will install TraefikEE on your machine and take a tour of its\nfeatures.","html":"<figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/12/image-11.png\" class=\"kg-image\"></figure><p>Welcome to the first post of our journey with <a href=\"https://containous.ghost.io/traefikee/\">Traefik Enterprise Edition</a>!</p><p>TraefikEE (Enterprise Edition) is available <a href=\"https://info.containo.us/get-traefik-enterprise-edition-free-for-30-days\">here</a> for free.</p><p>This post guides you through the first steps of your TraefikEE discovery journey: From requesting the “early access” to obtaining your license key and getting started.</p><h2 id=\"traefikee-traefik-for-the-enterprise-world\">TraefikEE: Traefik, for the Enterprise World</h2><p>Introduced during KubeCon US 2018 (<a href=\"https://containous.ghost.io/blog/introducing-traefik-enterprise-edition-83b78d09efeb/\">check out the “Introducing Traefik Enterprise Edition” blog post</a>), TraefikEE is built on top of Traefik and adds clustering features to satisfy the needs of Enterprise customers. All Traefik concepts apply to TraefikEE, so if you already are a Traefik user, you’re in familiar territory.</p><p>TraefikEE runs on the edge of your platform to route the traffic to your applications.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-51.png\" class=\"kg-image\"><figcaption>Global Architecture of Traefik Enterprise Edition</figcaption></figure><p>TraefikEE is composed of two planes:</p><ul><li>The <strong><strong>data plane</strong></strong>: horizontally scalable nodes, which forward ingress traffic to your services</li><li>The <strong><strong>control plane</strong></strong>: distributed nodes, implementing <a href=\"http://thesecretlivesofdata.com/raft/\" rel=\"noopener\">the raft consensus</a>, which watch your platform and its services, stores topology changes, and reconfigure the data plane to adapt ingress routing dynamically</li></ul><p>This distributed architecture is the cornerstone of TraefikEE’s strengths: natively <strong><strong>highly available</strong></strong>, <strong><strong>scalable</strong></strong>, and <strong><strong>secure</strong></strong>.</p><h2 id=\"support-account-and-license\">Support Account and License</h2><p>The journey begins by visiting the TraefikEE website at <a href=\"https://containous.ghost.io/traefikee/\">https://containo.us/traefikee</a>, and opting in to the program by clicking the “Free Trial” form.</p><blockquote><em><em><strong><strong>(A voice in the background):</strong></strong> I’ve been told it is free. Why should I give you my personal information?</em></em></blockquote><blockquote><em><em><strong><strong>Containous:</strong></strong> We need a way to communicate together, so the form creates a “Support Account” for you in our ticketing system. So you can raise requests if you get any issue with TraefikEE, and we can send you information about update.</em></em></blockquote><p>Once you’ve filled out the form, look for a “Welcome to Containous” e-mail sent from <a href=\"mailto:support@containous.zendesk.com\" rel=\"noopener\">support@containous.zendesk.com</a> in your mail’s inbox (or, possibly junk folder). Click on the link it contains to validate your account. You will be prompted to set a (strong) password: <a href=\"https://xkcd.com/936/\" rel=\"noopener\">you know the story</a>.</p><p>Once your account is validated with a (strong) password, the system will generate a TraefikEE license and send you an e-mail entitled “Your license key” (it may take a couple minutes) which will contain instructions.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-53.png\" class=\"kg-image\"><figcaption>Knock, knock, you got an email!</figcaption></figure><blockquote><em><em><strong><strong>(A voice in the background):</strong></strong> I never received the email. It’s probably tagged as spam by my organization’s mail system.</em></em></blockquote><blockquote><em><em><strong><strong>Containous:</strong></strong> Instead of the email, you can also browse the customer portal at</em> </em><a href=\"https://containous.zendesk.com/hc/en-us/restricted?return_to=https%3A%2F%2Fcontainous.zendesk.com%2Fhc%2Fen-us\">https://support.containo.us/</a><em><em>, select the button “Check my existing requests / License” and open the request named “Your license key”.</em></em></blockquote><p>Get your license and put it somewhere “secure” (e.g. an encrypted system). For this post series, we store the license in a file, encrypted into a <a href=\"https://keybase.io/\" rel=\"noopener\">Keybase.io</a> volume:</p><pre><code class=\"language-shell\">$ cat /keybase/private/dduportal/traefikee-license\nxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</code></pre><p>That’s all folks, you can <a href=\"https://docs.containo.us/\">get started with the installation from the documentation</a>.</p><p>On the next post “The Journey to Traefik Enterprise Edition: Product Evaluation”, we will install TraefikEE on your machine and take a tour of its features.</p>","url":"https://containous.ghost.io/blog/the-journey-to-traefik-enterprise-edition-join-the-early-access-program-b73e07d62f30/","canonical_url":null,"uuid":"ba5a6dc5-e17f-4c5a-ace8-c1c2b1bb61c9","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dd7e9cff1db6f0038c743f4","reading_time":3}},{"node":{"id":"Ghost__Post__5dd7ea61f1db6f0038c74413","title":"Introducing Traefik Enterprise Edition","slug":"introducing-traefik-enterprise-edition-83b78d09efeb","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/11/ee-1.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/6a61f59bb594a837dfeec781fa0238ee/fe3a8/ee-1.png","srcSet":"/static/6a61f59bb594a837dfeec781fa0238ee/630fb/ee-1.png 300w,\n/static/6a61f59bb594a837dfeec781fa0238ee/2a4de/ee-1.png 600w,\n/static/6a61f59bb594a837dfeec781fa0238ee/fe3a8/ee-1.png 1035w","sizes":"(max-width: 1035px) 100vw, 1035px"}}},"excerpt":"Containous, the company behind Traefik, is announcing Traefik Enterprise Edition, a new platform built on top of Traefik, designed for business-critical deployments.","custom_excerpt":"Containous, the company behind Traefik, is announcing Traefik Enterprise Edition, a new platform built on top of Traefik, designed for business-critical deployments.","visibility":"public","created_at_pretty":"22 November, 2019","published_at_pretty":"December 11, 2018","updated_at_pretty":"21 May, 2020","created_at":"2019-11-22T14:02:09.000+00:00","published_at":"2018-12-11T14:02:00.000+00:00","updated_at":"2020-05-21T23:49:46.000+00:00","meta_title":"Introducing Traefik Enterprise Edition","meta_description":"Containous is announcing Traefik Enterprise Edition, a new platform built on top of Traefik, designed for business-critical deployments.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Emile Vauge","slug":"emile","bio":null,"profile_image":"//www.gravatar.com/avatar/68e7fb947bb29dffbd46ac8aae45b6de?s=250&d=mm&r=x","twitter":"@emilevauge","facebook":null,"website":null}],"primary_author":{"name":"Emile Vauge","slug":"emile","bio":null,"profile_image":"//www.gravatar.com/avatar/68e7fb947bb29dffbd46ac8aae45b6de?s=250&d=mm&r=x","twitter":"@emilevauge","facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"We Made It Distributed\n\nContainous [/], the company behind Traefik [/traefik/], is announcing Traefik\nEnterprise Edition — TraefikEE — a new platform built on top of Traefik,\ndesigned for business-critical deployments.\n\nIn just three years, Traefik, the Cloud Native Edge Router, has become a key\nplayer in microservices infrastructures. With more than 19,000 stars on Github\nand 400,000,000 downloads on DockerHub, Traefik is widely used by major\ncompanies in their production environments.\n\nToday, we are proud to announce that TraefikEE, our new commercial product, has\nreached public beta. TraefikEE allows you to deploy distributed Traefik\ninstances across your infrastructure, providing a scalable and reliable edge\nrouting platform. Split into a control plane and a data plane, Traefik cluster\nnodes are easily deployed and operated using the TraefikEE CLI. Implementing the\nRaft consensus, TraefikEE can safely store and replicate configurations and TLS\ncertificates across the nodes.\n\nLet’s take a look at how TraefikEE works.\n\nTraefikEE — Overview\nTraefikEE ArchitectureTraefikEE is built on top of Traefik and adds clustering features to satisfy the\nneeds of Enterprise customers. All Traefik concepts apply to TraefikEE, so if\nyou’re already a Traefik user, you’re in familiar territory.\n\nIt runs on the edge of your platform to route the traffic to your applications,\nand is composed of two elements:\n\n * The data plane: horizontally scalable nodes, which forward ingress traffic to\n   your services\n * The control plane: distributed nodes, implementing the raft consensus, which\n   watch your platform and its services, stores topology changes, and\n   reconfigure the data plane to adapt ingress routing dynamically\n\nA TraefikEE cluster natively supports raft consensus between control nodes to\nsafely store and replicate configurations. No external Key-Value Store nor\nthird-party tool needed.\n\nThis distributed architecture is the cornerstone of TraefikEE’s strengths:\nnatively highly available, scalable and secure.\n\nHighly Available\nThe control plane is a key component of TraefikEE. It is responsible for storing\nall cluster data, including events, TLS certificates, and Traefik configuration.\nIt is also in charge of connecting to the orchestrator to generate the data\nplane routing configuration.\n\nSince it is such a critical part of your system, TraefikEE is designed from the\nground up to be fault tolerant: the control plane runs natively in cluster mode\nwithout any extra configuration or external Key Value Store. It ensures your\ndata is always available and safe by using an internal distributed store,\nimplemented with raft.\n\nScalable\nThe data plane is in charge of forwarding the incoming requests to the\napplications. It has been designed to scale horizontally at a glance in order to\nface irregular network loads.\n\nTraefikEE handles high loads in a blink: just add more nodes to the data plane\nto handle the additional requests. When the peak is gone, shrink the number of\nnodes to save resources. Of course, this process can be done automatically using\nauto-scaling tools.\n\nSecure\nBy splitting responsibilities between two components, TraefikEE follows the\nprinciple of “Separation of Concerns.”\n\nTo ensure that sensitive information only runs on a closed and safe environment,\nthe control plane is not exposed to the outside. As a result, any malicious\naction from external traffic will stay stuck in the data plane and your platform\nwill stay safe.\n\nMoreover, TraefikEE only relies on encrypted communications between nodes, to\nadd an extra layer of security.\n\nSmooth Operations\nInstalling and managing a raft based application is usually a painful\nexperience. Since Traefik was made popular thanks to its usability and\nrefreshing user experience, we have extended those benefits to TraefikEE.\n\nFor this reason, TraefikEE comes with an additional CLI that manages to deploy\nand operate a cluster with several nodes in only one command line. Currently,\nKubernetes and Docker Swarm Mode are supported. More platforms will be added\nsoon. Teams will love to use this time-saving tool, traefikeectl (pronounced\n“traefikee-cuddle”).\n\nTraefikEE comes with a dashboard to visualize your cluster nodes configuration\nand status, in addition to aggregated data plane metrics.\n\nCommercial support is bundled with TraefikEE. The Traefik engineering team\nimmediately investigates and resolves any critical issues which may arise.\n\nEarly Access\nTraefikEE is available in early access starting today. The registration process\nis as simple and automated as possible, so don’t fear endless registration forms\nnor crowded waiting queues before trying it out. Visit our website at \nhttps://containo.us/traefikee [/traefikee/] and get your license key in less\nthan a minute!\n\nTraefik Stays Open\nTraefikEE is built on top of Traefik, that means that Traefik continues to\nevolve and will stay open source. Nothing changes! We are firm believers in open\nsource, and Traefik will continue to be our main priority and a community-driven\nproject. We are working on significant changes to Traefik, and recently have\nshared details [/blog/traefik-spoiler-season-episode-1-3dbcb1f5d8b9/] on what we\nhave been doing so far. Please stay tuned for full disclosure.\n\nAbout Containous\nContainous is the company that supports the development of Traefik. We provide\nprofessional services to ensure businesses get the most out of the solution.\n\nWith this new product, Containous continues to innovate and define new ways to\naccess microservice platforms, pushing the limits of automation and scalability.","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">We Made It Distributed</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2019/12/image-12.png\" class=\"kg-image\"></figure><p><em><em><a href=\"https://containous.ghost.io/\">Containous</a></em></em>, the company behind <em><em><a href=\"https://containous.ghost.io/traefik/\">Traefik</a></em></em>, is announcing Traefik Enterprise Edition — <em><em>TraefikEE</em></em> — a new platform built on top of <em><em>Traefik</em></em>, designed for business-critical deployments.</p><p>In just three years, <em><em>Traefik</em></em>, the Cloud Native Edge Router, has become a key player in microservices infrastructures. With more than 19,000 stars on Github and 400,000,000 downloads on DockerHub, <em><em>Traefik</em></em> is widely used by major companies in their production environments.</p><p>Today, we are proud to announce that <em><em>TraefikEE</em></em>, our new commercial product, has reached public beta. <em><em>TraefikEE</em></em> allows you to deploy distributed Traefik instances across your infrastructure, providing a scalable and reliable edge routing platform. Split into a control plane and a data plane, <em><em>Traefik</em></em> cluster nodes are easily deployed and operated using the <em><em>TraefikEE</em></em> CLI. Implementing the Raft consensus, <em><em>TraefikEE</em></em> can safely store and replicate configurations and TLS certificates across the nodes.</p><p>Let’s take a look at how <em><em>TraefikEE</em></em> works.</p><h2 id=\"traefikee-overview\">TraefikEE — Overview</h2><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-54.png\" class=\"kg-image\"><figcaption>TraefikEE Architecture</figcaption></figure><p><em><em>TraefikEE</em></em> is built on top of <em><em>Traefik</em></em> and adds clustering features to satisfy the needs of Enterprise customers. All <em><em>Traefik</em></em> concepts apply to <em><em>TraefikEE</em></em>, so if you’re already a <em><em>Traefik</em></em> user, you’re in familiar territory.</p><p>It runs on the edge of your platform to route the traffic to your applications, and is composed of two elements:</p><ul><li><strong><strong>The data plane</strong></strong>: horizontally scalable nodes, which forward ingress traffic to your services</li><li><strong><strong>The control plane</strong></strong>: distributed nodes, implementing the raft consensus, which watch your platform and its services, stores topology changes, and reconfigure the data plane to adapt ingress routing dynamically</li></ul><p>A <em><em>TraefikEE</em></em> cluster natively supports raft consensus between control nodes to safely store and replicate configurations. No external Key-Value Store nor third-party tool needed.</p><p>This distributed architecture is the cornerstone of <em><em>TraefikEE</em></em>’s strengths: natively <strong><strong>highly available</strong></strong>, <strong><strong>scalable</strong></strong> and <strong><strong>secure</strong></strong>.</p><h2 id=\"highly-available\">Highly Available</h2><figure class=\"kg-card kg-embed-card\"><iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/bsl05RVuMtM?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><p>The control plane is a key component of <em><em>TraefikEE</em></em>. It is responsible for storing all cluster data, including events, TLS certificates, and <em><em>Traefik </em></em>configuration. It is also in charge of connecting to the orchestrator to generate the data plane routing configuration.</p><p>Since it is such a critical part of your system,<em><em> TraefikEE</em></em> is designed from the ground up to be fault tolerant: the control plane runs natively in cluster mode without any extra configuration or external Key Value Store. It ensures your data is always available and safe by using an internal distributed store, implemented with raft.</p><h2 id=\"scalable\">Scalable</h2><figure class=\"kg-card kg-embed-card\"><iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/YNKMcussMrM?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><p>The data plane is in charge of forwarding the incoming requests to the applications. It has been designed to scale horizontally at a glance in order to face irregular network loads.</p><p><em><em>TraefikEE</em></em> handles high loads in a blink: just add more nodes to the data plane to handle the additional requests. When the peak is gone, shrink the number of nodes to save resources. Of course, this process can be done automatically using auto-scaling tools.</p><h2 id=\"secure\">Secure</h2><figure class=\"kg-card kg-embed-card\"><iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/rPAcKSiidUo?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><p>By splitting responsibilities between two components, <em><em>TraefikEE</em></em> follows the principle of “Separation of Concerns.”</p><p>To ensure that sensitive information only runs on a closed and safe environment, the control plane is not exposed to the outside. As a result, any malicious action from external traffic will stay stuck in the data plane and your platform will stay safe.</p><p>Moreover, <em><em>TraefikEE</em></em> only relies on encrypted communications between nodes, to add an extra layer of security.</p><h2 id=\"smooth-operations\">Smooth Operations</h2><p>Installing and managing a raft based application is usually a painful experience. Since <em><em>Traefik</em></em> was made popular thanks to its usability and refreshing user experience, we have extended those benefits to TraefikEE.</p><p>For this reason, <em><em>TraefikEE</em></em> comes with an additional CLI that manages to deploy and operate a cluster with several nodes in only one command line. Currently, Kubernetes and Docker Swarm Mode are supported. More platforms will be added soon. Teams will love to use this time-saving tool, <em><em>traefikeectl</em></em> (pronounced “traefikee-cuddle”).</p><p><em><em>TraefikEE</em></em> comes with a dashboard to visualize your cluster nodes configuration and status, in addition to aggregated data plane metrics.</p><p>Commercial support is bundled with TraefikEE. The Traefik engineering team immediately investigates and resolves any critical issues which may arise.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-55.png\" class=\"kg-image\"></figure><h2 id=\"early-access\">Early Access</h2><p>TraefikEE is available in early access starting today. The registration process is as simple and automated as possible, so don’t fear endless registration forms nor crowded waiting queues before trying it out. Visit our website at <a href=\"https://containous.ghost.io/traefikee/\">https://containo.us/traefikee</a> and get your license key in less than a minute!</p><h2 id=\"traefik-stays-open\">Traefik Stays Open</h2><p><em><em>TraefikEE</em></em> is built on top of <em><em>Traefik</em></em>, that means that Traefik continues to evolve and will stay open source. Nothing changes! We are firm believers in open source, and <em><em>Traefik</em></em> will continue to be our main priority and a community-driven project. We are working on significant changes to Traefik, and <a href=\"https://containous.ghost.io/blog/traefik-spoiler-season-episode-1-3dbcb1f5d8b9/\">recently have shared details</a> on what we have been doing so far. Please stay tuned for full disclosure.</p><h2 id=\"about-containous\">About Containous</h2><p>Containous is the company that supports the development of Traefik. We provide professional services to ensure businesses get the most out of the solution.</p><p>With this new product, Containous continues to innovate and define new ways to access microservice platforms, pushing the limits of automation and scalability.</p>","url":"https://containous.ghost.io/blog/introducing-traefik-enterprise-edition-83b78d09efeb/","canonical_url":null,"uuid":"dd190b78-8f67-41dd-a7f4-6655c3565988","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dd7ea61f1db6f0038c74413","reading_time":4}},{"node":{"id":"Ghost__Post__5dd7eb67f1db6f0038c74435","title":"Traefik — Spoiler Season — Episode 1","slug":"traefik-spoiler-season-episode-1-3dbcb1f5d8b9","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/11/wip-traefik.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/bf6dc1c716dac26a7c9c89d237a4e47e/9c108/wip-traefik.png","srcSet":"/static/bf6dc1c716dac26a7c9c89d237a4e47e/630fb/wip-traefik.png 300w,\n/static/bf6dc1c716dac26a7c9c89d237a4e47e/9c108/wip-traefik.png 585w","sizes":"(max-width: 585px) 100vw, 585px"}}},"excerpt":"Hi everyone! Today is a very special day: we’re here to talk about changes. Yes, the changes we’ve been playing around with, the changes we talked about in...","custom_excerpt":"Hi everyone! Today is a very special day: we’re here to talk about changes. Yes, the changes we’ve been playing around with, the changes we talked about in...","visibility":"public","created_at_pretty":"22 November, 2019","published_at_pretty":"November 19, 2018","updated_at_pretty":"22 May, 2020","created_at":"2019-11-22T14:06:31.000+00:00","published_at":"2018-11-19T14:06:00.000+00:00","updated_at":"2020-05-22T00:48:26.000+00:00","meta_title":"Traefik — Spoiler Season — Episode 1","meta_description":"Today is a very special day: we’re here to talk about changes. Yes, the changes we’ve been playing around with, the changes we talked about in...","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"The Story of the Configuration Structure\n\nHi everyone! Today is a very special day: we’re here to talk about changes.\n\nYes, the changes we’ve been playing around with, the changes we talked about in \nthe latest release note\n[/blog/traefik-1-7-yet-another-slice-of-awesomeness-2a9c99737889/], the changes\nwe’re looking forward to bringing to the next version of Traefik.\n\nBut like in every spoiler undertaking, we won’t disclose everything (where would\nbe the fun in that?).\n\nToday we’re going to discuss the configuration structure — the infamous \nentrypoints, frontends, and backends and how they interact together.\n\n\n--------------------------------------------------------------------------------\n\nNote: In the article, we’ll use the file provider to talk about the changes.\nThis provider best exposes the structure of the configuration and is the\nfoundation for the other label / annotation-driven providers. Of course,\neverything that applies to the file provider should apply to the\nlabel/annotation based providers.\n\nNote 2: In this article, we’ll assume that you’re a knowledgeable Traefik\nenthusiast.\n\nNote 3: Nope, no note 3, I’m good, let’s move on.\n\n\n--------------------------------------------------------------------------------\n\nIt All Started with…\nTo this day, Traefik’s configuration is quite simple and accounts for a great\npart of its success.\n\nEntrypoints accept the incoming requests (for the most part: ports & certificate\nmanagement), frontends analyze the requests to determine what should handle\nthem, and backends are responsible for forwarding the requests to your system\n(your both beloved and hated microservices).\n\nSince everyone loves diagrams (at least I do), below is the magic happening.\n\nThis architecture works like a charm because you can configure everything you\nneed, from authentication to redirects, to circuit breaker mechanisms, to retry\nmechanisms, to custom errors, to HTTPS, to load-balancing, to whatever you need.\nAnd better, it works with many providers (k8s, docker, AWS, mesos, …).\n\nBut … (always a but) … sometimes people were confused about where to configure\nthese options. Other times, people were confused because some options were\nmagically applied in a predetermined order they could not easily change (and no,\nhacking our way into the bowels of Traefik is not literally easy).\n\nBecause so many options were added since Traefik’s initial launch, we’re in a\nsituation where the magic comes along with a cost: things are less obvious than\nbefore, and it becomes a problem when you need to fine-tune the routing for\nspecific requests.\n\nAlso, since we’re complaining about the configuration, I have to say that I hate\nto repeat myself — which was sometimes a problem when (for example) I wanted to\nput the same auth mechanism on several frontends (but not every one of them).\n\n… And It Will Become\nSo we took a step back, gave it some thought, and came up with our first\nproposal … What if we wrote…\n\nEntrypoints accept the incoming requests, routers analyze the requests to\ndetermine what should handle them, and services are responsible for handling the\nrequests and ultimately forwarding them to your system (your both beloved and\nhated microservices).\n\n> Déjà vu?\nSee? SO different! It’s even more obvious in the following diagram.\n\nAre You Kidding?\nWell, we’re not.\n\nAt first sight, apart from the vocabulary update, we agree that nothing has \nobviously changed: same sequence of operations.\n\nWhat really changed is what’s happening inside.\n\nMiddleware — The (Almost) Newcomer\nIf you look closely to the new diagram, you’ll notice that something is missing,\nand then you’ll realize that this something is quite important.\n\nYou can pause here, go back to the diagram and keep reading once you’ve figured\nit out, but for the impatient amongst us, here it is: In the diagram, nothing \nupdates the request, nothing checks the credentials, nothing tweaks the path or\nthe domain. In the diagram, a whole block of features is missing.\n\nBut how come this crucial element isn’t shouting its absence from the diagram?\nIt’s simply because the configuration for these updates/tweaks/behaviors used to\nbe spread across the existing components (entrypoints, frontends, and backends).\n\nSoon, they will be configured in dedicated pieces of middleware and referred to\nfrom entrypoints, routers, and services. What’s more important — You will decide\nhow, when, and in which order.\n\n> Yes, you will have full control.\nBefore / After (The TL;DR you’re looking for)\nWe Want Examples!\nThat’s a legitimate request — let’s start with a super basic example with a\nfrontend, a backend, and no additional fluff.\n\n> A frontend (router), a backend (service), and no additional fluff\nbefore\n[frontends]\n   [frontends.my-frontend]\n      entrypoint = [\"http\"]\n      backend = my-backend\n      [frontend.my-frontend.routes.route1]\n         rule = \"Host:myhost.com\"\n\n[backends]\n   [backends.my-backend]\n      [backends.my-backend1.servers]          \n         [backends.backend1.servers.server-1]\n            url = \"http://xx.xx.xx.xx\"\n\nafter\n[routers]\n   [routers.my-router]\n      entrypoint = [\"http\"]\n      rule = \"Host:myhost.com\"\n      service = my-service\n\n[services]\n   [services.my-service.load-balancer]\n      [[services.my-services.load-balancer.servers]]\n         url = \"http://xx.xx.xx.xx\"\n\nApart from the vocabulary difference, this one brings nothing new to the table.\n(Yes, I’ll behave as if there was no additional .load-balancer type for the\nservice because this will be for another episode.)\n\nIf we wanted to have another server, of course, we would write:\n\n[routers]\n   [routers.my-router]\n      entrypoint = [\"http\"]\n      rule = \"Host:myhost.com\"\n      service = my-service\n\n[services]\n   [services.my-service.load-balancer]\n      [[services.my-services.load-balancer.servers]]\n         url = \"http://xx.xx.xx.xx\"\n      [[services.my-services.load-balancer.servers]]\n         url = \"http://xx.xx.xx.xx\"\n\n> Now, let’s add basic authentication!\nbefore\n[frontends]\n   [frontends.my-frontend]\n      entrypoint = [\"http\"]\n      backend = my-backend\n      [frontend.my-frontend.routes.route1]\n         rule = \"Host:myhost.com\"\n      [frontend.my-frontend.auth]\n         [frontend.my-frontend.auth.basic]\n            users = [\"admin:xxx\",\"super-admin:xxx\",]\n\n[backends]\n   [backends.my-backend]\n      [backends.my-backend1.servers]          \n         [backends.backend1.servers.server-1]\n            url = \"http://xx.xx.xx.xx\"\n\nafter\n[routers]\n   [routers.my-router]\n      entrypoint = [\"http\"]\n      rule = \"Host:myhost.com\"\n      middlewares = [\"admins-only\"]\n      service = my-service\n\n[middlewares]\n   [middlewares.admins-only.basicauth]\n      users = [\"admin:xxx\",\"super-admin:xxx\",]\n\n[services]\n   [services.my-service.load-balancer]\n      [[services.my-services.load-balancer.servers]]\n         url = \"http://xx.xx.xx.xx\"\n\nThe basic authentication middleware is no longer configured inside the router\nbut in a dedicated middleware section. The good news, besides readability, is\nthat you can now reuse the same middleware in a different router, along with\nother middlewares.\n\n[routers]\n   [routers.my-router]\n      entrypoint = [\"http\"]\n      rule = \"Host:myhost.com\"\n      middlewares = [\"admins-only\"]\n      service = my-service\n   \n   [routers.my-other-router]\n      entrypoint = [\"http\"]\n      rule = \"Host:myhost2.com\"\n      middlewares = [\"admins-only\", \"retry-std\"]\n      service = my-service\n\n[middlewares]\n   [middlewares.admins-only.basicauth]\n      users = [\"admin:xxx\",\"super-admin:xxx\",]\n   [middlewares.retry-std.retry]\n      attempts = 2\n\n[services]\n   [services.my-service.load-balancer]\n      [[services.my-services.load-balancer.servers]]\n         url = \"http://xx.xx.xx.xx\"\n\nAlso, another benefit you probably have noticed — you can now have many separate\nconfigurations for some features (like retry) and choose the one that fits for\nyour routers.\n\nBehind the scenes, many other things have already changed (not yet obvious), but\nwe’d like to tease with more episodes!\n\nBesides, we’ve decided to show you one “work in progress” feature at a time —\nthis gives time to listen to your feedback!\n\n\n--------------------------------------------------------------------------------\n\nTraefik is a project driven by the community! We are more grateful than ever for\nyour feedback on the project. We’ve reached 18k+ stars on Github, and the\nproduct has been downloaded more than 350 million times!\n\n\n--------------------------------------------------------------------------------\n\nJoin us on GitHub [https://github.com/containous/traefik], Twitter\n[https://twitter.com/traefik], on the Community Forum\n[https://community.containo.us], or in the comments below so we can hear your\nvoice!","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">The Story of the Configuration Structure</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/12/image-13.png\" class=\"kg-image\"></figure><p>Hi everyone! Today is a very special day: we’re here to talk about changes.</p><p>Yes, <em><em>the</em></em> changes we’ve been playing around with, the changes we talked about in <a href=\"https://containous.ghost.io/blog/traefik-1-7-yet-another-slice-of-awesomeness-2a9c99737889/\">the latest release note</a>, the changes we’re looking forward to bringing to the next version of Traefik.</p><p>But like in every spoiler undertaking, we won’t disclose everything (where would be the fun in that?).</p><p>Today we’re going to discuss the configuration <em><em>structure —</em></em> the infamous <code>entrypoints</code>, <code>frontends</code>, and <code>backends</code> and how they interact together<em><em>.</em></em></p><hr><p><strong><strong><em><em>Note:</em></em></strong></strong><em><em> In the article, we’ll use the </em></em><code><em><em>file</em></em></code><em><em> provider to talk about the changes. This provider best exposes the structure of the configuration and is the foundation for the other label / annotation-driven providers. Of course, everything that applies to the </em></em><code><em><em>file</em></em></code><em><em> provider should apply to the label/annotation based providers.</em></em></p><p><strong><strong>Note 2:</strong></strong> In this article, we’ll assume that you’re a knowledgeable Traefik enthusiast.</p><p><strong><strong>Note 3:</strong></strong> Nope, no note 3, I’m good, let’s move on.</p><hr><h2 id=\"it-all-started-with-\">It All Started with…</h2><p>To this day, Traefik’s configuration is quite simple and accounts for a great part of its success.</p><p><code>Entrypoints</code> accept the incoming requests (for the most part: ports &amp; certificate management), <code>frontends</code> analyze the requests to determine what should handle them, and <code>backends</code> are responsible for forwarding the requests to your system (your both beloved and hated microservices).</p><p>Since everyone loves diagrams (at least I do), below is the magic happening.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-56.png\" class=\"kg-image\"></figure><p>This architecture works like a charm because you can configure everything you need, from authentication to redirects, to circuit breaker mechanisms, to retry mechanisms, to custom errors, to HTTPS, to load-balancing, to whatever you need. And better, it works with many providers (k8s, docker, AWS, mesos, …).</p><p>But … (always a but) … sometimes people were confused about where to configure these options. Other times, people were confused because some options were magically applied in a predetermined order they could not easily change (and no, hacking our way into the bowels of Traefik is not literally easy).</p><p>Because so many options were added since Traefik’s initial launch, we’re in a situation where the magic comes along with a cost: things are less obvious than before, and it becomes a problem when you need to fine-tune the routing for specific requests.</p><p>Also, since we’re complaining about the configuration, I have to say that I hate to repeat myself — which was sometimes a problem when (for example) I wanted to put the same auth mechanism on several frontends (but not every one of them).</p><h2 id=\"-and-it-will-become\">… And It Will Become</h2><p>So we took a step back, gave it some thought, and came up with our first proposal … What if we wrote…</p><p><code>Entrypoints</code> accept the incoming requests, <code>routers</code> analyze the requests to determine what should handle them, and <code>services</code> are responsible for handling the requests and ultimately forwarding them to your system (your both beloved and hated microservices).</p><blockquote><em><em><em>Déjà vu?</em></em></em></blockquote><p>See? <em><em>SO</em></em> different! It’s even more obvious in the following diagram.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-57.png\" class=\"kg-image\"></figure><h3 id=\"are-you-kidding\">Are You Kidding?</h3><p>Well, we’re not.</p><p>At first sight, apart from the vocabulary update, we agree that nothing has <em><em>obviously</em></em> changed: same sequence of operations.</p><p>What really changed is what’s happening <em><em>inside</em></em>.</p><h3 id=\"middleware-the-almost-newcomer\">Middleware — The (Almost) Newcomer</h3><p>If you look closely to the new diagram, you’ll notice that <em><em>something</em></em> is missing, and then you’ll realize that this <em><em>something</em></em> is quite important.</p><p>You can pause here, go back to the diagram and keep reading once you’ve figured it out, but for the impatient amongst us, here it is: In the diagram, <em><em>nothing</em></em> updates the request, <em><em>nothing</em></em> checks the credentials, <em><em>nothing</em></em> tweaks the path or the domain. In the diagram, a whole block of features is missing.</p><p>But how come this crucial element isn’t shouting its absence from the diagram? It’s simply because the configuration for these updates/tweaks/behaviors used to be spread across the existing components (<code>entrypoints</code>, <code>frontends</code>, and <code>backends</code>).</p><p>Soon, they will be configured in dedicated pieces of <code>middleware</code> and referred to from <code>entrypoints</code>, <code>routers</code>, and <code>services</code>. What’s more important — <em><em>You</em></em> will decide how, when, and in which order.</p><blockquote><em><em>Yes, you will have full control.</em></em></blockquote><h2 id=\"before-after-the-tl-dr-you-re-looking-for-\">Before / After (The TL;DR you’re looking for)</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-58.png\" class=\"kg-image\"></figure><h2 id=\"we-want-examples-\">We Want Examples!</h2><p>That’s a legitimate request — let’s start with a super basic example with a frontend, a backend, and no additional fluff.</p><blockquote>A frontend (router), a backend (service), and no additional fluff</blockquote><h3 id=\"before\">before</h3><pre><code class=\"language-toml\">[frontends]\n   [frontends.my-frontend]\n      entrypoint = [\"http\"]\n      backend = my-backend\n      [frontend.my-frontend.routes.route1]\n         rule = \"Host:myhost.com\"\n\n[backends]\n   [backends.my-backend]\n      [backends.my-backend1.servers]          \n         [backends.backend1.servers.server-1]\n            url = \"http://xx.xx.xx.xx\"</code></pre><h3 id=\"after\">after</h3><pre><code class=\"language-toml\">[routers]\n   [routers.my-router]\n      entrypoint = [\"http\"]\n      rule = \"Host:myhost.com\"\n      service = my-service\n\n[services]\n   [services.my-service.load-balancer]\n      [[services.my-services.load-balancer.servers]]\n         url = \"http://xx.xx.xx.xx\"</code></pre><p>Apart from the vocabulary difference, this one brings nothing new to the table. (Yes, I’ll behave <em><em>as if</em></em> there was no additional <code>.load-balancer</code> type for the service because this will be for another episode.)</p><p>If we wanted to have another server, of course, we would write:</p><pre><code class=\"language-toml\">[routers]\n   [routers.my-router]\n      entrypoint = [\"http\"]\n      rule = \"Host:myhost.com\"\n      service = my-service\n\n[services]\n   [services.my-service.load-balancer]\n      [[services.my-services.load-balancer.servers]]\n         url = \"http://xx.xx.xx.xx\"\n      [[services.my-services.load-balancer.servers]]\n         url = \"http://xx.xx.xx.xx\"</code></pre><blockquote>Now, let’s add basic authentication!</blockquote><h3 id=\"before-1\">before</h3><pre><code class=\"language-toml\">[frontends]\n   [frontends.my-frontend]\n      entrypoint = [\"http\"]\n      backend = my-backend\n      [frontend.my-frontend.routes.route1]\n         rule = \"Host:myhost.com\"\n      [frontend.my-frontend.auth]\n         [frontend.my-frontend.auth.basic]\n            users = [\"admin:xxx\",\"super-admin:xxx\",]\n\n[backends]\n   [backends.my-backend]\n      [backends.my-backend1.servers]          \n         [backends.backend1.servers.server-1]\n            url = \"http://xx.xx.xx.xx\"</code></pre><h3 id=\"after-1\">after</h3><pre><code class=\"language-toml\">[routers]\n   [routers.my-router]\n      entrypoint = [\"http\"]\n      rule = \"Host:myhost.com\"\n      middlewares = [\"admins-only\"]\n      service = my-service\n\n[middlewares]\n   [middlewares.admins-only.basicauth]\n      users = [\"admin:xxx\",\"super-admin:xxx\",]\n\n[services]\n   [services.my-service.load-balancer]\n      [[services.my-services.load-balancer.servers]]\n         url = \"http://xx.xx.xx.xx\"</code></pre><p>The basic authentication middleware is no longer configured inside the router but in a dedicated middleware section. The good news, besides readability, is that you can now reuse the same middleware in a different router, along with other middlewares.</p><pre><code class=\"language-toml\">[routers]\n   [routers.my-router]\n      entrypoint = [\"http\"]\n      rule = \"Host:myhost.com\"\n      middlewares = [\"admins-only\"]\n      service = my-service\n   \n   [routers.my-other-router]\n      entrypoint = [\"http\"]\n      rule = \"Host:myhost2.com\"\n      middlewares = [\"admins-only\", \"retry-std\"]\n      service = my-service\n\n[middlewares]\n   [middlewares.admins-only.basicauth]\n      users = [\"admin:xxx\",\"super-admin:xxx\",]\n   [middlewares.retry-std.retry]\n      attempts = 2\n\n[services]\n   [services.my-service.load-balancer]\n      [[services.my-services.load-balancer.servers]]\n         url = \"http://xx.xx.xx.xx\"</code></pre><p>Also, another benefit you probably have noticed — you can now have many separate configurations for some features (like retry) and choose the one that fits for your routers.</p><p>Behind the scenes, many other things have already changed (not yet obvious), but we’d like to tease with more episodes!</p><p>Besides, we’ve decided to show you one “work in progress” feature at a time — this gives time to listen to your feedback!</p><hr><p>Traefik is a project driven by the community! We are more grateful than ever for your feedback on the project. We’ve reached <strong><strong>18k+ stars</strong></strong> on Github, and the product has been downloaded more than <strong><strong>350 million</strong></strong> times!</p><hr><p>Join us on <a href=\"https://github.com/containous/traefik\" rel=\"noopener\">GitHub</a>, <a href=\"https://twitter.com/traefik\" rel=\"noopener\">Twitter</a>, on the <a href=\"https://community.containo.us\">Community Forum</a>, or in the comments below so we can hear your voice!</p>","url":"https://containous.ghost.io/blog/traefik-spoiler-season-episode-1-3dbcb1f5d8b9/","canonical_url":null,"uuid":"8422082b-acf9-4d2a-a429-2d1f34259003","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dd7eb67f1db6f0038c74435","reading_time":5}},{"node":{"id":"Ghost__Post__5dcdb7431127150038885858","title":"Traefik 1.7 — Yet Another Slice of Awesomeness","slug":"traefik-1-7-yet-another-slice-of-awesomeness-2a9c99737889","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/11/Traefik1-7-1.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/2039570fe141a74b6f4932f9698477a3/f3583/Traefik1-7-1.png","srcSet":"/static/2039570fe141a74b6f4932f9698477a3/630fb/Traefik1-7-1.png 300w,\n/static/2039570fe141a74b6f4932f9698477a3/2a4de/Traefik1-7-1.png 600w,\n/static/2039570fe141a74b6f4932f9698477a3/f3583/Traefik1-7-1.png 1200w,\n/static/2039570fe141a74b6f4932f9698477a3/bbee5/Traefik1-7-1.png 1800w,\n/static/2039570fe141a74b6f4932f9698477a3/0ef64/Traefik1-7-1.png 2400w,\n/static/2039570fe141a74b6f4932f9698477a3/5a4ce/Traefik1-7-1.png 2715w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"Releases keep rolling! After three months of development and five release candidates, we are proud to announce the release of Traefik 1.7, codename “maroilles”.\n","custom_excerpt":"Releases keep rolling! After three months of development and five release candidates, we are proud to announce the release of Traefik 1.7, codename “maroilles”.\n","visibility":"public","created_at_pretty":"14 November, 2019","published_at_pretty":"September 25, 2018","updated_at_pretty":"21 May, 2020","created_at":"2019-11-14T20:21:23.000+00:00","published_at":"2018-09-25T08:00:00.000+00:00","updated_at":"2020-05-21T21:59:05.000+00:00","meta_title":"Traefik 1.7 — Yet Another Slice of Awesomeness","meta_description":"Releases keep rolling! After three months of development and five release candidates, we are proud to announce the release of Traefik 1.7.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Traefik Maroilles [https://en.wikipedia.org/wiki/Maroilles_cheese]Releases keep\nrolling! After three months of development and five release candidates, we are\nproud to announce the release of Traefik 1.7, codename “maroilles\n[https://en.wikipedia.org/wiki/Maroilles_cheese]”.\n\nWe’ve merged more pull requests than ever\n[https://github.com/containous/traefik/milestone/9?closed=1] from our\never-growing community of contributors that has reached more than 300\nindividuals. Thanks go to every one of you; we are in awe before your enthusiasm\nat improving Traefik.\n\nThe full changelog is available here\n[https://github.com/containous/traefik/releases/tag/v1.7.0], but we wanted to\nhighlight our favorite features.\n\nLet’s Encrypt & The New TLS Challenge in Town\nLet’s Encrypt integration is one of the most praised features of Traefik, so\nwhen Let’s Encrypt faced the TLS-SNI-01 challenge incident\n[https://community.letsencrypt.org/t/2018-01-09-issue-with-tls-sni-01-and-shared-hosting-infrastructure/49996]\n, some of our users were left with few (yet satisfactory) alternatives. But when \nthey introduced the TLS ALPN Challenge\n[https://community.letsencrypt.org/t/tls-alpn-validation-method/63814], Ludovic\nFernandez [https://github.com/ldez] was pleased to make it available right away\nso the community could once again pick a TLS based challenge.\n\n[acme] \n   # … \n   entryPoint = \"https\" \n   [acme.tlsChallenge] #enables the TLS ALPN Challenge\n\n\nOne of the advantage of TLS based challenges? They only require port 443 to be\nopen.\n\nA Docker Image for Windows\nBecause we didn’t want to let down our Windows user base, Traefik now has its\nofficial Windows Docker image [https://hub.docker.com/_/traefik/]!\n\nThat’s correct: no more tinkering with custom builds, you’ll get your Traefik\ninstance right out of the box on your Windows Server infrastructure.\n\nFor compatibility reasons, our image is currently based on Windows \nnanoserver-sac2016, but rest assured that more recent nano server images are on\ntheir way.\n\nOur thanks go to Stefan Scherer [https://github.com/StefanScherer] who harnessed\nhis expertise to make this happen, and to Damien Duportal\n[https://github.com/dduportal] who fearlessly dove into the subject.\n\nH2C Support\nJulien Salleyron [https://github.com/Juliens] would explain it better than I do,\nbut basically, H2C is a way to do HTTP2 without certificates.\n\n> Wait … why is that useful?\nWell, when you have lots of gRPC services on your infrastructure (that by\ndefault use TLS), not having to handle a certificate for each service is a\nsimplification you will probably welcome.\n\nThis is why Traefik now supports incoming H2C requests, either by upgrading\nHTTP1 connections or dealing with “Prior Knowledge” requests.\n\nYou can also tell Traefik that your backend servers support H2C (using the \ntraefik.protocol=h2c label or the relevant option for your provider), in which\ncase Traefik will send HTTP2 requests (with prior knowledge) to them.\n\nTo make things even better, Traefik accepts both H2C requests and HTTP1 requests\non the same entrypoint (port). No need to separate your workload.\n\nAWS Fargate\nReleased worldwide earlier this year, Amazon has deployed AWS Fargate — a\ncompute engine for Amazon ECS that allows you to run containers without having\nto manage servers or clusters.\n\nAs always, you can count on Traefik to support your favorite cluster technology!\nIn case you decide to run mixed clusters with EC2 and Fargate components,\nTraefik will seamlessly detect them and work with them with no additional\nefforts on your part (since Michael Matur [https://github.com/mmatur] already\ndid the job).\n\nAuth in Frontends\nYou can now configure authentication on the frontend layer, which provides\nfine-grain control on what needs to be secured.\n\nThanks go to Zatte [https://github.com/Zatte] who provided the feature for the\nKubernetes provider (and the idea itself).\n\nExcerpts from the documentation for the file provider:\n\n[frontends.myfrontend.auth]\n   headerField = \"X-WebAuth-User\"\n \n   [frontends.myfrontend.auth.basic] \n      users = [ \"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\",\n                \"test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\",]\n\n\nYou can also check the new authentication options available for the K8S Ingress\nprovider to get a better idea of what’s possible.\n\nSecurity\nTraefik has become a critical component for many, and we want Traefik to be safe\nfor everyone. To help us ensure that, even though these actions are not “per se”\nnew features, we have created a new security mailing list (\nsecurity+subscribe@traefik.io\n[https://groups.google.com/a/traefik.io/forum/#!forum/security]) you can\nsubscribe to. We will use this mailing list in case there is a security issue\nthat requires your attention.\n\nAnother significant step toward making Traefik as safe as possible is the new\nform you can use to report a vulnerability [https://security.traefik.io/] you\nmight discover. By using this form, you will alert us first and give us the\nopportunity to fix a potential problem before it impacts others in a negative\nway.\n\nWe really appreciate your help on this sensitive topic.\n\nAnd Much, Much More…\nDaniel Tomcej [https://github.com/dtomcej] improved the TLS handshake, Andrew\nStucki [https://github.com/andrewstucki] added constraints support on ECS and \nallowed the binding of ECS container port, Michael Arenzon\n[https://github.com/marenzo] added support for stale reads from Consul catalog, \nOndrej Flidr [https://github.com/SniperCZE] tweaked the health check to add\nsupport for 3xx codes, Jesse Haka [https://github.com/zetaab] added HTTP headers\nto the healthcheck, Kim Min [https://github.com/yue9944882] made it possible to\nspecify backend servers’ weight in Kubernetes, Ryarnya\n[https://github.com/ryarnyah] enabled an async option to improve log\nperformances, Rodrigo Díez [https://github.com/rodrigodiez] (for his first PR!)\nadded a duration filter for the logs, Timo Reimann\n[https://github.com/timoreimann] added support for multi-port services in K8s,\nand the list goes on.\n\nOnce again, we improved many things behind the curtain and kept working to make\nTraefik better for everyone. You can check the whole changelog\n[https://github.com/containous/traefik/releases/tag/v1.7.0] to catch a glimpse\nof the awesome work that has been done on this release.\n\n\n--------------------------------------------------------------------------------\n\nBefore You Go: The Future Has Begun!\nEven if the spoiler season has not yet begun, some of our dedicated contributors\nhave noticed — things are brewing in the master branch, things we’ve been\nwilling to do for a long time, things that have been postponed until now and\nthat we’re excited to work on.\n\nYes, for now I agree that this cryptic message won’t help you find out what’s\ncoming next, but we’re sure that you’ve already guessed that the next version\nwill be huge.\n\nWe’ve decided to unlock all the constraints we had with the stable branch and to\nwork on features we couldn’t easily implement because of the current\narchitecture (and because of compatibility reasons). Our goal with the next\nversion is to set everything up so we can welcome an endless panel of new\nfeatures, so we can provide greater flexibility to our users (yes, you’ll soon\nbe able to go even further when defining your routes).\n\nTo this day, we’ve only updated the code base to get rid of the deprecated\nelements, but we’ll soon need to introduce breaking changes to test our ideas.\nWhat matters here is that we want to share our vision with you so we can hear\nyour feedback. These changes will not be final choices; they will be proposals\nput to the trial of the community — features matter only if they match your\nneeds.\n\nWhat does that mean?\nIt means that the master branch will drift apart from the current stable branch\nto become the future branch. However, until the future is now, it will remain in\nconstant evolution and prone to change with little notice.\n\nThis is the reason why we encourage our users and contributors to not use the\nmaster branch for their production system. This is also the reason why, in the\nmeantime, we’ll be pickier with features introduced in the current branch and\noften redirect you to the master branch: so you can also be involved in the big\nnext.\n\n> Traefik is an open source project at its core, and we want to keep it this way —\nthank you for being part of its success!\n\n--------------------------------------------------------------------------------\n\nGrab the latest binaries for Linux, Windows, and Mac on Github or get the\nofficial Docker image!\n\ndocker pull traefik:v1.7.0 (or 1.7.0, v1.7, 1.7, maroilles)\ndocker pull traefik:v1.7.0-alpine (or 1.7.0-alpine, v1.7-alpine, 1.7-alpine, maroilles-alpine)\ndocker pull traefik:1.7-nanoserver\n\n\nThe versioned documentation can be found on https://docs.traefik.io\n[https://docs.traefik.io/].\n\n\n--------------------------------------------------------------------------------\n\nBy the way, if you want to join an incredible team so you can express your every\ntalent: We are hiring! Check our available positions [/careers]!\n\nTraefik adoption rate is astounding! We’ve reached 17k+ stars on Github and \n200M+ downloads!\n\n\n--------------------------------------------------------------------------------\n\nWe would love to hear your feedback on this new release. Join us on GitHub\n[https://github.com/containous/traefik], Twitter [https://twitter.com/traefik] \nor on the Community Forum [https://community.containo.us]!","html":"<figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://containous.ghost.io/content/images/2019/12/image-15.png\" class=\"kg-image\"><figcaption>Traefik <a href=\"https://en.wikipedia.org/wiki/Maroilles_cheese\" rel=\"noopener\">Maroilles</a></figcaption></figure><p>Releases keep rolling! After three months of development and five release candidates, we are proud to announce the release of Traefik <em><em>1.7</em></em>, codename “<a href=\"https://en.wikipedia.org/wiki/Maroilles_cheese\" rel=\"noopener nofollow\"><em><em>maroilles</em></em></a><em><em>”</em></em>.</p><p>We’ve merged <a href=\"https://github.com/containous/traefik/milestone/9?closed=1\" rel=\"noopener nofollow\">more pull requests than ever</a> from our ever-growing community of contributors that has reached more than 300 individuals. Thanks go to every one of you; we are in awe before your enthusiasm at improving Traefik.</p><p>The full changelog is available <a href=\"https://github.com/containous/traefik/releases/tag/v1.7.0\" rel=\"noopener nofollow\">here</a>, but we wanted to highlight our favorite features.</p><h2 id=\"let-s-encrypt-the-new-tls-challenge-in-town\">Let’s Encrypt &amp; The New TLS Challenge in Town</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/letsEncrypt.png\" class=\"kg-image\"></figure><p>Let’s Encrypt integration is one of the most praised features of Traefik, so when Let’s Encrypt faced the <a href=\"https://community.letsencrypt.org/t/2018-01-09-issue-with-tls-sni-01-and-shared-hosting-infrastructure/49996\" rel=\"noopener nofollow\">TLS-SNI-01 challenge incident</a>, some of our users were left with few (yet satisfactory) alternatives. But when <a href=\"https://community.letsencrypt.org/t/tls-alpn-validation-method/63814\" rel=\"noopener nofollow\">they introduced the TLS ALPN Challenge</a>, <a href=\"https://github.com/ldez\" rel=\"noopener nofollow\">Ludovic Fernandez</a> was pleased to make it available right away so the community could once again pick a TLS based challenge.</p><!--kg-card-begin: markdown--><pre><code>[acme] \n   # … \n   entryPoint = &quot;https&quot; \n   [acme.tlsChallenge] #enables the TLS ALPN Challenge\n</code></pre>\n<!--kg-card-end: markdown--><p>One of the advantage of TLS based challenges? They only require port 443 to be open.</p><h2 id=\"a-docker-image-for-windows\">A Docker Image for Windows</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/DockerImageForWindows.png\" class=\"kg-image\"></figure><p>Because we didn’t want to let down our Windows user base, Traefik now has its official <a href=\"https://hub.docker.com/_/traefik/\" rel=\"noopener nofollow\">Windows Docker image</a>!</p><p>That’s correct: no more tinkering with custom builds, you’ll get your Traefik instance right out of the box on your Windows Server infrastructure.</p><p>For compatibility reasons, our image is currently based on Windows <code>nanoserver-sac2016</code>, but rest assured that more recent nano server images are on their way.</p><p>Our thanks go to <a href=\"https://github.com/StefanScherer\" rel=\"noopener nofollow\">Stefan Scherer</a> who harnessed his expertise to make this happen, and to <a href=\"https://github.com/dduportal\" rel=\"noopener nofollow\">Damien Duportal</a> who fearlessly dove into the subject.</p><h2 id=\"h2c-support\">H2C Support</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/HTTP2.png\" class=\"kg-image\"></figure><p><a href=\"https://github.com/Juliens\" rel=\"noopener nofollow\">Julien Salleyron</a> would explain it better than I do, but basically, H2C is a way to do HTTP2 <em><em>without</em></em> certificates.</p><blockquote><em><em>Wait … why is that useful?</em></em></blockquote><p>Well, when you have lots of gRPC services on your infrastructure (that by default use TLS), <em><em>not</em></em> having to handle a certificate for each service is a simplification you will probably welcome.</p><p>This is why Traefik now supports incoming H2C requests, either by upgrading HTTP1 connections or dealing with “Prior Knowledge” requests.</p><p>You can also tell Traefik that your backend servers support H2C (using the <code>traefik.protocol=h2c</code> label or the relevant option for your provider), in which case Traefik will send HTTP2 requests (with prior knowledge) to them.</p><p>To make things even better, Traefik accepts <em><em>both</em></em> H2C requests <em><em>and</em></em> HTTP1 requests on the <em><em>same</em></em> entrypoint (port). No need to separate your workload.</p><h2 id=\"aws-fargate\">AWS Fargate</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/AWSFargate.png\" class=\"kg-image\"></figure><p>Released worldwide earlier this year, Amazon has deployed AWS Fargate — <em><em>a compute engine for Amazon ECS that allows you to run containers without having to manage servers or clusters.</em></em></p><p>As always, you can count on Traefik to support your favorite cluster technology! In case you decide to run mixed clusters with EC2 and Fargate components, Traefik will seamlessly detect them and work with them with no additional efforts on your part (since <a href=\"https://github.com/mmatur\" rel=\"noopener nofollow\">Michael Matur</a> already did the job).</p><h2 id=\"auth-in-frontends\">Auth in Frontends</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/AuthInFrontends.jpeg\" class=\"kg-image\"></figure><p>You can now configure authentication on the frontend layer, which provides fine-grain control on what needs to be secured.</p><p>Thanks go to <a href=\"https://github.com/Zatte\" rel=\"noopener nofollow\">Zatte</a> who provided the feature for the Kubernetes provider (and the idea itself).</p><p>Excerpts from the documentation for the file provider:</p><!--kg-card-begin: markdown--><pre><code>[frontends.myfrontend.auth]\n   headerField = &quot;X-WebAuth-User&quot;\n \n   [frontends.myfrontend.auth.basic] \n      users = [ &quot;test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/&quot;,\n                &quot;test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0&quot;,]\n</code></pre>\n<!--kg-card-end: markdown--><p>You can also check the new authentication options available for the K8S Ingress provider to get a better idea of what’s possible.</p><h2 id=\"security\">Security</h2><p>Traefik has become a critical component for many, and we want Traefik to be safe for everyone. To help us ensure that, even though these actions are not “per se” new features, we have created a new security mailing list (<a href=\"https://groups.google.com/a/traefik.io/forum/#!forum/security\" rel=\"noopener nofollow\">security+subscribe@traefik.io</a>) you can subscribe to. We will use this mailing list in case there is a security issue that requires your attention.</p><p>Another significant step toward making Traefik as safe as possible is the new form you can use to <a href=\"https://security.traefik.io/\" rel=\"noopener nofollow\">report a vulnerability</a> you might discover. By using this form, you will alert us first and give us the opportunity to fix a potential problem before it impacts others in a negative way.</p><p>We really appreciate your help on this sensitive topic.</p><h2 id=\"and-much-much-more-\">And Much, Much More…</h2><p><a href=\"https://github.com/dtomcej\" rel=\"noopener nofollow\">Daniel Tomcej</a> improved the TLS handshake, <a href=\"https://github.com/andrewstucki\" rel=\"noopener nofollow\">Andrew Stucki</a> added constraints support on ECS <em><em>and</em></em> allowed the binding of ECS container port, <a href=\"https://github.com/marenzo\" rel=\"noopener nofollow\">Michael Arenzon</a> added support for stale reads from Consul catalog, <a href=\"https://github.com/SniperCZE\" rel=\"noopener nofollow\">Ondrej Flidr</a> tweaked the health check to add support for 3xx codes, <a href=\"https://github.com/zetaab\" rel=\"noopener nofollow\">Jesse Haka</a> added HTTP headers to the healthcheck, <a href=\"https://github.com/yue9944882\" rel=\"noopener nofollow\">Kim Min</a> made it possible to specify backend servers’ weight in Kubernetes, <a href=\"https://github.com/ryarnyah\" rel=\"noopener nofollow\">Ryarnya</a> enabled an async option to improve log performances, <a href=\"https://github.com/rodrigodiez\" rel=\"noopener nofollow\">Rodrigo Díez</a> (for his first PR!) added a duration filter for the logs, <a href=\"https://github.com/timoreimann\" rel=\"noopener nofollow\">Timo Reimann</a> added support for multi-port services in K8s, and the list goes on.</p><p>Once again, we improved many things behind the curtain and kept working to make Traefik better for everyone. You can check the whole <a href=\"https://github.com/containous/traefik/releases/tag/v1.7.0\" rel=\"noopener nofollow\">changelog</a> to catch a glimpse of the awesome work that has been done on this release.</p><hr><h2 id=\"before-you-go-the-future-has-begun-\">Before You Go: The Future Has Begun!</h2><p>Even if the spoiler season has not yet begun, some of our dedicated contributors have noticed — <em><em>things</em></em> are brewing in the master branch, <em><em>things</em></em> we’ve been willing to do for a long time, <em><em>things</em></em> that have been postponed until now and that we’re excited to work on.</p><p>Yes, for now I agree that this cryptic message won’t help you find out what’s coming next, but we’re sure that you’ve already guessed that the next version will be huge.</p><p>We’ve decided to unlock all the constraints we had with the stable branch and to work on features we couldn’t easily implement because of the current architecture (and because of compatibility reasons). Our goal with the next version is to set everything up so we can welcome an endless panel of new features, so we can provide greater flexibility to our users (yes, you’ll soon be able to go even further when defining your routes).</p><p>To this day, we’ve only updated the code base to get rid of the deprecated elements, but we’ll soon need to introduce breaking changes to test our ideas. What matters here is that we want to share our vision with you so we can hear your feedback. These changes will not be final choices; they will be proposals put to the trial of the community — features matter only if they match your needs.</p><h3 id=\"what-does-that-mean\">What does that mean?</h3><p>It means that the master branch will drift apart from the current stable branch to become the <em><em>future</em></em> branch. However, until the <em><em>future</em></em> is now, it will remain in constant evolution and prone to change with little notice.</p><p>This is the reason why we encourage our users and contributors to <em><em>not</em></em> use the master branch for their production system. This is also the reason why, in the meantime, we’ll be pickier with features introduced in the current branch and often redirect you to the master branch: so you can also be involved in the <em><em>big next</em></em>.</p><blockquote><em><em>Traefik is an open source project at its core, and we want to keep it this way — thank you for being part of its success!</em></em></blockquote><hr><p>Grab the latest binaries for Linux, Windows, and Mac on Github or get the official Docker image!</p><!--kg-card-begin: markdown--><pre><code>docker pull traefik:v1.7.0 (or 1.7.0, v1.7, 1.7, maroilles)\ndocker pull traefik:v1.7.0-alpine (or 1.7.0-alpine, v1.7-alpine, 1.7-alpine, maroilles-alpine)\ndocker pull traefik:1.7-nanoserver\n</code></pre>\n<!--kg-card-end: markdown--><p>The <em><em>versioned</em></em> documentation can be found on <a href=\"https://docs.traefik.io/\" rel=\"noopener nofollow\">https://docs.traefik.io</a>.</p><hr><p>By the way, if you want to join an incredible team so you can express your every talent:<strong><strong> We are hiring! </strong></strong>Check <a href=\"https://containous.ghost.io/careers\" rel=\"noopener nofollow\">our available positions</a>!</p><p>Traefik adoption rate is astounding! We’ve reached <strong><strong>17k+ stars</strong></strong> on Github and <strong><strong>200M+ downloads</strong></strong>!</p><hr><p>We would love to hear your feedback on this new release. Join us on <a href=\"https://github.com/containous/traefik\" rel=\"noopener nofollow\">GitHub</a>, <a href=\"https://twitter.com/traefik\" rel=\"noopener nofollow\">Twitter</a> or on the <a href=\"https://community.containo.us\">Community Forum</a>!</p>","url":"https://containous.ghost.io/blog/traefik-1-7-yet-another-slice-of-awesomeness-2a9c99737889/","canonical_url":null,"uuid":"aa619476-2180-482f-8a05-08eb3c1515f3","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dcdb7431127150038885858","reading_time":6}},{"node":{"id":"Ghost__Post__5dd7ee5df1db6f0038c7449a","title":"Traefik 1.6 — Get Our Latest tetedemoine!","slug":"traefik-1-6-get-our-latest-tetedemoine-1859164bf521","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/12/monkshead.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/3e8dd3b9ae78318437039481a8ed57fb/f3583/monkshead.png","srcSet":"/static/3e8dd3b9ae78318437039481a8ed57fb/630fb/monkshead.png 300w,\n/static/3e8dd3b9ae78318437039481a8ed57fb/2a4de/monkshead.png 600w,\n/static/3e8dd3b9ae78318437039481a8ed57fb/f3583/monkshead.png 1200w,\n/static/3e8dd3b9ae78318437039481a8ed57fb/bbee5/monkshead.png 1800w,\n/static/3e8dd3b9ae78318437039481a8ed57fb/7b560/monkshead.png 1931w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"After 3 months of development, we are thrilled to announce the fresh new release of Traefik: 1.6, codename “tetedemoine”.\n\nWe merged 168 pull requests from...","custom_excerpt":"After 3 months of development, we are thrilled to announce the fresh new release of Traefik: 1.6, codename “tetedemoine”.\n\nWe merged 168 pull requests from...","visibility":"public","created_at_pretty":"22 November, 2019","published_at_pretty":"May 7, 2018","updated_at_pretty":"21 May, 2020","created_at":"2019-11-22T14:19:09.000+00:00","published_at":"2018-05-07T14:18:00.000+00:00","updated_at":"2020-05-21T21:53:58.000+00:00","meta_title":"Traefik 1.6 — Get Our Latest tetedemoine!","meta_description":"After 3 months of development, we are thrilled to announce the fresh new release of Traefik: 1.6, codename “tetedemoine”.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Emile Vauge","slug":"emile","bio":null,"profile_image":"//www.gravatar.com/avatar/68e7fb947bb29dffbd46ac8aae45b6de?s=250&d=mm&r=x","twitter":"@emilevauge","facebook":null,"website":null}],"primary_author":{"name":"Emile Vauge","slug":"emile","bio":null,"profile_image":"//www.gravatar.com/avatar/68e7fb947bb29dffbd46ac8aae45b6de?s=250&d=mm&r=x","twitter":"@emilevauge","facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Monk’s head [https://en.wikipedia.org/wiki/T%C3%AAte_de_Moine]After 3 months of\ndevelopment, we are thrilled to announce the fresh new release of Traefik: 1.6,\ncodename “tetedemoine”.\n\nWe merged 168 pull requests from more than 43 contributors! A huge thanks goes\nout to each of you who helped on this new version 😘.\n\nThe full changelog can be found here\n[https://github.com/containous/traefik/releases/tag/v1.6.0] but here are some\nnew features we want to highlight:\n\nLet’s Encrypt Wildcard Certificates\nThis was a long-awaited feature; we are proud to announce that we officially\nsupport Let’s Encrypt wildcard certificates generation, thanks to Nicolas Mengin\n[https://github.com/nmengin] (and thanks to xenolf [https://github.com/xenolf] \nto the initial ACMEv2 support in lego [https://github.com/xenolf/lego]). This\ngreatly simplifies certificate management as it avoids generating multiple\nsub-domains certificates. Now, it’s possible to generate root domain\ncertificates, which will work for every sub-domain.\n\nNote: ACME wildcard certificates can only be generated thanks to a DNS-01 \nchallenge:\n\n[acme]\n# ...\n[[acme.domains]]\n  main = \"*.local1.com\"\n  sans = [\"local1.com\"]\n[[acme.domains]]\n  main = \"*.local2.com\"\n# ...\n\nNo more Let’s Encrypt rate limits [https://letsencrypt.org/docs/rate-limits/] :)\n\nOpen Tracing & Zipkin support\nIn microservice architectures, being able to reconstruct the elaborate journeys\nthat transactions take as they propagate across a distributed system has become\na minimum requirement for effective monitoring.\n\n> OpenTracing allows developers of application code, OSS packages, and OSS\nservices to instrument their own code without binding to any particular tracing\nvendor.\nWe received a wonderful gift from Tristan Colgate-McFarlane\n[https://github.com/tcolgate] (with the help of Michaël Matur\n[https://github.com/containous/traefik/pull/2587]) who implemented Open Tracing\nsupport, right into Traefik. Have a look at the documentation\n[https://docs.traefik.io/v1.6/configuration/tracing/] to get more details.\n\nNew Web UI\nJan Kuri [https://github.com/jkuri] & Ludovic Fernandez\n[https://github.com/ldez] revamped our web UI, and we love how shiny it is.\nAmazing job!\n\nTLS Certificates in Kubernetes Secrets\nAnother awaited feature, gopenguin [https://github.com/gopenguin] added\nKubernetes Secrets support for fetching TLS certificates. This enables Traefik\nto read the Kubernetes secret defined in an ingress resource via the\n[https://docs.traefik.io/v1.6/user-guide/kubernetes/#add-a-tls-certificate-to-the-ingress]\ntls\n[https://docs.traefik.io/v1.6/user-guide/kubernetes/#add-a-tls-certificate-to-the-ingress] \nproperty\n[https://docs.traefik.io/v1.6/user-guide/kubernetes/#add-a-tls-certificate-to-the-ingress]\n:\n\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: traefik-web-ui\n  namespace: kube-system\n  annotations:\n    kubernetes.io/ingress.class: traefik\nspec:\n  rules:\n  - host: traefik-ui.minikube\n    http:\n      paths:\n      - backend:\n          serviceName: traefik-web-ui\n          servicePort: 80\n  tls:\n   - secretName: traefik-ui-tls-cert\n\nAccess Logs Filtering\nWith the GDPR [https://en.wikipedia.org/wiki/General_Data_Protection_Regulation] \nbecoming real in EU, logging and storage of (potentially) personally\nidentifiable information now need to be reduced in many organizations.\n\nAfter a public proposal [https://github.com/containous/traefik/issues/2875], \nMichaël Matur [https://github.com/containous/traefik/pull/2587] implemented a\nway to filter the content of access logs based on simple rules. Your can now \nkeep, dropor redactfields and headers from your access logs. Take a look at our\ndocumentation [https://docs.traefik.io/v1.6/configuration/logs/#access-logs] to\nget a deeper insight.\n\nLabels Homogenization\nProbably one of the biggest refactoring of all time on Traefik, Ludovic\nFernandez [https://github.com/ldez] changed the way we manage labels internally,\nin order to homogenize labels on all providers. We now support all labels on all\nproviders, no more specific code on this part 🎉\n\nThis will make it a lot easier to maintain, and we will be able to ship new\nfeatures faster on all providers.\n\n\n--------------------------------------------------------------------------------\n\nBut that’s not all, check the whole changelog\n[https://github.com/containous/traefik/releases/tag/v1.6.0] to get an idea of\nthe awesome work that has been done on this release. Lots of bugs have been\nfixed and we also have been working on background refactoring tasks that will\nhelp us improving Traefik in future releases.\n\n\n--------------------------------------------------------------------------------\n\nGrab the latest binary for Linux, Windows, Mac on Github or get the official\nDocker image!\n\ndocker pull traefik:v1.6.0 (or 1.6.0, v1.6, 1.6, tetedemoine)\ndocker pull traefik:v1.6.0-alpine (or 1.6.0-alpine, v1.6-alpine, 1.6-alpine, tetedemoine-alpine)\n\nThe versioned documentation can be found on https://docs.traefik.io\n[https://docs.traefik.io/].\n\n\n--------------------------------------------------------------------------------\n\nWe are hiring developers and evangelists, try to solve our\npuzzle:containo.us/#jobs !\n\nTraefik is still growing fast, we almost passed 15k stars on Github and 90M\ndownloads!\n\n\n--------------------------------------------------------------------------------\n\nWe would love to hear your feedback on this new release. Join us on GitHub\n[https://github.com/containous/traefik], Twitter\n[https://twitter.com/traefikproxy] or on the Community Forum\n[https://community.containo.us]!","html":"<figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/3862/1*FA-ZxO_2HjFO9sJpBE1SEw.png\" class=\"kg-image\"><figcaption><a href=\"https://en.wikipedia.org/wiki/T%C3%AAte_de_Moine\" class=\"bf cn hz ia ib ic\" target=\"_blank\" rel=\"noopener\" style=\"box-sizing: inherit; color: inherit; text-decoration: none; -webkit-tap-highlight-color: transparent; background-repeat: repeat-x; background-image: url(&quot;data:image/svg+xml;utf8,<svg preserveAspectRatio=\\&quot;none\\&quot; viewBox=\\&quot;0 0 1 1\\&quot; xmlns=\\&quot;http://www.w3.org/2000/svg\\&quot;><line x1=\\&quot;0\\&quot; y1=\\&quot;0\\&quot; x2=\\&quot;1\\&quot; y2=\\&quot;1\\&quot; stroke=\\&quot;rgba(0, 0, 0, 0.84)\\&quot; /></svg>&quot;); background-size: 1px 1px; background-position: 0px calc(1em + 1px);\">Monk’s head</a></figcaption></figure><p>After 3 months of development, we are thrilled to announce the fresh new release of Traefik: <em><em>1.6</em></em>, codename “<em><em>tetedemoine”</em></em>.</p><p>We merged 168 pull requests from more than 43 contributors! A huge thanks goes out to each of you who helped on this new version 😘.</p><p>The full changelog can be found <a href=\"https://github.com/containous/traefik/releases/tag/v1.6.0\" rel=\"noopener\">here</a> but here are some new features we want to highlight:</p><h2 id=\"let-s-encrypt-wildcard-certificates\">Let’s Encrypt Wildcard Certificates</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-60.png\" class=\"kg-image\"></figure><p>This was a long-awaited feature; we are proud to announce that we officially support Let’s Encrypt wildcard certificates generation, thanks to <a href=\"https://github.com/nmengin\" rel=\"noopener\">Nicolas Mengin</a> (and thanks to <a href=\"https://github.com/xenolf\" rel=\"noopener\">xenolf</a> to the initial ACMEv2 support in <a href=\"https://github.com/xenolf/lego\" rel=\"noopener\">lego</a>). This greatly simplifies certificate management as it avoids generating multiple sub-domains certificates. Now, it’s possible to generate root domain certificates, which will work for every sub-domain.</p><p>Note: ACME wildcard certificates can only be generated thanks to a <code>DNS-01</code> challenge:</p><pre><code class=\"language-toml\">[acme]\n# ...\n[[acme.domains]]\n  main = \"*.local1.com\"\n  sans = [\"local1.com\"]\n[[acme.domains]]\n  main = \"*.local2.com\"\n# ...</code></pre><p>No more <a href=\"https://letsencrypt.org/docs/rate-limits/\" rel=\"noopener\">Let’s Encrypt rate limits</a> :)</p><h2 id=\"open-tracing-zipkin-support\">Open Tracing &amp; Zipkin support</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-61.png\" class=\"kg-image\"></figure><p>In microservice architectures, being able to reconstruct the elaborate journeys that transactions take as they propagate across a distributed system has become a minimum requirement for effective monitoring.</p><blockquote><em><em>OpenTracing allows developers of application code, OSS packages, and OSS services to instrument their own code without binding to any particular tracing vendor.</em></em></blockquote><p>We received a wonderful gift from <a href=\"https://github.com/tcolgate\" rel=\"noopener\">Tristan Colgate-McFarlane</a> (with the help of <a href=\"https://github.com/containous/traefik/pull/2587\" rel=\"noopener\">Michaël Matur</a>) who implemented Open Tracing support, right into Traefik. Have a look at the <a href=\"https://docs.traefik.io/v1.6/configuration/tracing/\" rel=\"noopener\">documentation</a> to get more details.</p><h2 id=\"new-web-ui\">New Web UI</h2><p><a href=\"https://github.com/jkuri\" rel=\"noopener\">Jan Kuri</a> &amp; <a href=\"https://github.com/ldez\" rel=\"noopener\">Ludovic Fernandez</a> revamped our web UI, and we love how shiny it is. Amazing job!</p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-62.png\" class=\"kg-image\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-63.png\" class=\"kg-image\"></figure><h2 id=\"tls-certificates-in-kubernetes-secrets\">TLS Certificates in Kubernetes Secrets</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-64.png\" class=\"kg-image\"></figure><p>Another awaited feature, <a href=\"https://github.com/gopenguin\" rel=\"noopener\">gopenguin</a> added Kubernetes Secrets support for fetching TLS certificates. This enables Traefik to read the Kubernetes secret defined in an ingress resource <a href=\"https://docs.traefik.io/v1.6/user-guide/kubernetes/#add-a-tls-certificate-to-the-ingress\" rel=\"noopener\">via the </a><code><a href=\"https://docs.traefik.io/v1.6/user-guide/kubernetes/#add-a-tls-certificate-to-the-ingress\" rel=\"noopener\">tls</a></code><a href=\"https://docs.traefik.io/v1.6/user-guide/kubernetes/#add-a-tls-certificate-to-the-ingress\" rel=\"noopener\"> property</a>:</p><pre><code class=\"language-yaml\">apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: traefik-web-ui\n  namespace: kube-system\n  annotations:\n    kubernetes.io/ingress.class: traefik\nspec:\n  rules:\n  - host: traefik-ui.minikube\n    http:\n      paths:\n      - backend:\n          serviceName: traefik-web-ui\n          servicePort: 80\n  tls:\n   - secretName: traefik-ui-tls-cert</code></pre><h2 id=\"access-logs-filtering\">Access Logs Filtering</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-65.png\" class=\"kg-image\"></figure><p>With the <a href=\"https://en.wikipedia.org/wiki/General_Data_Protection_Regulation\" rel=\"noopener\">GDPR</a> becoming real in EU, logging and storage of (potentially) personally identifiable information now need to be reduced in many organizations.</p><p>After a <a href=\"https://github.com/containous/traefik/issues/2875\" rel=\"noopener\">public proposal</a>, <a href=\"https://github.com/containous/traefik/pull/2587\" rel=\"noopener\">Michaël Matur</a> implemented a way to filter the content of access logs based on simple rules. Your can now <code>keep</code>, <code>drop</code>or <code>redact</code>fields and headers from your access logs. Take a look at <a href=\"https://docs.traefik.io/v1.6/configuration/logs/#access-logs\" rel=\"noopener\">our documentation</a> to get a deeper insight.</p><h2 id=\"labels-homogenization\">Labels Homogenization</h2><p>Probably one of the biggest refactoring of all time on Traefik, <a href=\"https://github.com/ldez\" rel=\"noopener\">Ludovic Fernandez</a> changed the way we manage labels internally, in order to homogenize labels on all providers. We now support all labels on all providers, no more specific code on this part 🎉</p><p>This will make it a lot easier to maintain, and we will be able to ship new features faster on all providers.</p><hr><p>But that’s not all, check the whole <a href=\"https://github.com/containous/traefik/releases/tag/v1.6.0\" rel=\"noopener\">changelog</a> to get an idea of the awesome work that has been done on this release. Lots of bugs have been fixed and we also have been working on background refactoring tasks that will help us improving Traefik in future releases.</p><hr><p>Grab the latest binary for Linux, Windows, Mac on Github or get the official Docker image!</p><pre><code class=\"language-shell\">docker pull traefik:v1.6.0 (or 1.6.0, v1.6, 1.6, tetedemoine)\ndocker pull traefik:v1.6.0-alpine (or 1.6.0-alpine, v1.6-alpine, 1.6-alpine, tetedemoine-alpine)</code></pre><p>The <em><em>versioned</em></em> documentation can be found on <a href=\"https://docs.traefik.io/\" rel=\"noopener\">https://docs.traefik.io</a>.</p><hr><p><strong><strong>We are hiring developers and evangelists, try to solve our puzzle:containo.us/#jobs !</strong></strong></p><p>Traefik is still growing fast, we almost passed <strong><strong>15k stars</strong></strong> on Github and <strong><strong>90M downloads</strong></strong>!</p><hr><p>We would love to hear your feedback on this new release. Join us on <a href=\"https://github.com/containous/traefik\" rel=\"noopener\">GitHub</a>, <a href=\"https://twitter.com/traefikproxy\" rel=\"noopener\">Twitter</a> or on the <a href=\"https://community.containo.us\">Community Forum</a>!</p>","url":"https://containous.ghost.io/blog/traefik-1-6-get-our-latest-tetedemoine-1859164bf521/","canonical_url":null,"uuid":"a95156a1-e434-48e4-bd39-d023e4798bc2","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dd7ee5df1db6f0038c7449a","reading_time":4}},{"node":{"id":"Ghost__Post__5dd7f42ef1db6f0038c744ed","title":"Traefik 1.5 — Cancoillotte Is Here!","slug":"traefik-1-5-cancoillotte-is-here-7bd6713ae135","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/12/cancoillote.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/cf79dd685af4acffdc3844ff6e794442/f3583/cancoillote.png","srcSet":"/static/cf79dd685af4acffdc3844ff6e794442/630fb/cancoillote.png 300w,\n/static/cf79dd685af4acffdc3844ff6e794442/2a4de/cancoillote.png 600w,\n/static/cf79dd685af4acffdc3844ff6e794442/f3583/cancoillote.png 1200w,\n/static/cf79dd685af4acffdc3844ff6e794442/60daf/cancoillote.png 1665w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"After 3 months of development, we are thrilled to announce the fresh new release of Traefik: 1.5, codename cancoillotte.\nWe merged 175 pull requests from...","custom_excerpt":"After 3 months of development, we are thrilled to announce the fresh new release of Traefik: 1.5, codename cancoillotte.\nWe merged 175 pull requests from...","visibility":"public","created_at_pretty":"22 November, 2019","published_at_pretty":"January 24, 2018","updated_at_pretty":"22 May, 2020","created_at":"2019-11-22T14:43:58.000+00:00","published_at":"2018-01-24T14:40:00.000+00:00","updated_at":"2020-05-22T00:35:30.000+00:00","meta_title":"Traefik 1.5 — Cancoillotte Is Here!","meta_description":"After 3 months of development, we are thrilled to announce the fresh new release of Traefik: 1.5, codename cancoillotte.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Emile Vauge","slug":"emile","bio":null,"profile_image":"//www.gravatar.com/avatar/68e7fb947bb29dffbd46ac8aae45b6de?s=250&d=mm&r=x","twitter":"@emilevauge","facebook":null,"website":null}],"primary_author":{"name":"Emile Vauge","slug":"emile","bio":null,"profile_image":"//www.gravatar.com/avatar/68e7fb947bb29dffbd46ac8aae45b6de?s=250&d=mm&r=x","twitter":"@emilevauge","facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Try to pronounce it right [https://www.youtube.com/watch?v=kOnUeb1Ck-8] ;)After\n3 months of development, we are thrilled to announce the fresh new release of\nTraefik: 1.5, codename cancoillotte [https://en.wikipedia.org/wiki/Cancoillotte]\n.\n\nWe merged 175 pull requests from more than 67 contributors ! Huge thanks goes to\nall of you who helped on this new version 😘.\n\nThe full changelog can be found here\n[https://github.com/containous/traefik/releases/tag/v1.5.0] but here are some\nnew features we want to highlight:\n\nLet’s Encrypt HTTP Challenge\nOn January the 9th, a little surprise appeared on our Twitter timeline:\n\n2018.01.09 Issue with TLS-SNI-01 and Shared Hosting Infrastructure[Update\n2018-01-18: The most up-to-date summary is at IMPORTANT: What you need to know\nabout TLS-SNI validation issues] At approximately 5 p.m. Pacific time on\nJanuary\n9, 2018, we received a report from Frans Rosén of Detectify outlining a method\nof exploiting some shared hosting infrastructures to…joshLet's Encrypt\nCommunity\nSupport\n[https://community.letsencrypt.org/t/2018-01-09-issue-with-tls-sni-01-and-shared-hosting-infrastructure/49996?source=post_page-----7bd6713ae135----------------------]\nAnd then:\n\n2018.01.11 Update Regarding ACME TLS-SNI and Shared Hosting Infrastructure\n[Update 2018-01-18: The most up-to-date summary is at IMPORTANT: What you need\nto know about TLS-SNI validation issues] Please see this post for background\ninformation. The last 48 hours have been a busy time for Let’s Encrypt staff.\nWe’ve been working hard to come up with a plan for ACME TLS-SNI …joshLet's\nEncrypt Community Support\n[https://community.letsencrypt.org/t/2018-01-11-update-regarding-acme-tls-sni-and-shared-hosting-infrastructure/50188?source=post_page-----7bd6713ae135----------------------]\nTL;DR: Let’s Encrypt permanently disabled TLS-SNI-0x challenge due to a\nvulnerability.\n\nAnd yes, Traefik was using TLS-SNI-01 challenge by default. Ouch…\n\nEven though we were at the end of a release cycle (1.5.0-rc4 was already out),\nwe decided to push a new release candidate in emergency to add HTTP-01 challenge\nsupport. This fix was big enough to end in the new 1.5 and not as a bug fix on \n1.4 branch. Users will need to enable it with the new acme.httpChallenge \nsection.\n\nStats Collection\nFew months ago, we created a proposal\n[https://github.com/containous/traefik/issues/2369] in which we came up with the\nidea of collecting stats from running Traefik instances:\n\n> As you may know, the Traefik core development team is quite small and as with a\nlot of open source projects, we lack time and resources. As a consequence, we\nhave to carefully choose which tasks and features need our attention. As a\nresult, we usually invest our time on features needed or requested by most of\nthe community. In order to efficiently do this, we have to know how our\ncommunity uses Traefik.\nAs this is a super sensitive topic, we preferred to open a public debate, and\nbuild a transparent and trusted solution with the community. We are excited to\nsay that we quickly reached a consensus, and Ludovic Fernandez\n[https://github.com/ldez] successfully implemented a safe configuration export\nmechanism.\n\nWe chose to make it opt-in, which means that no data will be sent without\nenabling this feature. If enabled, only anonymous configuration options will be\nsent to a collecting server.\n\nWe really hope that all of our efforts will pay off, and that you will help us\nimprove Traefik enabling this feature in your infrastructure:\n\nsendAnonymousUsage = true\n\nWe invite you to read the constructive discussion\n[https://github.com/containous/traefik/issues/2369] that led to this new feature\nand the documentation to get more details. Many thanks to the community for its\npositive feedback!\n\nDynamic TLS Certificates\nNicolas Mengin [https://github.com/nmengin] did a great job at making TLS\ncertificates management dynamic. You can now add or remove TLS certificates\nwhile Traefik is started! In addition to backends and frontends, there is now a\ndedicated tls section in the dynamic configuration. Let’s declare two new\ncertificates using the file provider, you can now add a new tls section in your\nTOML:\n\n[frontends]\n...\n[backends]\n...\n\n# HTTPS certificates\n[[tls]]\n  entryPoints = [\"https\"]\n  [tls.certificate]\n    certFile = \"path/to/my.cert\"\n    keyFile = \"path/to/my.key\"\n\n[[tls]]\n  entryPoints = [\"https\"]\n  [tls.certificate]\n  certFile = \"path/to/my/other.cert\"\n  keyFile = \"path/to/my/other.key\"\n\nEach change of this file will make Traefik reload its TLS certificates. You can\nalso split your configuration into multiple files if you prefer.\n\nRate Limiting\nWe received a wonderful gift from Ben Parli [https://github.com/bparli] who\nadded rate limiting by frontend. You can even add multiple sets of rates to each\nfrontend. Here is an example taken from the documentation\n[https://docs.traefik.io/]:\n\n[frontends]\n    [frontends.frontend1]\n    entrypoints = [\"http\"]\n    backend = \"backend1\"\n        [frontends.frontend1.routes.test_1]\n        rule = \"Path:/\"\n    [frontends.frontend1.ratelimit]\n    extractorfunc = \"client.ip\"\n        [frontends.frontend1.ratelimit.rateset.rateset1]\n        period = \"10s\"\n        average = 100\n        burst = 200\n        [frontends.frontend1.ratelimit.rateset.rateset2]\n        period = \"3s\"\n        average = 5\n        burst = 10\n\n> In the above example, frontend1 is configured to limit requests by the client’s\nip address. An average of 5 requests every 3 seconds is allowed and an average\nof 100 requests every 10 seconds. These can “burst” up to 10 and 200 in each\nperiod respectively.\nAzure Service Fabric Support\nLawrence Gripper [https://github.com/lawrencegripper] and Joni Collinge\n[https://github.com/jjcollinge] from Microsoft made a great contribution (with\nthe help of Ludovic Fernandez [https://github.com/ldez]) adding Azure Service\nFabric [https://azure.microsoft.com/en-us/services/service-fabric/] support to\nTraefik.\n\n> Azure Service Fabric is a distributed systems platform that makes it easy to\npackage, deploy, and manage scalable and reliable microservices and containers.\nThis new provider uses labels to configure how services are exposed through\nTraefik using the services ServiceManifest.xml file.\n\nHave a look at the documentation [https://docs.traefik.io/], we will give more\nupdate on this soon!\n\nIn A Nutshell\nDaniel Tomcej [https://github.com/dtomcej] added Kubernetes annotations and\nDocker labels for security headers, Nicolas Mengin [https://github.com/nmengin] \nadded support to etcd v3, our great Manuel Zapf [https://github.com/SantoDE] \nimplemented the redirection to another entryPoint per frontend.\nThanks to Aditya C S [https://github.com/adityacs], Traefik can now export its\nmetrics to InfluxDB. Michael Matur [https://github.com/mmatur] and Ludovic\nFernandez [https://github.com/ldez] did a great job adding multi-versioning to\nour documentation [https://docs.traefik.io/]. Julien Salleyron\n[https://github.com/juliens] refactored the web provider into API/Dashboard,\nping, metric and Rest Provider.\n\nBut that’s not all, check the whole changelog\n[https://github.com/containous/traefik/releases/tag/v1.5.0] to get an idea of\nthe awesome work that has been done on this release. Lots of bugs have been\nfixed and we also have been working on background refactoring tasks that will\nhelp us improving Traefik in future releases.\n\n\n--------------------------------------------------------------------------------\n\nGrab the latest binary for Linux, Windows, Mac on Github or get the official\nDocker image!\n\ndocker pull traefik:v1.5.0 (or 1.5.0, v1.5, 1.5, cancoillotte)\ndocker pull traefik:v1.5.0-alpine (or 1.5.0-alpine, v1.5-alpine, 1.5-alpine, cancoillotte-alpine)\n\nThe versioned documentation can be found on https://docs.traefik.io\n[https://docs.traefik.io/].\n\n\n--------------------------------------------------------------------------------\n\nWe are hiring developers and evangelists, try to solve our puzzle:\ncontaino.us/#jobs !\n\nTraefik is still growing fast, we just passed 12k stars on Github and 42M\ndownloads!\n\n\n--------------------------------------------------------------------------------\n\nWe would love to hear your feedback on this new release. Join us on GitHub\n[https://github.com/containous/traefik], Twitter\n[https://twitter.com/traefikproxy] or on the Community Forum\n[https://community.containo.us]!","html":"<figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/3330/1*bLR_qbi3qufT5w0EWxVGrg.png\" class=\"kg-image\"><figcaption>Try to <a href=\"https://www.youtube.com/watch?v=kOnUeb1Ck-8\" class=\"bf cn hz ia ib ic\" target=\"_blank\" rel=\"noopener\" style=\"box-sizing: inherit; color: inherit; text-decoration: none; -webkit-tap-highlight-color: transparent; background-repeat: repeat-x; background-image: url(&quot;data:image/svg+xml;utf8,<svg preserveAspectRatio=\\&quot;none\\&quot; viewBox=\\&quot;0 0 1 1\\&quot; xmlns=\\&quot;http://www.w3.org/2000/svg\\&quot;><line x1=\\&quot;0\\&quot; y1=\\&quot;0\\&quot; x2=\\&quot;1\\&quot; y2=\\&quot;1\\&quot; stroke=\\&quot;rgba(0, 0, 0, 0.84)\\&quot; /></svg>&quot;); background-size: 1px 1px; background-position: 0px calc(1em + 1px);\">pronounce it right</a> ;)</figcaption></figure><p>After 3 months of development, we are thrilled to announce the fresh new release of Traefik: <em><em>1.5</em></em>, codename <a href=\"https://en.wikipedia.org/wiki/Cancoillotte\" rel=\"noopener\"><em><em>cancoillotte</em></em></a>.</p><p>We merged 175 pull requests from more than 67 contributors ! Huge thanks goes to all of you who helped on this new version 😘.</p><p>The full changelog can be found <a href=\"https://github.com/containous/traefik/releases/tag/v1.5.0\" rel=\"noopener\">here</a> but here are some new features we want to highlight:</p><h2 id=\"let-s-encrypt-http-challenge\">Let’s Encrypt HTTP Challenge</h2><p>On January the 9th, a little surprise appeared on our Twitter timeline:</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://community.letsencrypt.org/t/2018-01-09-issue-with-tls-sni-01-and-shared-hosting-infrastructure/49996?source=post_page-----7bd6713ae135----------------------\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">2018.01.09 Issue with TLS-SNI-01 and Shared Hosting Infrastructure</div><div class=\"kg-bookmark-description\">[Update 2018-01-18: The most up-to-date summary is at IMPORTANT: What you need to know about TLS-SNI validation issues] At approximately 5 p.m. Pacific time on January 9, 2018, we received a report from Frans Rosén of Detectify outlining a method of exploiting some shared hosting infrastructures to…</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://aws1.discourse-cdn.com/letsencrypt/optimized/3X/c/a/ca6c06ea1ea201324bba7048c6841ce60236468d_2_180x180.png\"><span class=\"kg-bookmark-author\">josh</span><span class=\"kg-bookmark-publisher\">Let's Encrypt Community Support</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://aws1.discourse-cdn.com/letsencrypt/original/3X/4/c/4c5760509a18adfc3bc657ba8bd49b301faaa66b.png\"></div></a></figure><p>And then:</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://community.letsencrypt.org/t/2018-01-11-update-regarding-acme-tls-sni-and-shared-hosting-infrastructure/50188?source=post_page-----7bd6713ae135----------------------\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">2018.01.11 Update Regarding ACME TLS-SNI and Shared Hosting Infrastructure</div><div class=\"kg-bookmark-description\">[Update 2018-01-18: The most up-to-date summary is at IMPORTANT: What you need to know about TLS-SNI validation issues] Please see this post for background information. The last 48 hours have been a busy time for Let’s Encrypt staff. We’ve been working hard to come up with a plan for ACME TLS-SNI …</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://aws1.discourse-cdn.com/letsencrypt/optimized/3X/c/a/ca6c06ea1ea201324bba7048c6841ce60236468d_2_180x180.png\"><span class=\"kg-bookmark-author\">josh</span><span class=\"kg-bookmark-publisher\">Let's Encrypt Community Support</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://aws1.discourse-cdn.com/letsencrypt/original/3X/4/c/4c5760509a18adfc3bc657ba8bd49b301faaa66b.png\"></div></a></figure><p><strong><strong>TL;DR</strong></strong>: Let’s Encrypt permanently disabled <code>TLS-SNI-0x</code> challenge due to a vulnerability.</p><p>And yes, Traefik was using <code>TLS-SNI-01</code> challenge by default. Ouch…</p><p>Even though we were at the end of a release cycle (<em><em>1.5.0-rc4</em></em> was already out), we decided to push a new release candidate in emergency to add <code>HTTP-01</code> challenge support. This fix was big enough to end in the new <em><em>1.5</em></em> and not as a bug fix on <em><em>1.4</em></em> branch. Users will need to enable it with the new <code>acme.httpChallenge</code> section.</p><h2 id=\"stats-collection\">Stats Collection</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-68.png\" class=\"kg-image\"></figure><p>Few months ago, we created <a href=\"https://github.com/containous/traefik/issues/2369\" rel=\"noopener\">a proposal</a> in which we came up with the idea of collecting stats from running Traefik instances:</p><blockquote><em><em>As you may know, the Traefik core development team is quite small and as with a lot of open source projects, we lack time and resources. As a consequence, we have to carefully choose which tasks and features need our attention. As a result, we usually invest our time on features needed or requested by most of the community. In order to efficiently do this, we have to know how our community uses Traefik.</em></em></blockquote><p>As this is a super sensitive topic, we preferred to open a public debate, and build a transparent and trusted solution with the community. We are excited to say that we quickly reached a consensus, and <a href=\"https://github.com/ldez\" rel=\"noopener\">Ludovic Fernandez</a> successfully implemented a safe configuration export mechanism.</p><p><strong><strong>We chose to make it opt-in</strong></strong>, which means that no data will be sent without enabling this feature. If enabled, <strong><strong>only anonymous configuration</strong></strong> options will be sent to a collecting server.</p><p>We really hope that all of our efforts will pay off, and that you will <strong><strong>help us improve Traefik enabling this feature</strong></strong> in your infrastructure:</p><pre><code>sendAnonymousUsage = true</code></pre><p><em><em>We invite you to read </em></em><a href=\"https://github.com/containous/traefik/issues/2369\" rel=\"noopener\"><em><em>the constructive discussion</em></em></a><em><em> that led to this new feature and the documentation to get more details. Many thanks to the community for its positive feedback!</em></em></p><h2 id=\"dynamic-tls-certificates\">Dynamic TLS Certificates</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-69.png\" class=\"kg-image\"></figure><p><a href=\"https://github.com/nmengin\" rel=\"noopener\">Nicolas Mengin</a> did a great job at making TLS certificates management dynamic. You can now add or remove TLS certificates while Traefik is started! In addition to <code>backends</code> and <code>frontends</code>, there is now a dedicated <code>tls</code> section in the dynamic configuration. Let’s declare two new certificates using the file provider, you can now add a new <code>tls</code> section in your TOML:</p><pre><code class=\"language-toml\">[frontends]\n...\n[backends]\n...\n\n# HTTPS certificates\n[[tls]]\n  entryPoints = [\"https\"]\n  [tls.certificate]\n    certFile = \"path/to/my.cert\"\n    keyFile = \"path/to/my.key\"\n\n[[tls]]\n  entryPoints = [\"https\"]\n  [tls.certificate]\n  certFile = \"path/to/my/other.cert\"\n  keyFile = \"path/to/my/other.key\"</code></pre><p>Each change of this file will make Traefik reload its TLS certificates. You can also split your configuration into multiple files if you prefer.</p><h2 id=\"rate-limiting\">Rate Limiting</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-70.png\" class=\"kg-image\"></figure><p>We received a wonderful gift from <a href=\"https://github.com/bparli\" rel=\"noopener\">Ben Parli</a> who added rate limiting by frontend. You can even add multiple sets of rates to each frontend. Here is an example taken from <a href=\"https://docs.traefik.io/\">the documentation</a>:</p><pre><code class=\"language-toml\">[frontends]\n    [frontends.frontend1]\n    entrypoints = [\"http\"]\n    backend = \"backend1\"\n        [frontends.frontend1.routes.test_1]\n        rule = \"Path:/\"\n    [frontends.frontend1.ratelimit]\n    extractorfunc = \"client.ip\"\n        [frontends.frontend1.ratelimit.rateset.rateset1]\n        period = \"10s\"\n        average = 100\n        burst = 200\n        [frontends.frontend1.ratelimit.rateset.rateset2]\n        period = \"3s\"\n        average = 5\n        burst = 10</code></pre><blockquote><em><em>In the above example, <code>frontend1</code> is configured to limit requests by the client’s ip address. An average of 5 requests every 3 seconds is allowed and an average of 100 requests every 10 seconds. These can “burst” up to 10 and 200 in each period respectively.</em></em></blockquote><h2 id=\"azure-service-fabric-support\">Azure Service Fabric Support</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-71.png\" class=\"kg-image\"></figure><p><a href=\"https://github.com/lawrencegripper\" rel=\"noopener\">Lawrence Gripper</a> and <a href=\"https://github.com/jjcollinge\" rel=\"noopener\">Joni Collinge</a> from Microsoft made a great contribution (with the help of <a href=\"https://github.com/ldez\" rel=\"noopener\">Ludovic Fernandez</a>) adding <a href=\"https://azure.microsoft.com/en-us/services/service-fabric/\" rel=\"noopener\">Azure Service Fabric</a> support to Traefik.</p><blockquote><em><em>Azure Service Fabric is a distributed systems platform that makes it easy to package, deploy, and manage scalable and reliable microservices and containers.</em></em></blockquote><p>This new provider uses labels to configure how services are exposed through Traefik using the services <code>ServiceManifest.xml</code> file.</p><p>Have a look at <a href=\"https://docs.traefik.io/\">the documentation</a>, we will give more update on this soon!</p><h2 id=\"in-a-nutshell\">In A Nutshell</h2><p><a href=\"https://github.com/dtomcej\" rel=\"noopener\">Daniel Tomcej</a> added Kubernetes annotations and Docker labels for security headers, <a href=\"https://github.com/nmengin\" rel=\"noopener\">Nicolas Mengin</a> added support to etcd v3, our great <a href=\"https://github.com/SantoDE\" rel=\"noopener\">Manuel Zapf</a> implemented the redirection to another entryPoint per frontend.<br>Thanks to <a href=\"https://github.com/adityacs\" rel=\"noopener\">Aditya C S</a>, Traefik can now export its metrics to InfluxDB. <a href=\"https://github.com/mmatur\" rel=\"noopener\">Michael Matur</a> and <a href=\"https://github.com/ldez\" rel=\"noopener\">Ludovic Fernandez</a> did a great job adding multi-versioning to our <a href=\"https://docs.traefik.io/\">documentation</a>. <a href=\"https://github.com/juliens\" rel=\"noopener\">Julien Salleyron</a> refactored the web provider into API/Dashboard, ping, metric and Rest Provider.</p><p>But that’s not all, check the whole <a href=\"https://github.com/containous/traefik/releases/tag/v1.5.0\" rel=\"noopener\">changelog</a> to get an idea of the awesome work that has been done on this release. Lots of bugs have been fixed and we also have been working on background refactoring tasks that will help us improving Traefik in future releases.</p><hr><p>Grab the latest binary for Linux, Windows, Mac on Github or get the official Docker image!</p><pre><code class=\"language-shell\">docker pull traefik:v1.5.0 (or 1.5.0, v1.5, 1.5, cancoillotte)\ndocker pull traefik:v1.5.0-alpine (or 1.5.0-alpine, v1.5-alpine, 1.5-alpine, cancoillotte-alpine)</code></pre><p>The <em><em>versioned</em></em> documentation can be found on <a href=\"https://docs.traefik.io/\">https://docs.traefik.io</a>.</p><hr><p><strong><strong>We are hiring developers and evangelists, try to solve our puzzle: containo.us/#jobs !</strong></strong></p><p>Traefik is still growing fast, we just passed <strong><strong>12k stars</strong></strong> on Github and <strong><strong>42M downloads</strong></strong>!</p><hr><p>We would love to hear your feedback on this new release. Join us on <a href=\"https://github.com/containous/traefik\" rel=\"noopener\">GitHub</a>, <a href=\"https://twitter.com/traefikproxy\" rel=\"noopener\">Twitter</a> or on the <a href=\"https://community.containo.us\">Community Forum</a>!</p>","url":"https://containous.ghost.io/blog/traefik-1-5-cancoillotte-is-here-7bd6713ae135/","canonical_url":null,"uuid":"e186e7de-b234-490d-a1b0-4489f46bc2fe","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dd7f42ef1db6f0038c744ed","reading_time":5}}]}},"pageContext":{"slug":"product-news","limit":9,"skip":18,"numberOfPages":4,"humanPageNumber":3,"prevPageNumber":2,"nextPageNumber":4,"previousPagePath":"/tag/product-news/page/2/","nextPagePath":"/tag/product-news/page/4/"}},"staticQueryHashes":["1274566015","2561578252","2731221146","394248586","4145280475","749840385"]}