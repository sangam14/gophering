{"componentChunkName":"component---src-templates-tag-tsx","path":"/tag/product-news/page/2/","result":{"data":{"ghostTag":{"slug":"product-news","name":"Product News","visibility":"public","feature_image":null,"featureImageSharp":null,"description":null,"meta_title":null,"meta_description":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5eba1e92c49e39004576b665","title":"Announcing Maesh 1.2","slug":"announcing-maesh-1-2","featured":false,"feature_image":"https://containous.ghost.io/content/images/2020/05/Announcing-Maesh-1-2-1.jpg","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/eea388d034bc889f2b61ee6aec472465/47498/Announcing-Maesh-1-2-1.jpg","srcSet":"/static/eea388d034bc889f2b61ee6aec472465/9dc27/Announcing-Maesh-1-2-1.jpg 300w,\n/static/eea388d034bc889f2b61ee6aec472465/4fe8c/Announcing-Maesh-1-2-1.jpg 600w,\n/static/eea388d034bc889f2b61ee6aec472465/47498/Announcing-Maesh-1-2-1.jpg 1200w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"Maesh 1.2 brings new additions such as UDP support and enhancing our internal architecture to provide more flexibility and performance in large deployments.","custom_excerpt":"Maesh 1.2 brings new additions such as UDP support and enhancing our internal architecture to provide more flexibility and performance in large deployments.","visibility":"public","created_at_pretty":"12 May, 2020","published_at_pretty":"May 12, 2020","updated_at_pretty":"02 June, 2020","created_at":"2020-05-12T03:57:06.000+00:00","published_at":"2020-05-12T18:51:37.000+00:00","updated_at":"2020-06-02T14:24:48.000+00:00","meta_title":"Announcing Maesh 1.2 - Now with support for UDP, reworked ACL and more","meta_description":"Maesh 1.2 brings new additions such as UDP support and enhancing our internal architecture to provide more flexibility and performance in large deployments.","og_description":"Now with support for UDP, reworked ACL, and a more efficient installation!","og_image":null,"og_title":"Announcing Maesh 1.2","twitter_description":null,"twitter_image":"https://containous.ghost.io/content/images/2020/05/Announcing-Maesh-1-2-Twitter.jpg","twitter_title":null,"authors":[{"name":"Manuel Zapf","slug":"manuel","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/b_manuel-zapf-foto.1024x1024.png","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Manuel Zapf","slug":"manuel","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/b_manuel-zapf-foto.1024x1024.png","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Now with support for UDP, reworked ACL, and a more efficient installation!\n\nIn early March, we proudly announced the general availability of Maesh 1.1\n[/blog/traefik-maesh-1-1/]. Now, less than 3 months later we’re proud to\nintroduce Maesh 1.2, the latest release of our simpler service mesh. This\nrelease brings new additions such as UDP support and enhancing our internal\narchitecture to provide more flexibility and performance in large deployments.\n\nUDP Support\nAs you probably know, Maesh [/blog/maesh-1-0-802f4be9a9a7/] is built on top of \nTraefik [/traefik/], our popular Cloud Native Edge Router. Traefik introduced\nUDP support with the release of version 2.2 [/blog/traefik-2-2-ingress/] in\nearly March, and  as a result, Maesh is now able to handle UDP connections\n[https://en.wikipedia.org/wiki/User_Datagram_Protocol] as well.\n\nThe only thing you need to do is modify your \"maesh.containo.us/traffic-type\"\nannotation and set it to udp.\n\n---\napiVersion: v1\nkind: Service\nmetadata: \n  annotations: \n    maesh.containo.us/traffic-type: udp\n  labels: \n    app: my-udp-service\n  name: udp-service\n  namespace: test\nspec: \n  ports: \n    - port: 8080\n      protocol: UDP\n  selector: \n    app: my-udp-service\n\n\nThat’s it! Maesh will now proxy the UDP protocol to that service.\n\nPull over Push Configuration\nAs a result of the architectural change mentioned above, we were able to improve\nthe way our proxy nodes ingest configuration.\n\nPrior to this release, the Maesh Controller pushed the current dynamic\nconfiguration to the proxy nodes. Of course, this solution was not optimal as it\neventually resulted in longer deployment times and became a bottleneck in large\nclusters.\n\nWe’ve changed the configuration to a pull based system, so instead of waiting\nfor a push, the custom nodes will pull the configuration from the\ncontroller.This change improves both performance along with stability, and makes\nthe deployment of configuration not only more efficient but much easier.\n\nACL as a feature\nMaesh was designed from the ground up to be SMI [https://smi-spec.io/] \ncompliant. Therefore, we initially had a CLI flag to configure Maesh called \n--smi. This would set Maesh into the SMI Mode which made it possible to make use\nof TrafficSplits or ACL.\n\nAs a side-effect you were unable to use the retry annotation together with SMI\nbecause internally the two modes were incompatible.\n\nTo change that, we have reworked how Maesh discovers services. Maesh will now\nbuild an internal topology of every deployed service, including *nested\nTrafficSplits* through the SMI specification.\n\nAdditionally, if you want to use ACL (TrafficTarget in SMI) you may now activate\nthe ACL flag --acl similar to how you could activate the SMI flag before. Doing\nso, will activate the ACL feature on Maesh without impacting the SMI mode.\n\nMultiple Middlewares per service\nLast but not least, we also enhanced the handling of the annotations on your\nservices. It is now possible to combine middlewares, for example the\nretry-attempts with the rate-limiter to better control your services.\n\n---\napiVersion: v1\nkind: Service\nmetadata: \n  annotations:\n    maesh.containo.us/retry-attempts: 2\n    maesh.containo.us/ratelimit-burst: 200\n  labels: \n    app: my-udp-service\n  name: udp-service\n  namespace: test\nspec: \n  ports: \n    - port: 8080\n      protocol: UDP\n  selector: \n    app: my-udp-service\n\n\nThis configuration activates the retry feature and Maesh will simultaneously try\nto proxy the request twice in case of a network error and activate the rate\nlimiting for that service.\n\nNew Helm Major Version\nAs a result of all the architecture changes mentioned above, we needed to\nenhance the Major Version of our chart as we had some helm breaking changes. For\nassistance while upgrading your installation, please see here\n[https://docs.mae.sh/master/migration/helm-chart/].\n\nWhat’s Next\nWe’re just getting started. Work is underway to implement some of the most\nrequested features into Maesh, including End to End encryption. Of course, this\nis only made possible by you, an awesome community, which provides us such\nvaluable feedback that we’re able to define an exciting roadmap for a product\nyou’ve helped us build. \n\nPlease don’t stop contributing, either in PR’s or just raising issues. For us it\nmatters a lot. \n\nThank you!\n\nUseful links\n * Website [/maesh/]\n * Documentation [https://docs.mae.sh/]\n * Github [https://github.com/containous/maesh]\n * Community Forum [https://community.containo.us/c/maesh]","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">Now with support for UDP, reworked ACL, and a more efficient installation!</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2020/05/Announcing-Maesh-1-2.jpg\" class=\"kg-image\"></figure><p>In early March, we proudly announced the general availability of <a href=\"https://containous.ghost.io/blog/traefik-maesh-1-1/\">Maesh 1.1</a>. Now, less than 3 months later we’re proud to introduce Maesh 1.2, the latest release of our simpler service mesh. This release brings new additions such as UDP support and enhancing our internal architecture to provide more flexibility and performance in large deployments.</p><h2 id=\"udp-support\">UDP Support</h2><p>As you probably know, <a href=\"https://containous.ghost.io/blog/maesh-1-0-802f4be9a9a7/\">Maesh</a> is built on top of <a href=\"https://containous.ghost.io/traefik/\">Traefik</a>, our popular Cloud Native Edge Router. Traefik introduced UDP support with the <a href=\"https://containous.ghost.io/blog/traefik-2-2-ingress/\">release of version 2.2</a> in early March, and  as a result, Maesh is now able to handle <a href=\"https://en.wikipedia.org/wiki/User_Datagram_Protocol\">UDP connections</a> as well.</p><p>The only thing you need to do is modify your \"maesh.containo.us/traffic-type\" annotation and set it to <strong>udp</strong>.</p><!--kg-card-begin: markdown--><pre><code>---\napiVersion: v1\nkind: Service\nmetadata: \n  annotations: \n    maesh.containo.us/traffic-type: udp\n  labels: \n    app: my-udp-service\n  name: udp-service\n  namespace: test\nspec: \n  ports: \n    - port: 8080\n      protocol: UDP\n  selector: \n    app: my-udp-service\n</code></pre>\n<!--kg-card-end: markdown--><p>That’s it! Maesh will now proxy the UDP protocol to that service.</p><h2 id=\"pull-over-push-configuration\">Pull over Push Configuration</h2><p>As a result of the architectural change mentioned above, we were able to improve the way our proxy nodes ingest configuration.</p><p>Prior to this release, the Maesh Controller pushed the current dynamic configuration to the proxy nodes. Of course, this solution was not optimal as it eventually resulted in longer deployment times and became a bottleneck in large clusters.</p><p>We’ve changed the configuration to a pull based system, so instead of waiting for a push, the custom nodes will pull the configuration from the controller.This change improves both performance along with stability, and makes the deployment of configuration not only more efficient but much easier.</p><h2 id=\"acl-as-a-feature\">ACL as a feature</h2><p>Maesh was designed from the ground up to be <a href=\"https://smi-spec.io/\">SMI</a> compliant. Therefore, we initially had a CLI flag to configure Maesh called <strong>--smi</strong>. This would set Maesh into the SMI Mode which made it possible to make use of TrafficSplits or ACL.</p><p>As a side-effect you were unable to use the retry annotation together with SMI because internally the two modes were incompatible.</p><p>To change that, we have reworked how Maesh discovers services. Maesh will now build an internal topology of every deployed service, including *nested TrafficSplits* through the SMI specification.</p><p>Additionally, if you want to use ACL (TrafficTarget in SMI) you may now activate the ACL flag<strong> --acl</strong> similar to how you could activate the SMI flag before. Doing so, will activate the ACL feature on Maesh without impacting the SMI mode.</p><h2 id=\"multiple-middlewares-per-service\">Multiple Middlewares per service</h2><p>Last but not least, we also enhanced the handling of the annotations on your services. It is now possible to combine middlewares, for example the retry-attempts with the rate-limiter to better control your services.</p><!--kg-card-begin: markdown--><pre><code>---\napiVersion: v1\nkind: Service\nmetadata: \n  annotations:\n    maesh.containo.us/retry-attempts: 2\n    maesh.containo.us/ratelimit-burst: 200\n  labels: \n    app: my-udp-service\n  name: udp-service\n  namespace: test\nspec: \n  ports: \n    - port: 8080\n      protocol: UDP\n  selector: \n    app: my-udp-service\n</code></pre>\n<!--kg-card-end: markdown--><p>This configuration activates the retry feature and Maesh will simultaneously try to proxy the request twice in case of a network error and activate the rate limiting for that service.</p><h2 id=\"new-helm-major-version\">New Helm Major Version</h2><p>As a result of all the architecture changes mentioned above, we needed to enhance the Major Version of our chart as we had some helm breaking changes. For assistance while upgrading your installation, please see <a href=\"https://docs.mae.sh/master/migration/helm-chart/\">here</a>.</p><h2 id=\"what-s-next\">What’s Next</h2><p>We’re just getting started. Work is underway to implement some of the most requested features into Maesh, including End to End encryption. Of course, this is only made possible by you, an awesome community, which provides us such valuable feedback that we’re able to define an exciting roadmap for a product you’ve helped us build. </p><p>Please don’t stop contributing, either in PR’s or just raising issues. For us it matters a lot. </p><p>Thank you!</p><h2 id=\"useful-links\">Useful links</h2><ul><li><a href=\"https://containous.ghost.io/maesh/\">Website</a></li><li><a href=\"https://docs.mae.sh/\">Documentation</a></li><li><a href=\"https://github.com/containous/maesh\">Github</a></li><li><a href=\"https://community.containo.us/c/maesh\">Community Forum</a><br></li></ul>","url":"https://containous.ghost.io/blog/announcing-maesh-1-2/","canonical_url":null,"uuid":"b766ba7b-fcf3-4d04-aca7-89caea3a0a44","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eba1e92c49e39004576b665","reading_time":3}},{"node":{"id":"Ghost__Post__5e950d861afff4004456e057","title":"Traefik Enterprise Edition 2.1 Now Available","slug":"traefik-enterprise-edition-2-1-now-available","featured":false,"feature_image":"https://containous.ghost.io/content/images/2020/04/TraefikEE2.1-Blog.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/f4934efe26cd689a1362814ac4ff60b9/f3583/TraefikEE2.1-Blog.png","srcSet":"/static/f4934efe26cd689a1362814ac4ff60b9/630fb/TraefikEE2.1-Blog.png 300w,\n/static/f4934efe26cd689a1362814ac4ff60b9/2a4de/TraefikEE2.1-Blog.png 600w,\n/static/f4934efe26cd689a1362814ac4ff60b9/f3583/TraefikEE2.1-Blog.png 1200w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"This release adds crucial new capabilities designed to tame the complexity of managing internal connections, especially with enhanced security options.","custom_excerpt":"This release adds crucial new capabilities designed to tame the complexity of managing internal connections, especially with enhanced security options.","visibility":"public","created_at_pretty":"14 April, 2020","published_at_pretty":"April 14, 2020","updated_at_pretty":"21 May, 2020","created_at":"2020-04-14T01:10:30.000+00:00","published_at":"2020-04-14T16:09:23.000+00:00","updated_at":"2020-05-21T18:47:59.000+00:00","meta_title":"Traefik Enterprise 2.1 - New authentication for API gateways","meta_description":"This release adds crucial new capabilities designed to tame the complexity of managing internal connections, especially with enhanced security options.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":"https://containous.ghost.io/content/images/2020/04/TraefikEE2.1-Twitter.png","twitter_title":null,"authors":[{"name":"Nicolas Mengin","slug":"nicolas","bio":null,"profile_image":"https://containous.ghost.io/content/images/2020/02/wam.jpeg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Nicolas Mengin","slug":"nicolas","bio":null,"profile_image":"https://containous.ghost.io/content/images/2020/02/wam.jpeg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"New authentication features for API gateways and more\n\nAfter one year of existence, TraefikEE has grown up to add much more value on\ntop of Traefik open source.\n\nWhile Traefik open source is laser-focused on being a world-class reverse proxy\noptimized to manage external incoming connections, this release adds crucial new\ncapabilities designed to tame the complexity of managing internal connections,\nespecially with enhanced security options.\n\nTraefikEE 2.1 now provides support for three new authentication protocols: JWT,\nHMAC, and OAuth2 Token Introspection, that can be used to easily secure both\nexternal and internal traffic.\n\nAlso included in this release: enhanced cluster management, Traefik 2.2 support,\nand RedHat OpenShift certification.\n\nThree flavors of Authentication\nDeploying a microservice architecture requires managing an infrastructure with\nmany APIs. These APIs are reached by both external and internal systems, and the\nnecessity to secure access to all your APIs takes on fundamental importance.\n\nTraefikEE has acknowledged this need, firstly by adding the LDAP Middleware, and\nnow by adding JWT, HMAC and oAuth2 Token Introspection.\n\nNo matter what your security needs are, TraefikEE has a middleware that can\nhelp!\n\nFirst flavor: JWT\nJWT is a very popular technology to quickly secure your infrastructure, and\nTraefikEE now embeds a dedicated middleware\n[https://docs.containo.us/middlewares/jwt/] to complement your microservice\narchitecture. All it takes is one extra line of configuration!\n\n  services:\n    whoami:\n      image: containous/whoami\n      labels:\n        # … routing labels...\n        - \"traefik.http.middlewares.test-jwtAuth.plugin.jwtAuth.source=my-jwt-src\" # Authentication Source declared in another place.\n\n\nAnd for the icing on the cake, the JWT middleware behavior can be extended to\nallow operations such as authorization (using claims), and header forwarding.\n\n  services:\n    whoami:\n      image: containous/whoami\n      labels:\n        # … routing labels...\n        - \"traefik.http.middlewares.test-jwtAuth.plugin.jwtAuth.source=my-jwt-src\" # Authentication Source declared in another place.\n        - \"traefik.http.middlewares.test-jwtAuth.plugin.jwtAuth.claims=Equals(`team`, `admin`) || Equals(`team`, `dev`)\" # Only users from admin and dev teams can reach your services.\n\n\nSecond flavor: OAuth2 Token Introspection\nNow, if you've already deployed an OAuth2 server with a token introspection\nendpoint, you probably want to leverage it to secure your services.\n\nGood news then, TraefikEE can connect to it\n[https://docs.containo.us/middlewares/oauth-intro/`]and add an authorization\nlayer directly in your routing configuration. Securing a service has never been\nso easy!\n\n# Static Configuration\n  authSources:\n    oait-src:\n      oAuthIntrospection:\n        url: http://myoauth2server # OAuth2 server endpoint\n        authorizationHeader: Basic XXxxxx # Type of authentication\n\n\nversion: '3.4'\n  services:\n    whoami:\n      image: containous/whoami\n      deploy:\n        labels:\n          # Dynamic Configuration\n          # … routing labels...\n          - \"traefik.http.middlewares.test-oauth-intro.plugin.oAuthIntrospection.source=oait-src”\n          - \"traefik.http.middlewares.test-oauth-intro.plugin.oAuthIntrospection.claims= Equals(`team`, `admin`) || Equals(`team`, `dev`)\" # Only users from admin and dev teams can reach your services.\n\n\nThird flavor: HMAC\nWant to prevent your system from attacks such as man-in-middle, XSS injection,\netc.?\n\nYou can enforce your infrastructure security by checking both the integrity and\nthe sender's identity of the incoming requests with the new HMAC middleware\n[https://docs.containo.us/middlewares/hmac/].\n\n# Static Configuration\nauthSources:\n  my-hmac-src:\n    hmac:\n      inline: # Declare here the authorized id/keys\n        - id: \"secret-key\"\n          key: \"traefikee-approved\"\n\n\nversion: '3.4'\n  services:\n    whoami:\n      image: containous/whoami\n      deploy:\n        labels:\n          # Dynamic Configuration\n          # … routing labels...\n          - \"traefik.http.middlewares.test-hmac-auth.plugin.hmacauth.source=my-hmac-src\"\n\n\nRoot-LESS Image, Secured-MORE Infrastructure\nTraefikEE has always been focused on infrastructure security.\n\nWe’ve used a gRPC MTLS communication between the nodes and we’ve split the\nresponsibilities between controllers and proxies to secure both internal and\noutgoing cluster connections.\n\nIn TraefikEE v2.1, we’ve added a rootless image to secure your infrastructure\nagainst potential vulnerabilities in the Docker daemon, and the container\nruntime.\n\nTake advantage of this feature by following the comprehensive guide in the\ndocumentation [https://docs.containo.us/operating/rootless-image/].\n\nEnhanced Cluster Management\nMany users reported to us that they’ve had to maintain TraefiKEE clusters\ninstalled on both their Q&A and Production infrastructures, and they’d like to\navoid specifying the cluster name on each command they launched.\n\nIn order to help them, and to improve the user experience, we’ve introduced a\nfew commands into the CLI (teectl) to help manage multiple clusters\n[https://docs.containo.us/operating/teectl-cluster-mgt/], and especially, to\ncustomize the active cluster. Thus, users can set a cluster as the active one\nand not provide its name in each command.\n\nRed Hat OpenShift Operator Certified\nLike Traefik, TraefikEE eases your Ingress Controller integration regardless of\nyour infrastructure, including Red Hat OpenShift clusters!\n\nStarting with TraefikEE v2.0, we introduced a Kubernetes Operator to install\nTraefikEE into OpenShift v4 clusters.\n\nToday, we are proud to announce that TraefikEE v2.1 is Red Hat OpenShift\nOperator certified. With this certification, TraefikEE joins the Red Hat\nsoftware certified partner ecosystem and is readily available through the Red\nHat OpenShift Container Platform\n[https://www.openshift.com/products/container-platform].\n\nThe TraefikEE Operator is now available in the Red Hat Container Catalog\n[https://catalog.redhat.com/software/containers/explore]. Via OperatorHub\n[https://operatorhub.io/operator/traefikee-operator], you can install and update\nTraefikEE quickly and seamlessly into any OpenShift cluster.\n\nWhat's Next?\nTraefikEE continues to bring more enterprise specific features. High\nAvailability, distributed services, and enterprise authentication protocols are\njust a few of the benefits you can get from switching to TraefikEE.\n\nTake a look at all these features in our 5-minute video\n[https://info.containo.us/request-demo-traefikee] to learn more about them.\n\nAs always, we are happy to answer your questions, and help you find the best\nsolution for your projects [https://info.containo.us/request-demo-traefikee].\n\nIf you want to test drive our new features, give Traefik Enterprise Edition 2.1\na try today\n[https://info.containo.us/get-traefik-enterprise-edition-free-for-30-days].","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">New authentication features for API gateways and more</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2020/04/TraefikEE2.1-Blog-1.png\" class=\"kg-image\"></figure><p>After one year of existence, TraefikEE has grown up to add much more value on top of Traefik open source.</p><p>While Traefik open source is laser-focused on being a world-class reverse proxy optimized to manage external incoming connections, this release adds crucial new capabilities designed to tame the complexity of managing internal connections, especially with enhanced security options.</p><p>TraefikEE 2.1 now provides support for three new authentication protocols: JWT, HMAC, and OAuth2 Token Introspection, that can be used to easily secure both external and internal traffic.</p><p>Also included in this release: enhanced cluster management, Traefik 2.2 support, and RedHat OpenShift certification.</p><h2 id=\"three-flavors-of-authentication\">Three flavors of Authentication</h2><p>Deploying a microservice architecture requires managing an infrastructure with many APIs. These APIs are reached by both external and internal systems, and the necessity to secure access to all your APIs takes on fundamental importance.</p><p>TraefikEE has acknowledged this need, firstly by adding the LDAP Middleware, and now by adding JWT, HMAC and oAuth2 Token Introspection.</p><p>No matter what your security needs are, TraefikEE has a middleware that can help!</p><h4 id=\"first-flavor-jwt\">First flavor: JWT</h4><p>JWT is a very popular technology to quickly secure your infrastructure, and TraefikEE now embeds <a href=\"https://docs.containo.us/middlewares/jwt/\">a dedicated middleware</a> to complement your microservice architecture. All it takes is one extra line of configuration!</p><!--kg-card-begin: markdown--><pre><code class=\"language-yaml\">  services:\n    whoami:\n      image: containous/whoami\n      labels:\n        # … routing labels...\n        - &quot;traefik.http.middlewares.test-jwtAuth.plugin.jwtAuth.source=my-jwt-src&quot; # Authentication Source declared in another place.\n</code></pre>\n<!--kg-card-end: markdown--><p>And for the icing on the cake, the JWT middleware behavior can be extended to allow operations such as authorization (using claims), and header forwarding.</p><!--kg-card-begin: markdown--><pre><code class=\"language-yaml\">  services:\n    whoami:\n      image: containous/whoami\n      labels:\n        # … routing labels...\n        - &quot;traefik.http.middlewares.test-jwtAuth.plugin.jwtAuth.source=my-jwt-src&quot; # Authentication Source declared in another place.\n        - &quot;traefik.http.middlewares.test-jwtAuth.plugin.jwtAuth.claims=Equals(`team`, `admin`) || Equals(`team`, `dev`)&quot; # Only users from admin and dev teams can reach your services.\n</code></pre>\n<!--kg-card-end: markdown--><h4 id=\"second-flavor-oauth2-token-introspection\">Second flavor: OAuth2 Token Introspection</h4><p>Now, if you've already deployed an OAuth2 server with a token introspection endpoint, you probably want to leverage it to secure your services.</p><p>Good news then,<a href=\"https://docs.containo.us/middlewares/oauth-intro/`\"> TraefikEE can connect to it </a>and add an authorization layer directly in your routing configuration. Securing a service has never been so easy!</p><!--kg-card-begin: markdown--><pre><code class=\"language-yaml\"># Static Configuration\n  authSources:\n    oait-src:\n      oAuthIntrospection:\n        url: http://myoauth2server # OAuth2 server endpoint\n        authorizationHeader: Basic XXxxxx # Type of authentication\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code class=\"language-yaml\">version: '3.4'\n  services:\n    whoami:\n      image: containous/whoami\n      deploy:\n        labels:\n          # Dynamic Configuration\n          # … routing labels...\n          - &quot;traefik.http.middlewares.test-oauth-intro.plugin.oAuthIntrospection.source=oait-src”\n          - &quot;traefik.http.middlewares.test-oauth-intro.plugin.oAuthIntrospection.claims= Equals(`team`, `admin`) || Equals(`team`, `dev`)&quot; # Only users from admin and dev teams can reach your services.\n</code></pre>\n<!--kg-card-end: markdown--><h4 id=\"third-flavor-hmac\">Third flavor: HMAC</h4><p>Want to prevent your system from attacks such as man-in-middle, XSS injection, etc.?</p><p>You can enforce your infrastructure security by checking both the integrity and the sender's identity of the incoming requests with the new <a href=\"https://docs.containo.us/middlewares/hmac/\">HMAC middleware</a>.</p><!--kg-card-begin: markdown--><pre><code class=\"language-yaml\"># Static Configuration\nauthSources:\n  my-hmac-src:\n    hmac:\n      inline: # Declare here the authorized id/keys\n        - id: &quot;secret-key&quot;\n          key: &quot;traefikee-approved&quot;\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code class=\"language-yaml\">version: '3.4'\n  services:\n    whoami:\n      image: containous/whoami\n      deploy:\n        labels:\n          # Dynamic Configuration\n          # … routing labels...\n          - &quot;traefik.http.middlewares.test-hmac-auth.plugin.hmacauth.source=my-hmac-src&quot;\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"root-less-image-secured-more-infrastructure\">Root-LESS Image, Secured-MORE Infrastructure</h2><p>TraefikEE has always been focused on infrastructure security.</p><p>We’ve used a gRPC MTLS communication between the nodes and we’ve split the responsibilities between controllers and proxies to secure both internal and outgoing cluster connections.</p><p>In TraefikEE v2.1, we’ve added a rootless image to secure your infrastructure against potential vulnerabilities in the Docker daemon, and the container runtime.</p><p>Take advantage of this feature by following <a href=\"https://docs.containo.us/operating/rootless-image/\">the comprehensive guide in the documentation</a>.</p><h2 id=\"enhanced-cluster-management\">Enhanced Cluster Management</h2><p>Many users reported to us that they’ve had to maintain TraefiKEE clusters installed on both their Q&amp;A and Production infrastructures, and they’d like to avoid specifying the cluster name on each command they launched.</p><p>In order to help them, and to improve the user experience, we’ve introduced a few commands into the CLI (teectl) to help <a href=\"https://docs.containo.us/operating/teectl-cluster-mgt/\">manage multiple clusters</a>, and especially, to customize the active cluster. Thus, users can set a cluster as the active one and not provide its name in each command.</p><h2 id=\"red-hat-openshift-operator-certified\">Red Hat OpenShift Operator Certified</h2><p>Like Traefik, TraefikEE eases your Ingress Controller integration regardless of your infrastructure, including Red Hat OpenShift clusters!</p><p>Starting with TraefikEE v2.0, we introduced a Kubernetes Operator to install TraefikEE into OpenShift v4 clusters.</p><p>Today, we are proud to announce that TraefikEE v2.1 is Red Hat OpenShift Operator certified. With this certification, TraefikEE joins the Red Hat software certified partner ecosystem and is readily available through the <a href=\"https://www.openshift.com/products/container-platform\">Red Hat OpenShift Container Platform</a>.</p><p>The TraefikEE Operator is now available in the <a href=\"https://catalog.redhat.com/software/containers/explore\">Red Hat Container Catalog</a>. Via <a href=\"https://operatorhub.io/operator/traefikee-operator\">OperatorHub</a>, you can install and update TraefikEE quickly and seamlessly into any OpenShift cluster.</p><h2 id=\"what-s-next\">What's Next?</h2><p>TraefikEE continues to bring more enterprise specific features. High Availability, distributed services, and enterprise authentication protocols are just a few of the benefits you can get from switching to TraefikEE.</p><p>Take a look at all these features in <a href=\"https://info.containo.us/request-demo-traefikee\">our 5-minute video</a> to learn more about them.</p><p>As always, we are happy to answer your questions, <a href=\"https://info.containo.us/request-demo-traefikee\">and help you find the best solution for your projects</a>.</p><p>If you want to test drive our new features, <a href=\"https://info.containo.us/get-traefik-enterprise-edition-free-for-30-days\">give Traefik Enterprise Edition 2.1 a try today</a>.</p>","url":"https://containous.ghost.io/blog/traefik-enterprise-edition-2-1-now-available/","canonical_url":null,"uuid":"94cc784c-228d-43c6-9944-7be3a0834e62","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5e950d861afff4004456e057","reading_time":4}},{"node":{"id":"Ghost__Post__5e5cd2ba3727400038a2f958","title":"Announcing Traefik 2.2","slug":"traefik-2-2-ingress","featured":false,"feature_image":"https://containous.ghost.io/content/images/2020/04/Traefik2.2Blog.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/45b5b2113a5d238563769f59eb3b6ce2/f3583/Traefik2.2Blog.png","srcSet":"/static/45b5b2113a5d238563769f59eb3b6ce2/630fb/Traefik2.2Blog.png 300w,\n/static/45b5b2113a5d238563769f59eb3b6ce2/2a4de/Traefik2.2Blog.png 600w,\n/static/45b5b2113a5d238563769f59eb3b6ce2/f3583/Traefik2.2Blog.png 1200w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"Traefik 2.1 adds couple of long awaited features, but also brings simplicity in certain areas. Simplicity has always been a key feature of Traefik since the beginning and is utterly important for us, but also for you, our users. ","custom_excerpt":"Traefik 2.1 adds couple of long awaited features, but also brings simplicity in certain areas. Simplicity has always been a key feature of Traefik since the beginning and is utterly important for us, but also for you, our users. ","visibility":"public","created_at_pretty":"02 March, 2020","published_at_pretty":"March 26, 2020","updated_at_pretty":"28 April, 2020","created_at":"2020-03-02T09:32:42.000+00:00","published_at":"2020-03-26T12:58:01.000+00:00","updated_at":"2020-04-28T13:02:41.000+00:00","meta_title":"Announcing Traefik 2.2 - With Enhanced Ingress support and more!","meta_description":"Traefik 2.1 adds couple of long awaited features, but also brings simplicity in certain areas. Simplicity has always been a key feature of Traefik.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":"https://containous.ghost.io/content/images/2020/03/Traefik2.2-Twitter.png","twitter_title":null,"authors":[{"name":"Manuel Zapf","slug":"manuel","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/b_manuel-zapf-foto.1024x1024.png","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Manuel Zapf","slug":"manuel","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/b_manuel-zapf-foto.1024x1024.png","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"#community-related-resource","slug":"hash-community-related-resource","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"internal"},{"name":"#traefik-related-resource","slug":"hash-traefik-related-resource","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"internal"}],"plaintext":"With Enhanced Ingress support and more!\n\nAfter releasing 2.1 in December, we are excited to announce a new release. This\none adds couple of long awaited features, but also brings simplicity in certain\nareas. Simplicity has always been a key feature of Traefik since the beginning\nand is utterly important for us, but also for you, our users. Our goal is to\nkeep constantly improving the user experience by making the handling of Traefik\neven more easy, that you can focus on your real issues. \n\nEnhanced Ingress Support\nAs announced with the 2.1 release, this release is focusing on user experience.\nFor that reason, we brought back extended Ingress Support. Prior to Traefik\nv2.2, plain Kubernetes Ingress Objects were only supported without annotations.\nAs our community told us, they have a valuable use-case where they want to run\nTraefik as a simple Ingress Controller, and don't want to fully commit to the\nIngressRoute in order to stay better included with the Kubernetes ecosystem. For\nthat reason, we’re supporting Ingress Objects with a sub-set of annotations\nagain.\n\nkind: Ingress\napiVersion: networking.k8s.io/v1beta1\nmetadata:\n  name: foo\n  namespace: bar\n  annotations:\n    traefik.ingress.kubernetes.io/router.entrypoints: web, websecure\n    traefik.ingress.kubernetes.io/router.middlewares: redirect-http@kuberntes-crd\n    external-dns.alpha.kubernetes.io/hostname: *.mycompany.org\nspec:\n  rules:\n  - host: foo.com\n    http:\n      paths:\n      - path: /bar\n        backend:\n          serviceName: service1\n          servicePort: 80\n\nAdditionally, not all the behavior we want to be configurable for our users fit\ninto the idea of an Ingress, therefore we're also supporting a subset of\nannotations on Service Objects to fill the gap.\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: service1\n  namespace: bar\n  annotations: traefik.ingress.kubernetes.io/service.sticky: \"true\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    name: http\n\nA list of all annotations (Ingress and Service) can be found here \nhttps://docs.traefik.io/master/routing/providers/kubernetes-ingress/\n\nEntrypoint Redirection And Default Router Configuration\nTraefik 2.x is really powerful, given the reworked architecture allowing us to\noperate from Layer 4 and above. Additionally, the new concept of routers,\nmiddlewares and services allows for more flexibility. As a result, you told us\nthat the configuration ended up being a bit too verbose, and that you're missing\nsome sort of redirects on Entrypoints, as we had something similar with Traefik\n1.x.\n\nFor that reason, we introduced the concepts of Entrypoint redirects, and default\nrouter configuration.\n\nWith that release, it's possible to configure redirects bound to an Entrypoint\nthrough the static configuration. Additionally, you can also set defaults for\nthe other areas a router can handle.\n\nhttp:\n    redirections:\n        entryPoint:\n          to: foobar\n          scheme: foobar\n    middlewares:\n      - foobar\n      - foobar\n    tls:\n      options: foobar\n      certResolver: foobar\n      domains:\n        - main: foobar\n          sans:\n          - foobar\n          - foobar\n        - main: foobar\n          sans:\n          - foobar\n          - foobar\n\nTraefik will then create a default router, which will handle the configured\nredirects for you. For everything starting with middlewares, the default values\nwill be copied automatically to all the routers you create.\n\nKey Value Stores\nAnother long awaited feature have been the addition of Key Value Stores as a\ndynamic configuration provider in Traefik v2.Not only have former stores are\nre-added again (such as e.g. etcd or Consul), but new ones such as Redis have\nbeen added providing more supported platforms.\n\nUDP\nSupport for TCP is one of the major changes from Traefik Version to Version 2.\nNow, with the new release we're also adding support for UDP! The only\nrequirement is enabling an Entrypoint to be UDP based and that’s it.\n\n[entryPoints]\n  [entryPoints.udp]\n    address = \":8093/udp\"\n  [entryPoints.http]\n    address = \":8093\" # same as \":8093/tcp\"\n\nFor now, we don't have any routing rules, as TLS is not supported currently (so\nthere is no HostSNI), and there is no PathPrefix notion since there are no\nrequests at the transport layer level. However, that’s not preventing you from\nload balancing your UDP services. That only means that you need to have one\ndedicated Entrypoint per UDP service you want to load balance.\n\nElastic APM Tracer\nElastic APM is a well known solution in the ecosystem. It's the APM solution\nprovided by Elastic [https://www.elastic.co/de/apm]. Starting now, it's a\nsupported Tracing backend for Traefik as well thanks to a community\ncontribution. Just configure it, and you'll have your traces transferred to that\nsystem. \n\nWeb UI Enhancement\nLast but not least, there have been a couple of modifications to the Web UI. Now\nnot only will you be able to see your UDP services, but we’ve had a great\ncommunity contribution to add a dark theme also!\n\nWhat's next?\nAs we said with the previous release, focusing on improving the user experience\nis our goal. Implementing advanced Ingress support on Kubernetes and providing a\nway to configure defaults on an Entrypoint was one of our first steps. However,\nthere are still things to be done which will be part of the upcoming release(s).\nNot only on improving the user experience but also on providing additional\nfeatures. For that please keep raising your voice in the issue tracker\n[https://github.com/containous/traefik/issues], on the community forum\n[https://community.containo.us/], or better—pull request\n[https://github.com/containous/traefik/pulls] your way into making Traefik a\nbetter tool for everyone.","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">With Enhanced Ingress support and more!</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2020/03/Traefik2.2-blog.png\" class=\"kg-image\"></figure><p>After releasing 2.1 in December, we are excited to announce a new release. This one adds couple of long awaited features, but also brings simplicity in certain areas. Simplicity has always been a key feature of Traefik since the beginning and is utterly important for us, but also for you, our users. Our goal is to keep constantly improving the user experience by making the handling of Traefik even more easy, that you can focus on your real issues. </p><h3 id=\"enhanced-ingress-support\">Enhanced Ingress Support</h3><p>As announced with the 2.1 release, this release is focusing on user experience. For that reason, we brought back extended Ingress Support. Prior to Traefik v2.2, plain Kubernetes Ingress Objects were only supported without annotations. As our community told us, they have a valuable use-case where they want to run Traefik as a simple Ingress Controller, and don't want to fully commit to the IngressRoute in order to stay better included with the Kubernetes ecosystem. For that reason, we’re supporting Ingress Objects with a sub-set of annotations again.</p><pre><code class=\"language-yaml\">kind: Ingress\napiVersion: networking.k8s.io/v1beta1\nmetadata:\n  name: foo\n  namespace: bar\n  annotations:\n    traefik.ingress.kubernetes.io/router.entrypoints: web, websecure\n    traefik.ingress.kubernetes.io/router.middlewares: redirect-http@kuberntes-crd\n    external-dns.alpha.kubernetes.io/hostname: *.mycompany.org\nspec:\n  rules:\n  - host: foo.com\n    http:\n      paths:\n      - path: /bar\n        backend:\n          serviceName: service1\n          servicePort: 80</code></pre><p>Additionally, not all the behavior we want to be configurable for our users fit into the idea of an Ingress, therefore we're also supporting a subset of annotations on Service Objects to fill the gap.</p><pre><code class=\"language-yaml\">apiVersion: v1\nkind: Service\nmetadata:\n  name: service1\n  namespace: bar\n  annotations: traefik.ingress.kubernetes.io/service.sticky: \"true\"\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    name: http</code></pre><p>A list of all annotations (Ingress and Service) can be found here <a href=\"https://docs.traefik.io/master/routing/providers/kubernetes-ingress/\">https://docs.traefik.io/master/routing/providers/kubernetes-ingress/</a></p><h2 id=\"entrypoint-redirection-and-default-router-configuration\">Entrypoint Redirection And Default Router Configuration</h2><p>Traefik 2.x is really powerful, given the reworked architecture allowing us to operate from Layer 4 and above. Additionally, the new concept of routers, middlewares and services allows for more flexibility. As a result, you told us that the configuration ended up being a bit too verbose, and that you're missing some sort of redirects on Entrypoints, as we had something similar with Traefik 1.x.</p><p>For that reason, we introduced the concepts of Entrypoint redirects, and default router configuration.</p><p>With that release, it's possible to configure redirects bound to an Entrypoint through the static configuration. Additionally, you can also set defaults for the other areas a router can handle.</p><pre><code class=\"language-yaml\">http:\n    redirections:\n        entryPoint:\n          to: foobar\n          scheme: foobar\n    middlewares:\n      - foobar\n      - foobar\n    tls:\n      options: foobar\n      certResolver: foobar\n      domains:\n        - main: foobar\n          sans:\n          - foobar\n          - foobar\n        - main: foobar\n          sans:\n          - foobar\n          - foobar</code></pre><p>Traefik will then create a default router, which will handle the configured redirects for you. For everything starting with <strong>middlewares</strong>, the default values will be copied automatically to all the routers you create.</p><h2 id=\"key-value-stores\">Key Value Stores</h2><p>Another long awaited feature have been the addition of Key Value Stores as a dynamic configuration provider in Traefik v2.Not only have former stores are re-added again (such as e.g. etcd or Consul), but new ones such as Redis have been added providing more supported platforms.</p><h2 id=\"udp\">UDP</h2><p>Support for TCP is one of the major changes from Traefik Version to Version 2. Now, with the new release we're also adding support for UDP! The only requirement is enabling an Entrypoint to be UDP based and that’s it.</p><pre><code class=\"language-yaml\">[entryPoints]\n  [entryPoints.udp]\n    address = \":8093/udp\"\n  [entryPoints.http]\n    address = \":8093\" # same as \":8093/tcp\"</code></pre><p>For now, we don't have any routing rules, as TLS is not supported currently (so there is no HostSNI), and there is no PathPrefix notion since there are no requests at the transport layer level. However, that’s not preventing you from load balancing your UDP services. That only means that you need to have one dedicated Entrypoint per UDP service you want to load balance.</p><h2 id=\"elastic-apm-tracer\">Elastic APM Tracer</h2><p>Elastic APM is a well known solution in the ecosystem. It's the <a href=\"https://www.elastic.co/de/apm\">APM solution provided by Elastic</a>. Starting now, it's a supported Tracing backend for Traefik as well thanks to a community contribution. Just configure it, and you'll have your traces transferred to that system. </p><h2 id=\"web-ui-enhancement\">Web UI Enhancement</h2><p>Last but not least, there have been a couple of modifications to the Web UI. Now not only will you be able to see your UDP services, but we’ve had a great community contribution to add a dark theme also!</p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2020/03/image.png\" class=\"kg-image\"></figure><h2 id=\"what-s-next\">What's next?</h2><p>As we said with the previous release, focusing on improving the user experience is our goal. Implementing advanced Ingress support on Kubernetes and providing a way to configure defaults on an Entrypoint was one of our first steps. However, there are still things to be done which will be part of the upcoming release(s). Not only on improving the user experience but also on providing additional features. For that please keep raising your voice in the <a href=\"https://github.com/containous/traefik/issues\">issue tracker</a>, on the <a href=\"https://community.containo.us/\">community forum</a>, or better—<a href=\"https://github.com/containous/traefik/pulls\">pull request</a> your way into making Traefik a better tool for everyone.</p>","url":"https://containous.ghost.io/blog/traefik-2-2-ingress/","canonical_url":null,"uuid":"d7ee17a1-2b6a-4486-8694-3db02c494b5e","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5e5cd2ba3727400038a2f958","reading_time":4}},{"node":{"id":"Ghost__Post__5e5e2d1c3727400038a2fa13","title":"Announcing Maesh 1.1","slug":"traefik-maesh-1-1","featured":false,"feature_image":"https://containous.ghost.io/content/images/2020/04/Maesh1.1-Blog.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/0e11bb0798830e4ec3b9493c39196ca2/f3583/Maesh1.1-Blog.png","srcSet":"/static/0e11bb0798830e4ec3b9493c39196ca2/630fb/Maesh1.1-Blog.png 300w,\n/static/0e11bb0798830e4ec3b9493c39196ca2/2a4de/Maesh1.1-Blog.png 600w,\n/static/0e11bb0798830e4ec3b9493c39196ca2/f3583/Maesh1.1-Blog.png 1200w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"A few months have passed since the release of Maesh General Availability. During that time we’ve received feedback from you, the community, about use cases you’d like to adopt Maesh for, and we’ve addressed them with this release.","custom_excerpt":"A few months have passed since the release of Maesh General Availability. During that time we’ve received feedback from you, the community, about use cases you’d like to adopt Maesh for, and we’ve addressed them with this release.","visibility":"public","created_at_pretty":"03 March, 2020","published_at_pretty":"March 9, 2020","updated_at_pretty":"22 May, 2020","created_at":"2020-03-03T10:10:36.000+00:00","published_at":"2020-03-09T18:42:45.000+00:00","updated_at":"2020-05-22T00:47:35.000+00:00","meta_title":"Announcing Maesh 1.1. With Helm Version 3 support and more!","meta_description":"Announcing Maesh 1.1. With Helm Version 3 support and more!","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Manuel Zapf","slug":"manuel","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/b_manuel-zapf-foto.1024x1024.png","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Manuel Zapf","slug":"manuel","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/b_manuel-zapf-foto.1024x1024.png","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"With Helm Version 3 support and more!\n\nDuring KubeCon North America 2019 in San Diego, we proudly announced the General\nAvailability for Maesh. Since then, roughly three months have passed. During\nthat time we’ve received feedback from you, the community, about use cases you’d\nlike to adopt Maesh for, and we’ve addressed them with this release.\n\nHelm Version 3 Support\nAs of November 2019, Helm 3 has been released to the public. Maesh's Helm chart\nis now Helm v3 compatible, to benefit from all the changes in the internal\narchitecture of Helm v3. As the internal architecture of Helm 3 changed\nenormously, sadly the change causes breaks, so the current chart is not\ndeployable anymore with Helm 2.\n\nFor more information about Helm 3, please check that link\n[https://helm.sh/blog/helm-3-released/].\n\nApplication Namespace Support\nOne request we received was to install Maesh along with your other services in\nthe same namespace, instead of having Maesh need to run in its own namespace.\nWith that new release, we're now supporting that scenario. You can now easily\ninstall Maesh in the same namespace as your applications which allows for\ngreater flexibility and easier management, especially in multi-tenant Kubernetes\nclusters. However, of course it's also still supported to install it in a\nseparate namespace and share it between all your applications.\n\nPerformance Improvement\nAs our Maesh controllers job is to configure the underlying Traefik pods, it\nneeds to make use of the Kubernetes API to get the current state and create a\nproper configuration. With that release, we reworked the internal architecture\nof the controller to make use of listers instead of plain API queries. As\nlisters are making use of a local cache, this is a huge performance improvement.\nLookups are now made to that cache in milliseconds compared to live HTTP calls,\nthus reducing the load on your Kubernetes API as well.\n\nImproved metrics support\nVersion 1.1 brings support for two new metric backends. Starting now, InfluxDB\n[https://www.influxdata.com/] and StatsD [https://github.com/statsd/statsd] can\nbe configured to receive metrics from Maesh. The possible configuration options\nare best visible in the Helm chart. \nhttps://github.com/containous/maesh/blob/v1.1/helm/chart/maesh/values.yaml\n[https://github.com/dtomcej/maesh/blob/v1.1/helm/chart/maesh/values.yaml]\n\nTraefik Upgrade to 2.1\nLast but not least we also upgraded the underlying Traefik that Maesh uses to\ncreate the service mesh to the current version of 2.1 to stay up to date and\nbenefits from the improvements that is bringing on its own. The full changelog\nfor Traefik 2.1 can be read here \nhttps://containo.us/blog/traefik-2-1-in-the-wild/\n[/blog/traefik-2-1-in-the-wild/]\n\nWhat’s Next\nOnce again, we are thankful for the multitude of contributors that went straight\nahead and added Maesh to their development clusters. You provided us with\ninvaluable and early feedback and made this release possible.\n\nBut, it’s just the beginning! Keep telling us what you like, giving us thoughts\nand ideas, and keep (or start) contributing! Pull requests and Issues are the\nbest way to support the product and make it your own.\n\nUseful links\n * Website [/maesh/]\n * Documentation [https://docs.mae.sh/]\n * Github [https://github.com/containous/maesh]\n * Community Forum [https://community.containo.us/c/maesh]","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">With Helm Version 3 support and more!</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2020/03/Blog-Post-1.png\" class=\"kg-image\"></figure><p>During KubeCon North America 2019 in San Diego, we proudly announced the General Availability for Maesh. Since then, roughly three months have passed. During that time we’ve received feedback from you, the community, about use cases you’d like to adopt Maesh for, and we’ve addressed them with this release.</p><h2 id=\"helm-version-3-support\">Helm Version 3 Support</h2><p>As of November 2019, Helm 3 has been released to the public. Maesh's Helm chart is now Helm v3 compatible, to benefit from all the changes in the internal architecture of Helm v3. As the internal architecture of Helm 3 changed enormously, sadly the change causes breaks, so the current chart is not deployable anymore with Helm 2.</p><p>For more information about Helm 3, <a href=\"https://helm.sh/blog/helm-3-released/\">please check that link</a>.</p><h2 id=\"application-namespace-support\">Application Namespace Support</h2><p>One request we received was to install Maesh along with your other services in the same namespace, instead of having Maesh need to run in its own namespace. With that new release, we're now supporting that scenario. You can now easily install Maesh in the same namespace as your applications which allows for greater flexibility and easier management, especially in multi-tenant Kubernetes clusters. However, of course it's also still supported to install it in a separate namespace and share it between all your applications.</p><h2 id=\"performance-improvement\">Performance Improvement</h2><p>As our Maesh controllers job is to configure the underlying Traefik pods, it needs to make use of the Kubernetes API to get the current state and create a proper configuration. With that release, we reworked the internal architecture of the controller to make use of listers instead of plain API queries. As listers are making use of a local cache, this is a huge performance improvement. Lookups are now made to that cache in milliseconds compared to live HTTP calls, thus reducing the load on your Kubernetes API as well.</p><h2 id=\"improved-metrics-support\">Improved metrics support</h2><p>Version 1.1 brings support for two new metric backends. Starting now,<a href=\"https://www.influxdata.com/\"> InfluxDB</a> and<a href=\"https://github.com/statsd/statsd\"> StatsD</a> can be configured to receive metrics from Maesh. The possible configuration options are best visible in the Helm chart.<a href=\"https://github.com/dtomcej/maesh/blob/v1.1/helm/chart/maesh/values.yaml\"> https://github.com/containous/maesh/blob/v1.1/helm/chart/maesh/values.yaml</a></p><h2 id=\"traefik-upgrade-to-2-1\">Traefik Upgrade to 2.1</h2><p>Last but not least we also upgraded the underlying Traefik that Maesh uses to create the service mesh to the current version of 2.1 to stay up to date and benefits from the improvements that is bringing on its own. The full changelog for Traefik 2.1 can be read here<a href=\"https://containous.ghost.io/blog/traefik-2-1-in-the-wild/\"> https://containo.us/blog/traefik-2-1-in-the-wild/</a></p><h2 id=\"what-s-next\">What’s Next</h2><p>Once again, we are thankful for the multitude of contributors that went straight ahead and added Maesh to their development clusters. You provided us with invaluable and early feedback and made this release possible.</p><p>But, it’s just the beginning! Keep telling us what you like, giving us thoughts and ideas, and keep (or start) contributing! Pull requests and Issues are the best way to support the product and make it your own.</p><h2 id=\"useful-links\">Useful links</h2><ul><li><a href=\"https://containous.ghost.io/maesh/\">Website</a></li><li><a href=\"https://docs.mae.sh/\">Documentation</a></li><li><a href=\"https://github.com/containous/maesh\">Github</a></li><li><a href=\"https://community.containo.us/c/maesh\">Community Forum</a></li></ul>","url":"https://containous.ghost.io/blog/traefik-maesh-1-1/","canonical_url":null,"uuid":"89f93dd3-b298-4e9b-8d8b-0a855eac69bb","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5e5e2d1c3727400038a2fa13","reading_time":2}},{"node":{"id":"Ghost__Post__5e3999aecf5e3c00386bad49","title":"Traefik Enterprise Edition 2","slug":"traefik-enterprise-edition-2","featured":false,"feature_image":"https://containous.ghost.io/content/images/2020/04/TraefikEE2.0-Blog.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/f6c6cb29efa60da530b5d5d7b9b90913/f3583/TraefikEE2.0-Blog.png","srcSet":"/static/f6c6cb29efa60da530b5d5d7b9b90913/630fb/TraefikEE2.0-Blog.png 300w,\n/static/f6c6cb29efa60da530b5d5d7b9b90913/2a4de/TraefikEE2.0-Blog.png 600w,\n/static/f6c6cb29efa60da530b5d5d7b9b90913/f3583/TraefikEE2.0-Blog.png 1200w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"Four months after we launched Traefik V2.0, we're happy to announce that the Enterprise Edition is now available and brings its load of dedicated features!","custom_excerpt":"Four months after we launched Traefik V2.0, we're happy to announce that the Enterprise Edition is now available and brings its load of dedicated features!","visibility":"public","created_at_pretty":"04 February, 2020","published_at_pretty":"February 5, 2020","updated_at_pretty":"21 May, 2020","created_at":"2020-02-04T16:19:58.000+00:00","published_at":"2020-02-05T18:24:20.000+00:00","updated_at":"2020-05-21T18:45:02.000+00:00","meta_title":"Traefik Enterprise Edition 2","meta_description":"Twice The High Availability, Scalability, and Security. We're happy to announce that Traefik Enterprise 2 is now available.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Nicolas Mengin","slug":"nicolas","bio":null,"profile_image":"https://containous.ghost.io/content/images/2020/02/wam.jpeg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Nicolas Mengin","slug":"nicolas","bio":null,"profile_image":"https://containous.ghost.io/content/images/2020/02/wam.jpeg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Twice The High Availability, Scalability, and Security\n\nFour months after we launched Traefik v2.0 [/blog/traefik-2-0-6531ec5196c2/],\nwe're happy to announce that the Enterprise Edition is now available\n[https://info.containo.us/get-traefik-enterprise-edition-free-for-30-days], and\nit is loaded with Enterprise specific features!\n\nOn top of enabling our users to leverage the 2.1 feature set\n[/blog/traefik-2-1-in-the-wild/] (TCP routing, middleware, canary, mirroring,\nenhanced rule syntax, etc.), the Enterprise Edition keeps helping our customers\nto set up highly available, scalable, and distributed systems.\n\nWhat's in TraefikEE 2.0?\nImproved High Availability\nOne of the core values behind Traefik Enterprise Edition is to secure our\ncustomers' infrastructure with a highly available solution. Behind the scenes,\nthis is achieved through the Raft consensus algorithm that allows recovery from\ncomponent failure.\n\nBut we know from experience, that in some extreme scenarios which combine heavy\nnetwork latency, multiple failures, and scheduled operations, the quorum of\nnormal state can be lost.\n\nFor this very reason, with TraefikEE 2.0 we've improved the resilience to a\ntemporary quorum loss, and we've introduced a mechanism to enable the cluster to\nrecover – without any downtime – from a single working instance of the\ncontrollers, and all it takes is a single command line\n[https://docs.containo.us/operating/disaster-recovery/].\n\nLDAP Authentication\nDeploying APIs on your cluster often comes with the necessity to manage\ncredentials, either for your business partners or for your teams. And the more\nAPIs you deploy, the more you engage in microservice architectures, the more API\nmanagement becomes part of your workflow.\n\nWith TraefikEE, we've introduced a way to simplify and centralize authentication\nwith the ability to connect with an LDAP server\n[https://docs.containo.us/middlewares/ldap/].\n\nDeclare users, groups, and credentials in your directory, then have TraefikEE\ndeal with authorization on your behalf.\n\nIn the following example, we're connecting TraefikEE to our LDAP server. Then we\nattach a rule to our service so that only users from the authorized group (with\nthe group id 500) can use our API.\n\n# Static Configuration\nauthSources:\n  mySource:\n    ldap:\n      url: ldap://ldap.server.addr:389\n\n\nversion: '3.4'\nservices:\n  whoami:\n    image: containous/whoami\n    deploy:\n      labels:\n        # Dynamic Configuration\n        - \"traefik.http.routers.whoami.rule=Path(`/whoami`)\"\n        - \"traefik.http.routers.whoami.service=whoami\"\n        - \"traefik.http.services.whoami.loadbalancer.server.port=80\"\n        - \"traefik.http.routers.whoami.middlewares=mymiddleware\"\n        - \"traefik.http.middlewares.mymiddleware.plugin.ldapauth.source=mySource\"\n        - \"traefik.http.middlewares.mymiddleware.plugin.ldapauth.baseDN=dc=example,dc=org\"\n        - \"traefik.http.middlewares.mymiddleware.plugin.ldapAuth.searchFilter=(&(objectClass=inetOrgPerson)(gidNumber=500)(uid=%s))\"\n\n\nCustomization Made Easy\nThe premise with TraefikEE is that you can setup a cluster of Traefik in one\nsingle command line, saving you hours of configuration decisions. But since no\ninfrastructure is the same, some users needed a way to customize many aspects of\ntheir architecture during installation.\n\nTraefikEE 2.0 still comes with a default setup command and it's now possible to\ngenerate a pre-configured manifest before the actual installation. With this\nmanifest, users are able to see every available configuration option and tweak\nevery parameter.\n\nOf course, each manifest is specific to the orchestrator, whether you use Swarm\n[https://docs.containo.us/installing/swarm/] or Kubernetes\n[https://docs.containo.us/installing/kubernetes/].\n\nDynamic TLS Certificates Management\nTraefikEE has always been fully integrated with Let’s Encrypt\n[https://docs.containo.us/operating/acme/], which has enabled many users to\nautomate certificate generation throughout their cluster.\n\nBut operating a cluster with many applications also means you have to deal with\nother certificates, whether in-house or bought separately. For such situations,\nTraefikEE comes with a command line to deploy them dynamically\n[https://docs.containo.us/operating/tls/].\n\nIn the following example, we’re adding a whoami.example.com certificate to the\ncluster.\n\n$ teectl create tls-cert --cert=mycrt.pem --key=mykey.prem\n$ teectl get tls-cert\nID     CN                  SANs  NOT AFTER             STORE    DEFAULT\nu7vxw  whoami.example.com        2022-01-22T15:27:25Z  default  false\n\n\nCLI 2.0\nOperating a Traefik cluster means being able to operate, configure,\nre-configure, stop and start proxies at will, wherever they are hosted in your\ninfrastructure -- and TraefikEE embeds a CLI (teectl\n[https://docs.containo.us/references/cli/teectl/]) for this purpose.\n\nWe saw the command line growing to become the main user interface for\nadministrators, and decided it was time to tweak its grammar for more\nconsistency.\n\nNow (like in Kubernetes), you’ll create, get or delete resources to and from\nyour TraefikEE cluster, like in the previous TLS example.\n\nRedesigned Web UI\nInspired by Traefik, the Web UI allows users to have an overview of their\ncluster's health with just a glance.\n\nThe welcome page contains all the main information. It's the starting point from\nwhich you’ll access all the cluster details.\n\nWhat's Next?\nAs you can see, TraefikEE not only adds a clustering system on top of Traefik,\nbut it contains additional features designed for enterprise and a CLI to operate\nthe cluster.\n\nThere are many benefits you can get from switching to TraefikEE, and the best is\nthat you can test it for yourself and request a free trial license on our\nwebsite\n[https://info.containo.us/get-traefik-enterprise-edition-free-for-30-days] (and\nto make it simple, the TraefikEE configuration is fully compatible with your\nexisting Traefik configuration).\n\nAnd if you still have questions or need help finding a tailored option for your\ninfrastructure, we’ll be happy to discuss it with you, and to help you find the\nbest solution for your use case\n[https://info.containo.us/request-demo-traefikee].\n\nTry it today\n[https://info.containo.us/get-traefik-enterprise-edition-free-for-30-days], and\nbe sure that we'll continue to pack TraefikEE with new features driven by\ncompanies' needs... to make networking boring!","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">Twice The High Availability, Scalability, and Security</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2020/02/Containous-TraefikEE-2-0-1.png\" class=\"kg-image\"></figure><p>Four months after we launched <a href=\"https://containous.ghost.io/blog/traefik-2-0-6531ec5196c2/\">Traefik v2.0</a>, we're happy to announce that the <a href=\"https://info.containo.us/get-traefik-enterprise-edition-free-for-30-days\">Enterprise Edition is now available</a>, and it is loaded with Enterprise specific features!</p><p>On top of enabling our users to leverage the <a href=\"https://containous.ghost.io/blog/traefik-2-1-in-the-wild/\">2.1 feature set</a> (TCP routing, middleware, canary, mirroring, enhanced rule syntax, etc.), the Enterprise Edition keeps helping our customers to set up highly available, scalable, and distributed systems.</p><h2 id=\"what-s-in-traefikee-2-0\"><strong>What's in TraefikEE 2.0?</strong></h2><h3 id=\"improved-high-availability\">Improved High Availability</h3><p>One of the core values behind Traefik Enterprise Edition is to secure our customers' infrastructure with a highly available solution. Behind the scenes, this is achieved through the Raft consensus algorithm that allows recovery from component failure.</p><p>But we know from experience, that in some extreme scenarios which combine heavy network latency, multiple failures, and scheduled operations, the quorum of normal state can be lost.</p><p>For this very reason, with TraefikEE 2.0 we've improved the resilience to a temporary quorum loss, and we've introduced a mechanism to enable the cluster to recover – without any downtime – from a single working instance of the controllers, and all it takes is <a href=\"https://docs.containo.us/operating/disaster-recovery/\">a single command line</a>.</p><h3 id=\"ldap-authentication\"><strong>LDAP Authentication</strong></h3><p>Deploying APIs on your cluster often comes with the necessity to manage credentials, either for your business partners or for your teams. And the more APIs you deploy, the more you engage in microservice architectures, the more API management becomes part of your workflow.</p><p>With TraefikEE, we've introduced a way to simplify and centralize authentication with the ability <a href=\"https://docs.containo.us/middlewares/ldap/\">to connect with an LDAP server</a>.</p><p>Declare users, groups, and credentials in your directory, then have TraefikEE deal with authorization on your behalf.</p><p>In the following example, we're connecting TraefikEE to our LDAP server. Then we attach a rule to our service so that only users from the authorized group (with the group id <strong>500</strong>) can use our API.</p><!--kg-card-begin: markdown--><pre><code class=\"language-yaml\"># Static Configuration\nauthSources:\n  mySource:\n    ldap:\n      url: ldap://ldap.server.addr:389\n</code></pre>\n<pre><code class=\"language-yaml\">version: '3.4'\nservices:\n  whoami:\n    image: containous/whoami\n    deploy:\n      labels:\n        # Dynamic Configuration\n        - &quot;traefik.http.routers.whoami.rule=Path(`/whoami`)&quot;\n        - &quot;traefik.http.routers.whoami.service=whoami&quot;\n        - &quot;traefik.http.services.whoami.loadbalancer.server.port=80&quot;\n        - &quot;traefik.http.routers.whoami.middlewares=mymiddleware&quot;\n        - &quot;traefik.http.middlewares.mymiddleware.plugin.ldapauth.source=mySource&quot;\n        - &quot;traefik.http.middlewares.mymiddleware.plugin.ldapauth.baseDN=dc=example,dc=org&quot;\n        - &quot;traefik.http.middlewares.mymiddleware.plugin.ldapAuth.searchFilter=(&amp;(objectClass=inetOrgPerson)(gidNumber=500)(uid=%s))&quot;\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"customization-made-easy\">Customization Made Easy</h2><p>The premise with TraefikEE is that you can setup a cluster of Traefik in one single command line, saving you hours of configuration decisions. But since no infrastructure is the same, some users needed a way to customize many aspects of their architecture during installation.</p><p>TraefikEE 2.0 still comes with a default setup command and it's now possible to generate a pre-configured manifest before the actual installation. With this manifest, users are able to see every available configuration option and tweak every parameter.</p><p>Of course, each manifest is specific to the orchestrator, whether you use <a href=\"https://docs.containo.us/installing/swarm/\">Swarm</a> or <a href=\"https://docs.containo.us/installing/kubernetes/\">Kubernetes</a>.</p><h2 id=\"dynamic-tls-certificates-management\">Dynamic TLS Certificates Management</h2><p>TraefikEE has always been fully <a href=\"https://docs.containo.us/operating/acme/\">integrated with Let’s Encrypt</a>, which has enabled many users to automate certificate generation throughout their cluster.</p><p>But operating a cluster with many applications also means you have to deal with other certificates, whether in-house or bought separately. For such situations, TraefikEE comes with <a href=\"https://docs.containo.us/operating/tls/\">a command line to deploy them dynamically</a>.</p><p>In the following example, we’re adding a <em>whoami.example.com</em> certificate to the cluster.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ teectl create tls-cert --cert=mycrt.pem --key=mykey.prem\n$ teectl get tls-cert\nID     CN                  SANs  NOT AFTER             STORE    DEFAULT\nu7vxw  whoami.example.com        2022-01-22T15:27:25Z  default  false\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"cli-2-0\"><strong>CLI 2.0</strong></h3><p>Operating a Traefik cluster means being able to operate, configure, re-configure, stop and start proxies at will, wherever they are hosted in your infrastructure -- and TraefikEE embeds a CLI (<a href=\"https://docs.containo.us/references/cli/teectl/\">teectl</a>) for this purpose.</p><p>We saw the command line growing to become the main user interface for administrators, and decided it was time to tweak its grammar for more consistency.</p><p>Now (like in Kubernetes), you’ll create, get or delete resources to and from your TraefikEE cluster, like in the previous TLS example.</p><h3 id=\"redesigned-web-ui\"><strong>Redesigned Web UI</strong></h3><p>Inspired by Traefik, the Web UI allows users to have an overview of their cluster's health with just a glance.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://lh5.googleusercontent.com/ZlLHtYOEgYPOVH-y6BNyG71wYM482AD2RgJRDFnjru0g7MhiXk-Kni8J9LnfagtRmpBzWtsQw8ZERXI2RGAmw8X9_Jo3ElU1KazcPXKvBJBaomqJqIsps-EAFfhl9DTkG1xBzaSh\" class=\"kg-image\" alt=\"TraefikEE Dashboard Overview Page\"></figure><p>The welcome page contains all the main information. It's the starting point from which you’ll access all the cluster details.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://lh5.googleusercontent.com/i_uFx15lA7CuEE9mL4JF0tekprysRoqYjh8sdDIyMg7tgg8qhmXgmVe7ovv90cC3f1G-vcZQ62rESuou6W8LNNuPnJ1WbqiRt857KdDJZGIEppBgON7bliBtrXXgHmRrmoKaJ3nj\" class=\"kg-image\" alt=\"TraefikEE Dashboard HTTP Routers Page\"></figure><h2 id=\"what-s-next\"><strong>What's Next?</strong></h2><p>As you can see, TraefikEE not only adds a clustering system on top of Traefik, but it contains additional features designed for enterprise and a CLI to operate the cluster.</p><p>There are many benefits you can get from switching to TraefikEE, and the best is that you can test it for yourself and <a href=\"https://info.containo.us/get-traefik-enterprise-edition-free-for-30-days\">request a free trial license on our website</a> (and to make it simple, the TraefikEE configuration is fully compatible with your existing Traefik configuration).</p><p>And if you still have questions or need help finding a tailored option for your infrastructure, we’ll be happy to discuss it with you, and to <a href=\"https://info.containo.us/request-demo-traefikee\">help you find the best solution for your use case</a>.</p><p><a href=\"https://info.containo.us/get-traefik-enterprise-edition-free-for-30-days\">Try it today</a>, and be sure that we'll continue to pack TraefikEE with new features driven by companies' needs... to make networking boring!</p>","url":"https://containous.ghost.io/blog/traefik-enterprise-edition-2/","canonical_url":null,"uuid":"a85161ca-fc5a-4734-9739-c0fe0d6a0ded","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5e3999aecf5e3c00386bad49","reading_time":4}},{"node":{"id":"Ghost__Post__5def57371efbbd0038ef55ec","title":"Traefik 2.1","slug":"traefik-2-1-in-the-wild","featured":false,"feature_image":"https://containous.ghost.io/content/images/2020/04/Traefik2.1-Blog.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/9064b05f744a66955ef4f6af07b520d9/f3583/Traefik2.1-Blog.png","srcSet":"/static/9064b05f744a66955ef4f6af07b520d9/630fb/Traefik2.1-Blog.png 300w,\n/static/9064b05f744a66955ef4f6af07b520d9/2a4de/Traefik2.1-Blog.png 600w,\n/static/9064b05f744a66955ef4f6af07b520d9/f3583/Traefik2.1-Blog.png 1200w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"Releases keep coming, but this one feels unique to us because this is our very first release since Traefik 2.0, and we've learned a lot! ","custom_excerpt":"Releases keep coming, but this one feels unique to us because this is our very first release since Traefik 2.0, and we've learned a lot! ","visibility":"public","created_at_pretty":"10 December, 2019","published_at_pretty":"December 12, 2019","updated_at_pretty":"09 April, 2020","created_at":"2019-12-10T08:28:39.000+00:00","published_at":"2019-12-12T13:03:00.000+00:00","updated_at":"2020-04-09T18:36:28.000+00:00","meta_title":"Traefik 2.1 - 2.X in the Wild","meta_description":"This release feels unique to us because this is our very first release since Traefik 2.0! Let's talk about changes introduced in 2.1.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"2.X in the Wild\n\nReleases keep coming, but this one feels unique to us because this is our very\nfirst release since Traefik 2.0, and we've learned a lot! \n\nWe all know it, you all know it: Traefik 2.0 consisted in a fest of new\nfeatures: TCP, middleware, rule syntax, YAML support, CRDs, WebUI, canary,\nmirroring, provider namespaces, new documentation, and many other inconspicuous\nchanges that will help us building the product we love towards greater heights.\n\nAll this was accompanied by tools to help the community seamlessly make the\ntransition: We developed a migration tool\n[https://github.com/containous/traefik-migration-tool],  launched a community\nforum [https://community.containo.us/] to foster good communication and support,\nwrote new tutorials to help people have a fresh start with Traefik\n[/blog/traefik-2-0-docker-101-fc2893944b9d/] (including details about new TLS\noptions [/blog/traefik-2-tls-101-23b4fbee81f1/]), and of course we added a \nmigration guide in our documentation\n[https://docs.traefik.io/migration/v1-to-v2/]. \n\nThanks to the (immense) feedback we got from the community, we know we can do \neven better, and we were given some pointers in the right direction.\n\nBut before we talk about what we've learned and how we'll leverage this\nknowledge, let's talk about the changes introduced in 2.1. \n\nConsul Catalog Is Back!\nGreat news for Consul Catalog fans, Traefik 2.1 brings it back in the list of \nsupported providers\n[https://docs.traefik.io/v2.1/providers/overview/#supported-providers]! (But\nstay on hold because I know for sure that others will follow suit\n[https://github.com/containous/traefik/pull/5899].)\n\nImproving the CRD\nStickiness\nThe stickiness option is the ability for a load balancer to keep using the same\ntarget for a client once it has been sent to one. This option is now available\nfor our CRD users!\n\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: myName\n  namespace: myNamespace\nspec:\n  entryPoints:\n  - web\n  routes:\n  - kind: Rule\n    match: Host(`some-domain`)\n    services:\n    - kind: Service\n      name: myService\n      namespace: myNamespace\n      port: 80\n      sticky:\n        cookie: {} # Once a pod is selected for a client, it will stay the same for future calls\n\nService Load Balancing & Mirroring\nIntroduced in 2.0, service load balancing and mirroring were previously\nexclusively configurable using the file provider\n[https://docs.traefik.io/v2.0/providers/file/]. With 2.1 and the introduction of\nthe TraefikService object, we leveraged Traefik's CRD to enable such\nconfiguration in Kubernetes, and here is a first example with mirroring:\n\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: my-route-to-mirroring\n  namespace: default\n\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`some-domain`) && PathPrefix(`/some/path`)\n    kind: Rule\n    services:\n    - name: mirroring-example #targets the mirroring-example service\n      namespace: default\n      kind: TraefikService # we want to target the TraefikService we've declared (and not a K8S service named mirroring-example)\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: TraefikService\nmetadata:\n  name: mirroring-example\n  namespace: default\nspec:\n  mirroring:\n    name: v1 #sends 100% of the requests to the K8S service \"v1\" ...\n    mirrors:\n      - name: v2 # ... and sends a copy of 10% of the requests to v2\n        percent: 10\n        port: 80\n\nFor our second example, let's see how we could use service load balancing to do\ncanary deployments:\n\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: my-route-to-canary\n  namespace: default\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`some-domain`) && PathPrefix(`/some/path`)\n    kind: Rule\n    services:\n    - name: mirror1\n      namespace: default\n      kind: TraefikService\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: TraefikService\nmetadata:\n  name: canary-example\n  namespace: default\n\nspec:\n  weighted:\n    services:\n      - name: v1\n        weight: 80\n        port: 80\n      - name: v2\n        weight: 20\n        port: 80\n\nWe can now change the weight for each service (v1 and v2) at will!\n\nMixing Regular (Kubernetes) Services with TraefikServices\nWhen you define a target (with the name attribute) for your IngressRoute, by\ndefault, it targets a regular Service. If you want to target the new \nTraefikService objects, you just specify the kind attribute. What's great with\nthis system is that you can chain and combine them at will, creating intricate\npatterns depending on your needs.\n\nBelow is an example that leverages both services and TraefikServices, and that\nuses mirroring and service load balancing at the same time!\n\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: route-to-mirroring\n  namespace: default\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`some-domain`) && PathPrefix(`/some/path`)\n    kind: Rule\n    services:\n    - name: mirroring-example\n      namespace: default\n      kind: TraefikService\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: TraefikService\nmetadata:\n  name: mirroring-example\n  namespace: default\nspec:\n  mirroring:\n    name: canary-example\n    kind: TraefikService\n    mirrors:\n      - name: service-mirror\n        percent: 20\n        port: 80\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: TraefikService\nmetadata:\n  name: canary-example\n  namespace: default\nspec:\n  weighted:\n    services:\n      - name: v1\n        port: 80\n        weight: 80\n      - name: v2\n        weight: 20\n        port: 80\n\nNote on Updating the CRD for 2.1\nWhile updating an installation to v2.1, it is required to apply the new CRD and\nto enhance the existing ClusterRoledefinition. You will find out how in the \nfollowing guide [https://docs.traefik.io/migration/v2/].\n\nMore Control On Internal Routing\nIn 2.0, we've made changes to make sure people would be able to properly secure\nsome critical services offered by Traefik, like the API and the Dashboard (you\ncan see an example in our Traefik & Docker 101 article\n[/blog/traefik-2-0-docker-101-fc2893944b9d/]).\n\nPursuing the ability to configure internal services further while always giving\nusers more control, the 2.1 dashboard now shows the internal routers and\nservices involved.\n\nShows the internal services for the API and the DashboardShows the internal\nrouters leading to the internal API and Dashboard services (when users don't\nexplicitly configure them)We also jumped on the opportunity to add other\nconfigurable services to the list, namely rest@internal, ping@internal, and \nprometheus@internal. \n\n\n--------------------------------------------------------------------------------\n\nMigrating to 2.X Made Easy\nWith so many new options to customize Traefik to your every need, we understand\nthat some people can be a bit lost when migrating to 2.x, especially since\nTraefik is the kind of software that you run and forget (because it works nights\nand days without any other intervention from its users).\n\n> We have been working really hard to make this migration a matter of minutes.\nSo, if you're thinking about migrating but haven't jumped on the task yet, we\nwant to point you in the right direction:\n\n * This guide [/blog/traefik-2-0-docker-101-fc2893944b9d/] helps you truly\n   understand how Traefik 2 works on a Docker setup and will show you that 5\n   minutes are enough to have a good grasp of what you can do with it.\n * If you're looking for information about how to configure HTTPS / TLS, we\n   have\n   you covered with this guide [/blog/traefik-2-tls-101-23b4fbee81f1/]!\n * If you don't want to lose time converting your Ingress objects in Kubernetes\n   (who would want that?), we've developed a migration tool\n   [https://github.com/containous/traefik-migration-tool] that will handle it\n   for you.\n * Same goes with your traefik.toml file: the migration tool\n   [https://github.com/containous/traefik-migration-tool] can convert it for\n   you.\n * Oh, and the migration tool\n   [https://github.com/containous/traefik-migration-tool] can also convert your \n   acme.json certificate file.\n * And always feel free to engage conversation in our community forum\n   [https://community.containo.us], we read everything and do our best to\n   provide answers when we can.\n\n\n--------------------------------------------------------------------------------\n\nSupporting the 1.X Branch for Two Years!\nOur community matters, and we don't want our users to feel rushed to migrate to\nversion 2. We prefer seeing people slowly falling in love with the new tools\nTraefik has to offer and migrate. For this reason, we've decided to extend the\nsupport of the 1.X version until the end of 2021. \n\nThat's right: you have two years ahead of you before you need to make the leap!\n(And we believe you'll find benefits in migrating to 2.X way before that.)\n\n\n--------------------------------------------------------------------------------\n\nNext? Focusing on the User Experience\nIn the introduction, we've stated that we received (and are still receiving) a\nlot of feedback about 2.0. And let me tell you:\n\n> We listen\nApart from bringing extra features in the next release (like UDP, HTTP/3,\nKey-Value Stores, and the list goes on ...), we want to focus this release on\nthe user experience.\n\nNow that we've seen people massively use Traefik 2, we decided it's time to work\non making powerful features simpler to configure, or at least ... less verbose. \n\nSo, let's work together on making it happen! Come and raise your voice in the \nissue tracker [https://github.com/containous/traefik/issues], on the community\nforum [https://community.containo.us], or better—pull request\n[https://github.com/containous/traefik/pulls] your way into making Traefik a\nbetter tool for everyone.\n\nSee you around, and happy Traefik!","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">2.X in the Wild</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2019/12/traefik-cantal-flat.png\" class=\"kg-image\"></figure><p>Releases keep coming, but this one feels unique to us because this is our very first release since Traefik 2.0, and we've learned a lot! </p><p>We all know it, <em>you</em> all know it: Traefik 2.0 consisted in a fest of new features: TCP, middleware, rule syntax, YAML support, CRDs, WebUI, canary, mirroring, provider namespaces, new documentation, and many other inconspicuous changes that will help us building the product we love towards greater heights.</p><p>All this was accompanied by tools to help the community seamlessly make the transition: We developed a <a href=\"https://github.com/containous/traefik-migration-tool\">migration tool</a>,  launched a <a href=\"https://community.containo.us/\">community forum</a> to foster good communication and support, wrote new tutorials to help people have a <a href=\"https://containous.ghost.io/blog/traefik-2-0-docker-101-fc2893944b9d/\">fresh start with Traefik</a> (including <a href=\"https://containous.ghost.io/blog/traefik-2-tls-101-23b4fbee81f1/\">details about new TLS options</a>), and of course we added a <a href=\"https://docs.traefik.io/migration/v1-to-v2/\">migration guide in our documentation</a>. </p><p>Thanks to the (immense) feedback we got from the community, we know we can do <em>even</em> better, and we were given some pointers in the right direction.</p><p>But before we talk about what we've learned and how we'll leverage this knowledge, let's talk about the changes introduced in 2.1. </p><h2 id=\"consul-catalog-is-back-\">Consul Catalog Is Back!</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/12/consul-catalog.png\" class=\"kg-image\"></figure><p>Great news for Consul Catalog fans, Traefik 2.1 brings it back in the list of <a href=\"https://docs.traefik.io/v2.1/providers/overview/#supported-providers\">supported providers</a>! (But stay on hold because I know for sure that <a href=\"https://github.com/containous/traefik/pull/5899\">others will follow suit</a>.)</p><h2 id=\"improving-the-crd\">Improving the CRD</h2><h3 id=\"stickiness\">Stickiness</h3><p>The stickiness option is the ability for a load balancer to keep using the same target for a client once it has been sent to one. This option is now available for our CRD users!</p><pre><code class=\"language-yaml\">apiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: myName\n  namespace: myNamespace\nspec:\n  entryPoints:\n  - web\n  routes:\n  - kind: Rule\n    match: Host(`some-domain`)\n    services:\n    - kind: Service\n      name: myService\n      namespace: myNamespace\n      port: 80\n      sticky:\n        cookie: {} # Once a pod is selected for a client, it will stay the same for future calls</code></pre><h3 id=\"service-load-balancing-mirroring\">Service Load Balancing &amp; Mirroring</h3><p>Introduced in 2.0, service load balancing and mirroring were previously exclusively configurable using the <a href=\"https://docs.traefik.io/v2.0/providers/file/\">file provider</a>. With 2.1 and the introduction of the <code>TraefikService</code> object, we leveraged Traefik's CRD to enable such configuration in Kubernetes, and here is a first example with mirroring:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/12/image-18.png\" class=\"kg-image\"></figure><pre><code class=\"language-yaml\">apiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: my-route-to-mirroring\n  namespace: default\n\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`some-domain`) &amp;&amp; PathPrefix(`/some/path`)\n    kind: Rule\n    services:\n    - name: mirroring-example #targets the mirroring-example service\n      namespace: default\n      kind: TraefikService # we want to target the TraefikService we've declared (and not a K8S service named mirroring-example)\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: TraefikService\nmetadata:\n  name: mirroring-example\n  namespace: default\nspec:\n  mirroring:\n    name: v1 #sends 100% of the requests to the K8S service \"v1\" ...\n    mirrors:\n      - name: v2 # ... and sends a copy of 10% of the requests to v2\n        percent: 10\n        port: 80</code></pre><p>For our second example, let's see how we could use service load balancing to do canary deployments:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/12/image-19.png\" class=\"kg-image\"></figure><pre><code class=\"language-yaml\">apiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: my-route-to-canary\n  namespace: default\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`some-domain`) &amp;&amp; PathPrefix(`/some/path`)\n    kind: Rule\n    services:\n    - name: mirror1\n      namespace: default\n      kind: TraefikService\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: TraefikService\nmetadata:\n  name: canary-example\n  namespace: default\n\nspec:\n  weighted:\n    services:\n      - name: v1\n        weight: 80\n        port: 80\n      - name: v2\n        weight: 20\n        port: 80</code></pre><p>We can now change the weight for each service (v1 and v2) at will!</p><h3 id=\"mixing-regular-kubernetes-services-with-traefikservices\">Mixing Regular (Kubernetes) Services with TraefikServices</h3><p>When you define a target (with the <code>name</code> attribute) for your <code>IngressRoute</code>, by default, it targets a regular <code>Service</code>. If you want to target the new <code>TraefikService</code> objects, you just specify the <code>kind</code> attribute. What's great with this system is that you can chain and combine them at will, creating intricate patterns depending on your needs.</p><p>Below is an example that leverages both services and <code>TraefikServices</code>, and that uses mirroring and service load balancing at the same time!</p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/12/canary-and-mirroring.png\" class=\"kg-image\"></figure><pre><code class=\"language-yaml\">apiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: route-to-mirroring\n  namespace: default\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`some-domain`) &amp;&amp; PathPrefix(`/some/path`)\n    kind: Rule\n    services:\n    - name: mirroring-example\n      namespace: default\n      kind: TraefikService\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: TraefikService\nmetadata:\n  name: mirroring-example\n  namespace: default\nspec:\n  mirroring:\n    name: canary-example\n    kind: TraefikService\n    mirrors:\n      - name: service-mirror\n        percent: 20\n        port: 80\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: TraefikService\nmetadata:\n  name: canary-example\n  namespace: default\nspec:\n  weighted:\n    services:\n      - name: v1\n        port: 80\n        weight: 80\n      - name: v2\n        weight: 20\n        port: 80</code></pre><h3 id=\"note-on-updating-the-crd-for-2-1\">Note on Updating the CRD for 2.1</h3><p>While updating an installation to v2.1, it is required to apply the new CRD and to enhance the existing <code>ClusterRole</code>definition. You will find out how in the <a href=\"https://docs.traefik.io/migration/v2/\">following guide</a>.</p><h2 id=\"more-control-on-internal-routing\">More Control On Internal Routing</h2><p>In 2.0, we've made changes to make sure people would be able to properly secure some critical services offered by Traefik, like the API and the Dashboard (you can see an example in our <a href=\"https://containous.ghost.io/blog/traefik-2-0-docker-101-fc2893944b9d/\">Traefik &amp; Docker 101 article</a>).</p><p>Pursuing the ability to configure internal services further while always giving users more control, the 2.1 dashboard now shows the internal routers and services involved.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://containous.ghost.io/content/images/2019/12/Screenshot_2019-12-10-Traefik.png\" class=\"kg-image\"><figcaption>Shows the internal services for the API and the Dashboard</figcaption></figure><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://containous.ghost.io/content/images/2019/12/Screenshot_2019-12-10-Traefik-1-.png\" class=\"kg-image\"><figcaption>Shows the internal routers leading to the internal API and Dashboard services (when users don't explicitly configure them)</figcaption></figure><p>We also jumped on the opportunity to add other configurable services to the list, namely <code>rest@internal</code>, <code>ping@internal</code>, and <code>prometheus@internal</code>. </p><hr><h2 id=\"migrating-to-2-x-made-easy\">Migrating to 2.X Made Easy</h2><p>With so many new options to customize Traefik to your every need, we understand that some people can be a bit lost when migrating to 2.x, especially since Traefik is the kind of software that you run and forget (because it works nights and days without any other intervention from its users).</p><blockquote>We have been working really hard to make this migration a matter of minutes.</blockquote><p>So, if you're thinking about migrating but haven't jumped on the task yet, we want to point you in the right direction:</p><ul><li><a href=\"https://containous.ghost.io/blog/traefik-2-0-docker-101-fc2893944b9d/\">This guide</a> helps you truly understand how Traefik 2 works on a Docker setup and will show you that 5 minutes are enough to have a good grasp of what you can do with it.</li><li>If you're looking for information about how to configure HTTPS / TLS, <a href=\"https://containous.ghost.io/blog/traefik-2-tls-101-23b4fbee81f1/\">we have you covered with this guide</a>!</li><li>If you don't want to lose time converting your Ingress objects in Kubernetes (who would want that?), we've developed a <a href=\"https://github.com/containous/traefik-migration-tool\">migration tool</a> that will handle it for you.</li><li>Same goes with your <code>traefik.toml</code> file: the <a href=\"https://github.com/containous/traefik-migration-tool\">migration tool</a> can convert it for you.</li><li>Oh, and the <a href=\"https://github.com/containous/traefik-migration-tool\">migration tool</a> can also convert your <code>acme.json</code> certificate file.</li><li>And always feel free to engage conversation in our <a href=\"https://community.containo.us\">community forum</a>, we read <em>everything</em> and do our best to provide answers when we can.</li></ul><hr><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/12/2-year-warranty.jpg\" class=\"kg-image\"></figure><h2 id=\"supporting-the-1-x-branch-for-two-years-\">Supporting the 1.X Branch for Two Years!</h2><p>Our community matters, and we don't want our users to feel rushed to migrate to version 2. We prefer seeing people slowly falling in love with the new tools Traefik has to offer and migrate. For this reason, we've decided to extend the support of the 1.X version until the end of 2021. </p><p>That's right: you have <strong>two years</strong> ahead of you before you need to make the leap! (And we believe you'll find benefits in migrating to 2.X <em>way</em> <em>before</em> that.)</p><hr><h2 id=\"next-focusing-on-the-user-experience\">Next? Focusing on the User Experience</h2><p>In the introduction, we've stated that we received (and are still receiving) a lot of feedback about 2.0. And let me tell you:</p><blockquote>We listen</blockquote><p>Apart from bringing extra features in the next release (like UDP, HTTP/3, Key-Value Stores, and the list goes on ...), we want to focus this release on the user experience.</p><p>Now that we've seen people massively use Traefik 2, we decided it's time to work on making powerful features simpler to configure, or at least ... less verbose. </p><p>So, let's work together on making it happen! Come and raise your voice in the <a href=\"https://github.com/containous/traefik/issues\">issue tracker</a>, on the <a href=\"https://community.containo.us\">community forum</a>, or better—<a href=\"https://github.com/containous/traefik/pulls\">pull request</a> your way into making Traefik a better tool for everyone.</p><p>See you around, and happy Traefik!</p>","url":"https://containous.ghost.io/blog/traefik-2-1-in-the-wild/","canonical_url":null,"uuid":"d345bdcc-6cf7-4811-a78d-505391119b8a","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5def57371efbbd0038ef55ec","reading_time":6}},{"node":{"id":"Ghost__Post__5dd68f68b6de2b00381d3f6b","title":"Maesh 1.0","slug":"maesh-1-0-802f4be9a9a7","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/11/maesh-1.0.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/b00e1a35700706f1ce67f13a71d0d148/f3583/maesh-1.0.png","srcSet":"/static/b00e1a35700706f1ce67f13a71d0d148/630fb/maesh-1.0.png 300w,\n/static/b00e1a35700706f1ce67f13a71d0d148/2a4de/maesh-1.0.png 600w,\n/static/b00e1a35700706f1ce67f13a71d0d148/f3583/maesh-1.0.png 1200w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"Maesh allows for visibility and management of the traffic that flows inside your Kubernetes cluster, which is just as important as the ingress and egress traffic.","custom_excerpt":"Maesh allows for visibility and management of the traffic that flows inside your Kubernetes cluster, which is just as important as the ingress and egress traffic.","visibility":"public","created_at_pretty":"21 November, 2019","published_at_pretty":"November 21, 2019","updated_at_pretty":"22 May, 2020","created_at":"2019-11-21T13:21:44.000+00:00","published_at":"2019-11-21T13:21:00.000+00:00","updated_at":"2020-05-22T00:21:18.000+00:00","meta_title":"Maesh 1.0","meta_description":"Maesh allows for visibility and management of the traffic that flows inside your Kubernetes cluster.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Manuel Zapf","slug":"manuel","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/b_manuel-zapf-foto.1024x1024.png","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Manuel Zapf","slug":"manuel","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/b_manuel-zapf-foto.1024x1024.png","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Simpler Service Mesh, Now Production Ready\n\nThree months ago (in September 2019) we were proud to unleash Maesh\n[/blog/announcing-maesh-a-lightweight-and-simpler-service-mesh-made-by-the-traefik-team-cb866edc6f29/]\n, the simpler service mesh. With so many tools already available on the market,\nwe couldn’t wait to see how the community would react to our vision of the\nconcept.\n\nThe answer is — incredibly well. In less than a month, Maesh had gathered a\ncommunity of people that adopted it right from the start on their development\ncluster. These brave early adopters provided us with invaluable insights about\nvarious cluster configurations and shed light on possible improvements. We\nlistened the best we could, helped them contribute to the project, fixed what\nhad to be fixed, and we’re now contemplating the result of this common effort — \nMaesh 1.0\n\nWhat is Maesh?\nMaesh allows for visibility and management of the traffic that flows inside your\nKubernetes cluster, which is just as important as the ingress and egress\ntraffic. Maesh is designed from the ground up to be straightforward, easy to\ninstall, and easy to use.\n\nBuilt on top of Traefik, Maesh is a simple, yet full-featured service mesh. It\nfits as your de-facto service mesh in your Kubernetes cluster and supports the\nlatest Service Mesh Interface specification (SMI [https://smi-spec.io/]) that\nfacilitates integration with pre-existing solutions. Maesh is opt-in by default,\nwhich means that your existing services are unaffected until you decide to add\nthem to the mesh.\n\nMaesh does not use any sidecar container but handles routing through proxy\nendpoints running on each node. Not using sidecars means that Maesh does not\nmodify your Kubernetes objects, and does not modify your traffic without your\nknowledge. Using the Maesh endpoints is all that is required.\n\nWhat’s New since the Alpha?\nPerformance Improvements\nBased on feedback, we started to rework the inner architecture of Maesh to\nimprove performance and stability. In particular, we made the Maesh controller\nstateless (again) and refactored the internal architecture used to refresh the\nconfiguration. As a result Maesh reacts faster and is more resilient to changes.\nTo make it easier to customize, plenty of options\n[https://github.com/containous/maesh/blob/master/helm/chart/maesh/values.yaml] \nare now configurable (namespaces, the cluster domain, …).\n\nGKE Support\nMany of our early adopters tried to install Maesh (alpha) on GKE with no\nsuccess. The reason was that Maesh relied on CoreDNS to opt-in into the usage of\nthe internal mesh and that GKE doesn’t embed it.\n\nAs a result and to support GKE and distributions that do not ship with CoreDNS,\nwe’ve added support for kube-dns.\n\nFor Maesh 1.0, we’ve tested many distributions but couldn’t test every one of\nthem. If your favorite appears to be unsupported, please raise your voice and\nhelp us fixing that!\n\nSupport for the SMI TCPRoute\nMaesh supported the SMI HTTP part from the beginning, and now supports the TCP\nportion as well. (Bellow is an example of an SMI TCPRoute.)\n\nkind: TrafficTarget\napiVersion: access.smi-spec.io/v1alpha1\nmetadata:\n  name: api-service-target\n  namespace: default\ndestination:\n  kind: ServiceAccount\n  name: api-service\n  namespace: default\nspecs:\n- kind: TCPRoute\n  name: my-tcp-route\nsources:\n- kind: ServiceAccount\n  name: my-other-service\n  namespace: default\n---\napiVersion: specs.smi-spec.io/v1alpha1\nkind: TCPRoute\nmetadata:\n  name: my-tcp-route\n\nkind: TrafficTarget\napiVersion: access.smi-spec.io/v1alpha1\nmetadata:\n  name: api-service-target\n  namespace: default\ndestination:\n  kind: ServiceAccount\n  name: api-service\n  namespace: default\nspecs:\n- kind: TCPRoute\n  name: my-tcp-route\nsources:\n- kind: ServiceAccount\n  name: my-other-service\n  namespace: default\n---\napiVersion: specs.smi-spec.io/v1alpha1\nkind: TCPRoute\nmetadata:\n  name: my-tcp-route\n\n\n\n--------------------------------------------------------------------------------\n\nWhat’s Next\nOnce again, we are thankful for the multitude of contributors that went straight\nahead and added Maesh to their development clusters. You provided us with\ninvaluable and early feedback and made this release possible.\n\nBut it’s just the beginning! Keep telling us what you like, giving us thoughts\nand ideas, and keep (or start) contributing! Pull requests and Issues are the\nbest way to support the product and make it your own.\n\nUseful links\n * Website [/maesh/]\n * Documentation [https://docs.mae.sh/]\n * Github [https://github.com/containous/maesh]\n * Community Forum [https://community.containo.us/c/maesh]","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">Simpler Service Mesh, Now Production Ready</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2019/11/1_iap46n1HJlw_lNotg3MtzA.png\" class=\"kg-image\"></figure><p>Three months ago (in September 2019) we were <a href=\"https://containous.ghost.io/blog/announcing-maesh-a-lightweight-and-simpler-service-mesh-made-by-the-traefik-team-cb866edc6f29/\">proud to unleash Maesh</a>, the simpler service mesh. With so many tools already available on the market, we couldn’t wait to see how the community would react to our vision of the concept.</p><p>The answer is — incredibly well. In less than a month, Maesh had gathered a community of people that adopted it right from the start on their development cluster. These brave early adopters provided us with invaluable insights about various cluster configurations and shed light on possible improvements. We listened the best we could, helped them contribute to the project, fixed what had to be fixed, and we’re now contemplating the result of this common effort — <strong><strong>Maesh 1.0</strong></strong></p><h2 id=\"what-is-maesh\">What is Maesh?</h2><p>Maesh allows for visibility and management of the traffic that flows inside your Kubernetes cluster, which is just as important as the ingress and egress traffic. Maesh is designed from the ground up to be straightforward, easy to install, and easy to use.</p><p>Built on top of Traefik, Maesh is a simple, yet full-featured service mesh. It fits as your de-facto service mesh in your Kubernetes cluster and supports the latest Service Mesh Interface specification (<a href=\"https://smi-spec.io/\" rel=\"noopener\">SMI</a>) that facilitates integration with pre-existing solutions. Maesh is opt-in by default, which means that your existing services are unaffected until you decide to add them to the mesh.</p><p>Maesh does not use any sidecar container but handles routing through proxy endpoints running on each node. Not using sidecars means that Maesh does not modify your Kubernetes objects, and does not modify your traffic without your knowledge. Using the Maesh endpoints is all that is required.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-20.png\" class=\"kg-image\"></figure><h2 id=\"what-s-new-since-the-alpha\">What’s New since the Alpha?</h2><h3 id=\"performance-improvements\">Performance Improvements</h3><p>Based on feedback, we started to rework the inner architecture of Maesh to improve performance and stability. In particular, we made the Maesh controller stateless (again) and refactored the internal architecture used to refresh the configuration. As a result Maesh reacts faster and is more resilient to changes. To make it easier to customize, <a href=\"https://github.com/containous/maesh/blob/master/helm/chart/maesh/values.yaml\" rel=\"noopener\">plenty of options</a> are now configurable (namespaces, the cluster domain, …).</p><h3 id=\"gke-support\">GKE Support</h3><p>Many of our early adopters tried to install Maesh (alpha) on GKE with no success. The reason was that Maesh relied on CoreDNS to opt-in into the usage of the internal mesh and that GKE doesn’t embed it.</p><p>As a result and to support GKE and distributions that do not ship with CoreDNS, we’ve added support for kube-dns.</p><p>For Maesh 1.0, we’ve tested many distributions but couldn’t test every one of them. If your favorite appears to be unsupported, please raise your voice and help us fixing that!</p><h3 id=\"support-for-the-smi-tcproute\">Support for the SMI TCPRoute</h3><p>Maesh supported the SMI HTTP part from the beginning, and now supports the TCP portion as well. (Bellow is an example of an SMI TCPRoute.)</p><pre><code class=\"language-yaml\">kind: TrafficTarget\napiVersion: access.smi-spec.io/v1alpha1\nmetadata:\n  name: api-service-target\n  namespace: default\ndestination:\n  kind: ServiceAccount\n  name: api-service\n  namespace: default\nspecs:\n- kind: TCPRoute\n  name: my-tcp-route\nsources:\n- kind: ServiceAccount\n  name: my-other-service\n  namespace: default\n---\napiVersion: specs.smi-spec.io/v1alpha1\nkind: TCPRoute\nmetadata:\n  name: my-tcp-route</code></pre><!--kg-card-begin: markdown--><pre><code>kind: TrafficTarget\napiVersion: access.smi-spec.io/v1alpha1\nmetadata:\n  name: api-service-target\n  namespace: default\ndestination:\n  kind: ServiceAccount\n  name: api-service\n  namespace: default\nspecs:\n- kind: TCPRoute\n  name: my-tcp-route\nsources:\n- kind: ServiceAccount\n  name: my-other-service\n  namespace: default\n---\napiVersion: specs.smi-spec.io/v1alpha1\nkind: TCPRoute\nmetadata:\n  name: my-tcp-route\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"what-s-next\">What’s Next</h2><p>Once again, we are thankful for the multitude of contributors that went straight ahead and added Maesh to their development clusters. You provided us with invaluable and early feedback and made this release possible.</p><p>But it’s just the beginning! Keep telling us what you like, giving us thoughts and ideas, and keep (or start) contributing! Pull requests and Issues are the best way to support the product and make it your own.</p><h2 id=\"useful-links\">Useful links</h2><ul><li><a href=\"https://containous.ghost.io/maesh/\">Website</a></li><li><a href=\"https://docs.mae.sh/\">Documentation</a></li><li><a href=\"https://github.com/containous/maesh\" rel=\"noopener\">Github</a></li><li><a href=\"https://community.containo.us/c/maesh\" rel=\"noopener\">Community Forum</a></li></ul>","url":"https://containous.ghost.io/blog/maesh-1-0-802f4be9a9a7/","canonical_url":null,"uuid":"c50521f7-f849-4c76-a75f-3cb3067a6de6","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dd68f68b6de2b00381d3f6b","reading_time":3}},{"node":{"id":"Ghost__Post__5dcc44711127150038885824","title":"Traefik Enterprise Edition 1.2 is out!","slug":"traefik-enterprise-edition-1-2-is-out-2ba37e22983c","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/11/traefikee-v1.2.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/cc689a5812614192721fe6084b77347f/f3583/traefikee-v1.2.png","srcSet":"/static/cc689a5812614192721fe6084b77347f/630fb/traefikee-v1.2.png 300w,\n/static/cc689a5812614192721fe6084b77347f/2a4de/traefikee-v1.2.png 600w,\n/static/cc689a5812614192721fe6084b77347f/f3583/traefikee-v1.2.png 1200w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"Today, we’re happy to announce the availability of TraefikEE 1.2. This minor version was driven by customers feedback, and keeps improving...","custom_excerpt":"Today, we’re happy to announce the availability of TraefikEE 1.2. This minor version was driven by customers feedback, and keeps improving...","visibility":"public","created_at_pretty":"12 November, 2019","published_at_pretty":"October 15, 2019","updated_at_pretty":"21 May, 2020","created_at":"2019-11-12T20:56:37.000+00:00","published_at":"2019-10-15T20:57:00.000+00:00","updated_at":"2020-05-21T21:40:25.000+00:00","meta_title":"Traefik Enterprise Edition 1.2 is out!","meta_description":"Today, we’re happy to announce the availability of TraefikEE 1.2. This minor version was driven by customers feedback, and keeps improving...","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Brendan LE GLAUNEC","slug":"brendan","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/NewAvatar.png","twitter":null,"facebook":null,"website":"https://github.com/Ullaakut"}],"primary_author":{"name":"Brendan LE GLAUNEC","slug":"brendan","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/NewAvatar.png","twitter":null,"facebook":null,"website":"https://github.com/Ullaakut"},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"With OpenShift compatibility, more distributed features, improved operations,\nand more.\n\nToday, we’re happy to announce the availability of TraefikEE 1.2. This minor\nversion was driven by customers feedback, and keeps improving clustering\nfeatures while adding support for more platforms.\n\n> Traefik Enterprise Edition is a platform built on top of Traefik, designed for\nbusiness-critical deployments. It adds clustering features to satisfy the needs\nof enterprise customers.\nOpenShift Compatibility\nBecause Traefik has always been about compatibility with every platform,\nTraefikEE follows the same path and is now OpenShift\n[https://www.openshift.com/learn/what-is-openshift] ready! We’re also actively\nworking with RedHat on the certification process.\n\nWith this new step, we keep giving our customers more choices for their\ninfrastructure.\n\nDistributed features\nThanks to its clustered architecture, TraefikEE allowed us to provide\ndistributed rate limiting, and 1.2 introduces distributed connection limiting.\n\nThe goal of these distributed features is to keep the configuration simple, yet\nscalable. Whatever the number of data planes you’ve deployed, the configuration\nstays the same — even with hundreds of Traefik instances on your cluster, your\nbackend will only receive the given number of simultaneous requests.\n\nOperations\nACME\nA small tweak that makes administrators’ day easier, the traefikee and \ntraefikeectl CLIs now allow users to list the certificates within their\nclusters, and they’re also able to add ACME accounts directly from TraefikEE\nbackup files.\n\nInstallation on DockerEE\nThe whole installation of TraefikEE can now be done using the traefikeectl tool,\nas opposed to having to manually deploy compose files\n[https://docs.containo.us/installing/advanced/swarm-compose/n-cn/] in the\nversion 1.1. This makes it much more convenient as well as much faster to\ninstall. Take a look at the documentation for more information on DockerEE\ninstalls [https://docs.containo.us/integrating/dockeree/].\n\nWhat’s next?\nThe next logical step will be to integrate Traefik 2.0 into TraefikEE and bring\nwith it every feature… and hopefully much more!\n\nTry it now!\nGet a free one month trial\n[https://info.containo.us/get-traefik-enterprise-edition-free-for-30-days] right\nnow, and install TraefikEE on your favorite environment by following the \ninstallation guides [https://docs.containo.us/v1.2/].","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">With OpenShift compatibility, more distributed features, improved operations, and more.</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-105.png\" class=\"kg-image\"></figure><p>Today, we’re happy to announce the availability of TraefikEE 1.2. This minor version was driven by customers feedback, and keeps improving clustering features while adding support for more platforms.</p><blockquote>Traefik Enterprise Edition is a platform built on top of Traefik, designed for business-critical deployments. It adds clustering features to satisfy the needs of enterprise customers.</blockquote><h2 id=\"openshift-compatibility\">OpenShift Compatibility</h2><p>Because Traefik has always been about compatibility with every platform, TraefikEE follows the same path and is now <a href=\"https://www.openshift.com/learn/what-is-openshift\" rel=\"noopener nofollow\">OpenShift</a> ready! We’re also actively working with RedHat on the certification process.</p><p>With this new step, we keep giving our customers more choices for their infrastructure.</p><h2 id=\"distributed-features\">Distributed features</h2><p>Thanks to its clustered architecture, TraefikEE allowed us to provide distributed rate limiting, and 1.2 introduces distributed connection limiting.</p><p>The goal of these distributed features is to keep the configuration simple, yet scalable. Whatever the number of data planes you’ve deployed, the configuration stays the same — even with hundreds of Traefik instances on your cluster, your backend will only receive the given number of simultaneous requests.</p><h2 id=\"operations\">Operations</h2><h3 id=\"acme\">ACME</h3><p>A small tweak that makes administrators’ day easier, the <code>traefikee</code> and <code>traefikeectl</code> CLIs now allow users to list the certificates within their clusters, and they’re also able to add ACME accounts directly from TraefikEE backup files.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-1.png\" class=\"kg-image\"></figure><h3 id=\"installation-on-dockeree\">Installation on DockerEE</h3><p>The whole installation of TraefikEE can now be done using the <code>traefikeectl</code> tool, as opposed to having to <a href=\"https://docs.containo.us/installing/advanced/swarm-compose/n-cn/\" rel=\"noopener nofollow\">manually deploy compose files</a> in the version 1.1. This makes it much more convenient as well as much faster to install. Take a look at the documentation for <a href=\"https://docs.containo.us/integrating/dockeree/\" rel=\"noopener nofollow\">more information on DockerEE installs</a>.</p><h2 id=\"what-s-next\">What’s next?</h2><p>The next logical step will be to integrate Traefik 2.0 into TraefikEE and bring with it every feature… and hopefully much more!</p><h2 id=\"try-it-now-\">Try it now!</h2><p>Get a <a href=\"https://info.containo.us/get-traefik-enterprise-edition-free-for-30-days\" rel=\"noopener nofollow\">free one month trial</a> right now, and install TraefikEE on your favorite environment by following the <a href=\"https://docs.containo.us/v1.2/\" rel=\"noopener nofollow\">installation guides</a>.</p>","url":"https://containous.ghost.io/blog/traefik-enterprise-edition-1-2-is-out-2ba37e22983c/","canonical_url":null,"uuid":"7e8545e4-254a-4a3d-8dea-98ff4f8dc5dc","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dcb1c8569991550c004b6d3","reading_time":2}},{"node":{"id":"Ghost__Post__5dd54affec5ed3003878888c","title":"Traefik 2.0","slug":"traefik-2-0-6531ec5196c2","featured":false,"feature_image":"https://containous.ghost.io/content/images/2020/04/Traefik2.0-Blog.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/d296ee0938e591fca4472b2324a12286/f3583/Traefik2.0-Blog.png","srcSet":"/static/d296ee0938e591fca4472b2324a12286/630fb/Traefik2.0-Blog.png 300w,\n/static/d296ee0938e591fca4472b2324a12286/2a4de/Traefik2.0-Blog.png 600w,\n/static/d296ee0938e591fca4472b2324a12286/f3583/Traefik2.0-Blog.png 1200w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"When we started our journey toward 2.0, we had high expectations (since you had high expectations), and huddled around the whiteboard...","custom_excerpt":"When we started our journey toward 2.0, we had high expectations (since you had high expectations), and huddled around the whiteboard...","visibility":"public","created_at_pretty":"20 November, 2019","published_at_pretty":"September 17, 2019","updated_at_pretty":"22 May, 2020","created_at":"2019-11-20T14:17:35.000+00:00","published_at":"2019-09-17T14:28:00.000+00:00","updated_at":"2020-05-22T00:42:01.000+00:00","meta_title":"Traefik 2.0 - The Wait is Over!","meta_description":"When we started our journey toward 2.0, we had high expectations (since you had high expectations), and huddled around the whiteboard...","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"The Wait Is Over!\n\nWhen we started our journey toward 2.0, we had high expectations (since you had\nhigh expectations), and huddled around the whiteboard.\n\nWe designed Version 2 as if there were no constraints: we forgot our codebase,\nput aside technical challenges, and developed a new configuration structure that\nwould welcome everything we had ever dreamed of for Traefik.\n\n> We forgot what was impossible so we could build it!\nA year later, we proudly present to you Traefik 2.0. Make sure you grab your cup\nof coffee/cup of tea before going further because this is probably the biggest\nnew features list we’ve ever had to write!\n\n\n--------------------------------------------------------------------------------\n\nTCP Support with SNI Routing & Multi-Protocol Ports\nWe talked about this flagship feature in the 2.0 alpha announcement\n[/blog/back-to-traefik-2-0-2f9aa17be305/], but since it was feature request #10\n[https://github.com/containous/traefik/issues/10], we thought we would dedicate\nsome time to discussing this key element in a world of new possibilities.\n\nLet’s see a sample configuration — using the newly supported YAML format — that\nroutes requests to a database:\n\ntcp:\n  routers:\n    to-database:\n      entrypoints:\n      - database-entrypoint\n      rule: HostSNI(`*`)\n      service: database-service\n  services:     \n    database-service:\n      loadBalancer:\n        servers:\n        - address: xx.xx.xx.xx:xx\n\nIn the example above, every request ending on database-entrypoint will be routed\nto our database-service.\n\n> Over TLS, Traefik routes TCP \nrequests based on the SNI\nIn the following example, Traefik [/traefik/] routes requests to two databases\nbased on the SNI (Server Name Indication):\n\ntcp:\n  routers:\n    to-db-1:\n      entrypoints:\n      - web-secure\n      rule: \"HostSNI(`db1.domain`)\"\n      service: \"db1\"\n      tls: {} \n    to-db-2:\n      entrypoints:\n      - web-secure\n      rule: \"HostSNI(`db2.domain`)\"\n      service: \"db2\"\n      tls: {}\n\n> HTTP & TCP on the same port?\nYes, there is Traefik for that!\nIf you ever want to have the same entrypoint get both HTTP and TCP requests,\nknow that Traefik will handle it perfectly!\n\ntcp:\n  routers:\n    to-db-1:\n      entrypoints:\n      - web-secure\n      rule: \"HostSNI(`db1.domain`)\"\n      service: \"db-1\"\n      tls: {}\nhttp:\n  routers:\n    to-db1-dashboard:\n      entrypoints:\n      - web-secure\n      rule: \"Host(`dashboard.db1.domain`)\"\n      service: \"db1-dashboard\"\n      tls: {}\n\nIn the above example, HTTP requests on dashboard.db1.domain will be routed to\nthe database dashboard service, and TCP requests on db1.domain will be routed to\nthe database.\n\nFully Customize Your Routes with Middleware\nTraefik 2.0 introduces middleware\n[https://docs.traefik.io/middlewares/overview/]: a common banner for features\nthat tweak requests before/after routing them to their destinations.\n\n> You can declare Middleware and reuse them on as \nmany routers as you like.\nWant to see how to configure them? Let’s declare a BasicAuth middleware\n[https://docs.traefik.io/middlewares/basicauth/] to control access to our\nservice! (this time using TOML)\n\n# Declaring a basicauth middleware with two users\n[http.middlewares.test-auth.basicAuth]\n  users = [\"user1:hashed\", \"user2:hashed\"]\n\n# Applying the middleware to our router\n[http.routers.my-router.to-service]\n  rule = \"host(`my-protected.domain`)\"\n  middlewares = [\"test-auth\"]\n  service = \"service1\"\n\n> A Chain to Bind Them All\nIf you have a classic combination you often use together, you can declare chains\n[https://docs.traefik.io/middlewares/chain/], and reuse them over and over.\nWhat’s even better for our Kubernetes users, you can use Traefik’s new CRD\n(Custom Resource Definition) for a crystal clear configuration that doesn’t\ninvolve intricate annotations. (You can find more information on the \nIngressRoute object\n[https://docs.traefik.io/providers/kubernetes-crd/#traefik-ingressroute-definition] \nin our documentation.)\n\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: test\n  namespace: default\nspec:\n  entryPoints:\n    - web\n  routes:\n    - match: Host(`mydomain`)\n      kind: Rule\n      services:\n        - name: whoami\n          port: 80\n      middlewares:\n        - name: secured\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: secured\nspec:\n  chain:\n    middlewares:\n    - name: https-only\n    - name: known-ips\n    - name: auth-users\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: auth-users\nspec:\n  basicAuth:\n    secret: secretUsers #yes! Compatible with K8S secrets\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: https-only\nspec:\n  redirectScheme:\n    scheme: https\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: known-ips\nspec:\n  ipWhiteList:\n    sourceRange:\n    - 192.168.1.7\n    - 127.0.0.1/32\n\nAt release, Traefik comes with many pieces of middleware\n[https://docs.traefik.io/middlewares/overview/]: path manipulation\n[https://docs.traefik.io/middlewares/replacepath/], several authentication\nmechanisms [https://docs.traefik.io/middlewares/forwardauth/], buffering\n[https://docs.traefik.io/middlewares/buffering/], circuit breaker\n[https://docs.traefik.io/middlewares/circuitbreaker/], retry\n[https://docs.traefik.io/middlewares/retry/], compression\n[https://docs.traefik.io/middlewares/compress/], error handling\n[https://docs.traefik.io/middlewares/errorpages/], headers\n[https://docs.traefik.io/middlewares/headers/], IP whitelisting\n[https://docs.traefik.io/middlewares/ipwhitelist/], rate limiting\n[https://docs.traefik.io/middlewares/ratelimit/], redirections\n[https://docs.traefik.io/middlewares/redirectscheme/], and more.\n\nAlso, we’ve re-architectured the code to make it easier for contributors to\nprovide additional pieces of middleware, and I’m sure we’ll find a way to do \neven better [https://github.com/containous/yaegi].\n\nA New Dashboard & WebUI\nOur goal with the new WebUI was to show users what was happening on their\ncluster at a glance. We also wanted to display what features they can enable.\n\nSince the flow has changed, we wanted to display every path that leads to\nservices, with every configuration option.\n\nCanary Deployments with Service Load Balancers\nAnother long-awaited feature [https://github.com/containous/traefik/issues/1164] \n— canary deployments, A/B testing — makes its way into Traefik 2.0 in the form\nof Service Load Balancers.\n\nService Load Balancers can be seen as virtual services that are responsible for\nforwarding the request to the actual services.\n\nLet’s take a classic scenario where you have an existing route to an API:\n\nhttp:\n  routers:\n    my-route:\n      rule: \"Host(`my.domain`)\"\n      service: my-api-v1\n  services:\n    my-api-v1:\n      loadBalancer:\n        servers:\n        - url: \"http://private-ip-server-1/\"\n\nNow you want to deploy a new version of this service, but would like to deploy\nit progressively, let’s say approximately a third of the requests. What you’ll\ndo is deploy the new service, with its own ID (here it’smy-api-v2).\n\nhttp:\n  services:\n    my-api-v2:\n      loadBalancer:\n        servers:\n        - url: \"http://private-ip-server-2/\"\n\nThen, instead of pointing directly to this new version, you’ll first define a\nService Load Balancer (in the example canary-api) and define the proportion for\neach version (with the weight option).\n\nhttp:\n  services:\n    canary-api:\n      weighted:\n        services:\n        - name: my-api-v1\n          weight: 3\n        - name: my-api-v2\n          weight: 1\n\nFinally, point to this canary-api service from your router.\n\nhttp:\n  routers:\n    my-route:\n      rule: \"Host(`my.domain`)\"\n      service: canary-api\n\nLater, you’ll be able to update the weight without having to redeploy your \nactual services. You’ll also be able to scale them without any impact on the\ncanary deployment itself.\n\nMirroring with Service Load Balancers\nCanary deployments aren’t the only tricks available in the service family.\nTraefik 2.0 introduces Mirroring Services — a way to duplicate the incoming\nrequest [https://github.com/containous/traefik/issues/2989] and send it to\ndifferent services at the same time. The mirror will get a given percentage of\nrequests, and its answers will be ignored.\n\n[http.services.mirrored-api]\n    [http.services.mirrored-api.mirroring]\n      service = \"api\"\n    [[http.services.mirrored-api.mirroring.mirrors]]\n      name = \"api-v2\"\n      percent = 10\n\n[http.services.api]\n    [http.services.api.loadBalancer]\n      [[http.services.api.loadBalancer.servers]]\n        url = \"http://private-ip-server-1/\"\n\n[http.services.api-v2]\n    [http.services.api-v2.loadBalancer]\n      [[http.services.api-v2.loadBalancer.servers]]\n        url = \"http://private-ip-server-2/\"\n\nIn the above example, we’re sending 10% of the requests to the mirror.\n\nAnd Much, Much More!\nTraefik 2.0 introduces a syntax (@provider) to allow users to declare elements\n(middleware, services, routers) in a provider and to reference them from an\nother one. It provides an easier way to configure CORS headers\n[https://docs.traefik.io/middlewares/headers/#cors-headers], embeds a redesigned \nconstraint management\n[https://docs.traefik.io/providers/overview/#restrict-the-scope-of-service-discovery] \nto better control services you want to expose, and improves the default rule\ngeneration for a quick and easy way to define routes for containers.\n\nOn top of many enhancements [https://docs.traefik.io/operations/api/], the API\nnow embeds status information for your middleware, services, routers, and\nreports errors to help you identify and fix problems.\n\nThe polished configuration options ensure that configuring Traefik is always\nachieved the same way whether expressed with TOML, YAML, labels, or keys, and\nthe revamped documentation [https://docs.traefik.io/] includes examples for\nevery syntax.\n\nYou can define TLS termination separately on each router, configure TLS\npassthrough, use the new CertResolver to benefit from different challenges for\ncertificate generation (yes, it’s now multiple-DNS-providers-proof!), and\ndynamically generate wildcard certificates.\n\nRouter rules now use a go-like syntax with operators and parenthesis\n[https://docs.traefik.io/routing/routers/#rule] for powerful and readable\ncombinations.\n\nThe list goes on and on with bug fixes and other significant tweaks!\n\n\n--------------------------------------------------------------------------------\n\nMigrating From 1.x\nWith so many new features, bug fixes, and enhancements, Traefik 2.0 might ask\nyou to re-think the way you used to route your requests. In order to facilitate\nthe transition and help you leverage the power of these new options, we\ninitiated a migration guide [https://docs.traefik.io/migration/v1-to-v2/] that\ngoes through every change we made.\n\nFor our Kubernetes [https://kubernetes.io/] user-base, we’ve also written a \nmigration tool [https://github.com/containous/traefik-migration-tool] to help\nyou convert your Ingress objects to the new IngressRoute format. (This migration\ntool will also help all users convert their acme.json file.)\n\nAll this is designed for the thousands of people already using Traefik.\n\n\n--------------------------------------------------------------------------------\n\nBehind the Curtain\nTraefik 2.0 is not the only thing that has improved! By the time we released\n2.0, we launched TraefikEE [/traefikee/], Yaegi\n[https://github.com/containous/yaegi], Maesh [/maesh/], and you can bet we’ll\nkeep going further. We also constantly monitor our processes and tools. We’ve\nlaunched a Community Forum [https://community.containo.us/] to foster better\ncommunication amongst users, introduced a monthly journal, and scheduled \nTraefik\nOnline Meetups [/events/] to promote the community talent.\n\n\n--------------------------------------------------------------------------------\n\nNext Steps\nMore than anything, this release shows the importance of the community. Every\n[https://github.com/containous/traefik/issues/10] feature\n[https://github.com/containous/traefik/issues/2999] that\n[https://github.com/containous/traefik/issues/7] has\n[https://github.com/containous/traefik/issues/727] been\n[https://github.com/containous/traefik/issues/895] discussed\n[https://github.com/containous/traefik/issues/1164] today\n[https://github.com/containous/traefik/issues/160] was born\n[https://github.com/containous/traefik/issues/2989] from\n[https://github.com/containous/traefik/issues/914] a\n[https://github.com/containous/traefik/issues/2653] user\n[https://github.com/containous/traefik/issues/966] asking for a new feature\n[https://github.com/containous/traefik/issues/3378], reporting a bug\n[https://github.com/containous/traefik/issues/4069], or just asking\n[https://github.com/containous/traefik/issues/3868] for “better.”\n[https://github.com/containous/traefik/issues/2773]\n\nTraefik 1.X has been downloaded more than a billion times, and we hope to double\nthat number with Traefik 2.X.\n\n> ❤️ Thank you for your support!❤️\n… and keep raising your voice for the (many) version(s) to come!\n\nP.S. — Stay tuned! There is so much to show you with this new version that our\ndeveloper team is preparing an Online Meetup for you. :-)\n\n\n--------------------------------------------------------------------------------\n\nUseful Links\n * Traefik documentation [https://docs.traefik.io/], website [/traefik/] & \n   Github page [https://github.com/containous/traefik]\n * Containous website [/]\n * Community forum [https://community.containo.us/]","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">The Wait Is Over!</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-108.png\" class=\"kg-image\"></figure><p>When we started our journey toward 2.0, we had high expectations (since <em><em>you</em></em> had high expectations), and huddled around the whiteboard.</p><p>We designed Version 2 as if there were no constraints: we forgot our codebase, put aside technical challenges, and developed a new configuration structure that would welcome everything we had ever dreamed of for Traefik.</p><blockquote>We forgot what was impossible so we could build it!</blockquote><p>A year later, we proudly present to you Traefik 2.0. Make sure you grab your cup of coffee/cup of tea before going further because this is probably the biggest new features list we’ve ever had to write!</p><hr><h2 id=\"tcp-support-with-sni-routing-multi-protocol-ports\">TCP Support with SNI Routing &amp; Multi-Protocol Ports</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-4.png\" class=\"kg-image\"></figure><p>We talked about this flagship feature in the <a href=\"https://containous.ghost.io/blog/back-to-traefik-2-0-2f9aa17be305/\">2.0 alpha announcement</a>, but since it was <a href=\"https://github.com/containous/traefik/issues/10\" rel=\"noopener\">feature request #10</a>, we thought we would dedicate some time to discussing this key element in a world of new possibilities.</p><p>Let’s see a sample configuration — using the <em><em>newly supported </em></em><strong><strong><em><em>YAML</em></em></strong></strong><em><em> format</em></em> — that routes requests to a database:</p><pre><code class=\"language-yaml\">tcp:\n  routers:\n    to-database:\n      entrypoints:\n      - database-entrypoint\n      rule: HostSNI(`*`)\n      service: database-service\n  services:     \n    database-service:\n      loadBalancer:\n        servers:\n        - address: xx.xx.xx.xx:xx</code></pre><p>In the example above, every request ending on <code>database-entrypoint</code> will be routed to our <code>database-service</code>.</p><blockquote>Over TLS, Traefik routes TCP <br>requests based on the SNI</blockquote><p>In the following example, <a href=\"https://containous.ghost.io/traefik/\">Traefik</a> routes requests to two databases based on the SNI (<em><em>Server Name Indication</em></em>):</p><pre><code class=\"language-yaml\">tcp:\n  routers:\n    to-db-1:\n      entrypoints:\n      - web-secure\n      rule: \"HostSNI(`db1.domain`)\"\n      service: \"db1\"\n      tls: {} \n    to-db-2:\n      entrypoints:\n      - web-secure\n      rule: \"HostSNI(`db2.domain`)\"\n      service: \"db2\"\n      tls: {}</code></pre><blockquote>HTTP &amp; TCP on the same port?<br>Yes, there is Traefik for that!</blockquote><p>If you ever want to have the same <em><em>entrypoint</em></em> get both HTTP and TCP requests, know that Traefik will handle it perfectly!</p><pre><code class=\"language-yaml\">tcp:\n  routers:\n    to-db-1:\n      entrypoints:\n      - web-secure\n      rule: \"HostSNI(`db1.domain`)\"\n      service: \"db-1\"\n      tls: {}\nhttp:\n  routers:\n    to-db1-dashboard:\n      entrypoints:\n      - web-secure\n      rule: \"Host(`dashboard.db1.domain`)\"\n      service: \"db1-dashboard\"\n      tls: {}</code></pre><p>In the above example, HTTP requests on <code>dashboard.db1.domain</code> will be routed to the database dashboard service, and TCP requests on <code>db1.domain</code> will be routed to the database.</p><h2 id=\"fully-customize-your-routes-with-middleware\">Fully Customize Your Routes with Middleware</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-5.png\" class=\"kg-image\"></figure><p>Traefik 2.0 introduces <a href=\"https://docs.traefik.io/middlewares/overview/\">middleware</a>: a common banner for features that tweak requests before/after routing them to their destinations.</p><blockquote>You can declare Middleware and reuse them on as <br>many routers as you like.</blockquote><p>Want to see how to configure them? Let’s declare a <a href=\"https://docs.traefik.io/middlewares/basicauth/\">BasicAuth middleware</a> to control access to our service! (this time using TOML)</p><pre><code class=\"language-toml\"># Declaring a basicauth middleware with two users\n[http.middlewares.test-auth.basicAuth]\n  users = [\"user1:hashed\", \"user2:hashed\"]\n\n# Applying the middleware to our router\n[http.routers.my-router.to-service]\n  rule = \"host(`my-protected.domain`)\"\n  middlewares = [\"test-auth\"]\n  service = \"service1\"</code></pre><blockquote>A Chain to Bind Them All</blockquote><p>If you have a classic combination you often use together, you can declare <a href=\"https://docs.traefik.io/middlewares/chain/\">chains</a>, and reuse them over and over. What’s even better for our Kubernetes users, you can use Traefik’s new CRD (Custom Resource Definition) for a crystal clear configuration that doesn’t involve intricate annotations. (You can find more information on the <a href=\"https://docs.traefik.io/providers/kubernetes-crd/#traefik-ingressroute-definition\">IngressRoute object</a> in our documentation.)</p><pre><code class=\"language-yaml\">apiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: test\n  namespace: default\nspec:\n  entryPoints:\n    - web\n  routes:\n    - match: Host(`mydomain`)\n      kind: Rule\n      services:\n        - name: whoami\n          port: 80\n      middlewares:\n        - name: secured\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: secured\nspec:\n  chain:\n    middlewares:\n    - name: https-only\n    - name: known-ips\n    - name: auth-users\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: auth-users\nspec:\n  basicAuth:\n    secret: secretUsers #yes! Compatible with K8S secrets\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: https-only\nspec:\n  redirectScheme:\n    scheme: https\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: known-ips\nspec:\n  ipWhiteList:\n    sourceRange:\n    - 192.168.1.7\n    - 127.0.0.1/32</code></pre><p>At release, Traefik comes with many <a href=\"https://docs.traefik.io/middlewares/overview/\">pieces of middleware</a>: <a href=\"https://docs.traefik.io/middlewares/replacepath/\">path manipulation</a>, <a href=\"https://docs.traefik.io/middlewares/forwardauth/\">several authentication mechanisms</a>, <a href=\"https://docs.traefik.io/middlewares/buffering/\">buffering</a>, <a href=\"https://docs.traefik.io/middlewares/circuitbreaker/\">circuit breaker</a>, <a href=\"https://docs.traefik.io/middlewares/retry/\">retry</a>, <a href=\"https://docs.traefik.io/middlewares/compress/\">compression</a>, <a href=\"https://docs.traefik.io/middlewares/errorpages/\">error handling</a>, <a href=\"https://docs.traefik.io/middlewares/headers/\">headers</a>, <a href=\"https://docs.traefik.io/middlewares/ipwhitelist/\">IP whitelisting</a>, <a href=\"https://docs.traefik.io/middlewares/ratelimit/\">rate limiting</a>, <a href=\"https://docs.traefik.io/middlewares/redirectscheme/\">redirections</a>, and more.</p><p>Also, we’ve re-architectured the code to make it easier for contributors to provide additional pieces of middleware, and I’m sure we’ll find a way to do <a href=\"https://github.com/containous/yaegi\" rel=\"noopener\">even better</a>.</p><h2 id=\"a-new-dashboard-webui\">A New Dashboard &amp; WebUI</h2><p>Our goal with the new WebUI was to show users what was happening on their cluster at a glance. We also wanted to display what features they can enable.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-6.png\" class=\"kg-image\"></figure><p>Since the flow has changed, we wanted to display every path that leads to services, with every configuration option.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-7.png\" class=\"kg-image\"></figure><h2 id=\"canary-deployments-with-service-load-balancers\">Canary Deployments with Service Load Balancers</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-8.png\" class=\"kg-image\"></figure><p>Another <a href=\"https://github.com/containous/traefik/issues/1164\" rel=\"noopener\">long-awaited feature</a> — canary deployments, A/B testing — makes its way into Traefik 2.0 in the form of Service Load Balancers.</p><p>Service Load Balancers can be seen as virtual services that are responsible for forwarding the request to the actual services.</p><p>Let’s take a classic scenario where you have an existing route to an API:</p><pre><code class=\"language-yaml\">http:\n  routers:\n    my-route:\n      rule: \"Host(`my.domain`)\"\n      service: my-api-v1\n  services:\n    my-api-v1:\n      loadBalancer:\n        servers:\n        - url: \"http://private-ip-server-1/\"</code></pre><p>Now you want to deploy a new version of this service, but would like to deploy it progressively, let’s say approximately a third of the requests. What you’ll do is deploy the new service, with its own ID (here it’s<code>my-api-v2</code>).</p><pre><code class=\"language-yaml\">http:\n  services:\n    my-api-v2:\n      loadBalancer:\n        servers:\n        - url: \"http://private-ip-server-2/\"</code></pre><p>Then, instead of pointing directly to this new version, you’ll first define a Service Load Balancer (in the example <code>canary-api</code>) and define the proportion for each version (with the <code>weight</code> option).</p><pre><code class=\"language-yaml\">http:\n  services:\n    canary-api:\n      weighted:\n        services:\n        - name: my-api-v1\n          weight: 3\n        - name: my-api-v2\n          weight: 1</code></pre><p>Finally, point to this <code>canary-api</code> service from your router.</p><pre><code class=\"language-yaml\">http:\n  routers:\n    my-route:\n      rule: \"Host(`my.domain`)\"\n      service: canary-api</code></pre><p>Later, you’ll be able to update the weight without having to redeploy your <em><em>actual</em></em> services. You’ll also be able to scale them without any impact on the canary deployment itself.</p><h2 id=\"mirroring-with-service-load-balancers\">Mirroring with Service Load Balancers</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-9.png\" class=\"kg-image\"></figure><p>Canary deployments aren’t the only tricks available in the service family. Traefik 2.0 introduces Mirroring Services — a way to <a href=\"https://github.com/containous/traefik/issues/2989\" rel=\"noopener\">duplicate the incoming request</a> and send it to different services at the same time. The mirror will get a given percentage of requests, and its answers will be ignored.</p><pre><code class=\"language-toml\">[http.services.mirrored-api]\n    [http.services.mirrored-api.mirroring]\n      service = \"api\"\n    [[http.services.mirrored-api.mirroring.mirrors]]\n      name = \"api-v2\"\n      percent = 10\n\n[http.services.api]\n    [http.services.api.loadBalancer]\n      [[http.services.api.loadBalancer.servers]]\n        url = \"http://private-ip-server-1/\"\n\n[http.services.api-v2]\n    [http.services.api-v2.loadBalancer]\n      [[http.services.api-v2.loadBalancer.servers]]\n        url = \"http://private-ip-server-2/\"</code></pre><p>In the above example, we’re sending 10% of the requests to the mirror.</p><h2 id=\"and-much-much-more-\">And Much, Much More!</h2><p>Traefik 2.0 introduces a syntax (<code>@provider</code>) to allow users to declare elements (middleware, services, routers) in a provider and to reference them from an other one. It provides an easier way to configure <a href=\"https://docs.traefik.io/middlewares/headers/#cors-headers\">CORS headers</a>, embeds a redesigned <a href=\"https://docs.traefik.io/providers/overview/#restrict-the-scope-of-service-discovery\">constraint management</a> to better control services you want to expose, and improves the default rule generation for a quick and easy way to define routes for containers.</p><p>On top of <a href=\"https://docs.traefik.io/operations/api/\">many enhancements</a>, the API now embeds status information for your middleware, services, routers, and reports errors to help you identify and fix problems.</p><p>The polished configuration options ensure that configuring Traefik is always achieved the same way whether expressed with TOML, YAML, labels, or keys, and the <a href=\"https://docs.traefik.io/\">revamped documentation</a> includes examples for every syntax.</p><p>You can define TLS termination separately on each router, configure TLS passthrough, use the new <code>CertResolver</code> to benefit from different challenges for certificate generation (yes, it’s now multiple-DNS-providers-proof!), and dynamically generate wildcard certificates.</p><p>Router rules now use a go-like syntax with <a href=\"https://docs.traefik.io/routing/routers/#rule\">operators and parenthesis</a> for powerful and readable combinations.</p><p>The list goes on and on with bug fixes and other significant tweaks!</p><hr><h2 id=\"migrating-from-1-x\">Migrating From 1.x</h2><p>With so many new features, bug fixes, and enhancements, Traefik 2.0 might ask you to re-think the way you used to route your requests. In order to facilitate the transition and help you leverage the power of these new options, we initiated a <a href=\"https://docs.traefik.io/migration/v1-to-v2/\" rel=\"noopener\">migration guide</a> that goes through every change we made.</p><p>For our <a href=\"https://kubernetes.io/\" rel=\"noopener\">Kubernetes</a> user-base, we’ve also written a <a href=\"https://github.com/containous/traefik-migration-tool\" rel=\"noopener\">migration tool</a> to help you convert your Ingress objects to the new IngressRoute format. (This migration tool will also help all users convert their <code>acme.json</code> file.)</p><p>All this is designed for the thousands of people already using Traefik.</p><hr><h2 id=\"behind-the-curtain\">Behind the Curtain</h2><p>Traefik 2.0 is not the only thing that has improved! By the time we released 2.0, we launched <a href=\"https://containous.ghost.io/traefikee/\" rel=\"noopener\">TraefikEE</a>, <a href=\"https://github.com/containous/yaegi\" rel=\"noopener\">Yaegi</a>, <a href=\"https://containous.ghost.io/maesh/\">Maesh</a>, and you can bet we’ll keep going further. We also constantly monitor our processes and tools. We’ve launched a <a href=\"https://community.containo.us/\" rel=\"noopener\">Community Forum</a> to foster better communication amongst users, introduced a monthly journal, and scheduled <a href=\"https://containous.ghost.io/events/\">Traefik Online Meetups</a> to promote the community talent.</p><hr><h2 id=\"next-steps\">Next Steps</h2><p>More than anything, this release shows the importance of the community. <a href=\"https://github.com/containous/traefik/issues/10\" rel=\"noopener\">Every</a> <a href=\"https://github.com/containous/traefik/issues/2999\" rel=\"noopener\">feature</a> <a href=\"https://github.com/containous/traefik/issues/7\" rel=\"noopener\">that</a> <a href=\"https://github.com/containous/traefik/issues/727\" rel=\"noopener\">has</a> <a href=\"https://github.com/containous/traefik/issues/895\" rel=\"noopener\">been</a> <a href=\"https://github.com/containous/traefik/issues/1164\" rel=\"noopener\">discussed</a> <a href=\"https://github.com/containous/traefik/issues/160\" rel=\"noopener\">today</a> <a href=\"https://github.com/containous/traefik/issues/2989\" rel=\"noopener\">was born</a> <a href=\"https://github.com/containous/traefik/issues/914\" rel=\"noopener\">from</a> <a href=\"https://github.com/containous/traefik/issues/2653\" rel=\"noopener\">a</a> <a href=\"https://github.com/containous/traefik/issues/966\" rel=\"noopener\">user</a> <a href=\"https://github.com/containous/traefik/issues/3378\" rel=\"noopener\">asking for a new feature</a>, <a href=\"https://github.com/containous/traefik/issues/4069\" rel=\"noopener\">reporting a bug</a>, <a href=\"https://github.com/containous/traefik/issues/3868\" rel=\"noopener\">or just asking</a> <a href=\"https://github.com/containous/traefik/issues/2773\" rel=\"noopener\">for “better.”</a></p><p>Traefik 1.X has been downloaded more than a <strong><strong>billion</strong></strong> times, and we hope to double that number with Traefik 2.X.</p><blockquote>❤️ Thank you for your support!❤️</blockquote><p>… and keep raising your voice for the (many) version(s) to come!</p><p>P.S. — Stay tuned! There is so much to show you with this new version that our developer team is preparing an Online Meetup for you. :-)</p><hr><h2 id=\"useful-links\">Useful Links</h2><ul><li>Traefik <a href=\"https://docs.traefik.io/\">documentation</a>, <a href=\"https://containous.ghost.io/traefik/\">website</a> &amp; <a href=\"https://github.com/containous/traefik\" rel=\"noopener\">Github page</a></li><li>Containous <a href=\"https://containous.ghost.io/\" rel=\"noopener\">website</a></li><li><a href=\"https://community.containo.us/\" rel=\"noopener\">Community forum</a></li></ul>","url":"https://containous.ghost.io/blog/traefik-2-0-6531ec5196c2/","canonical_url":null,"uuid":"541963bd-f2ae-4fcf-b184-0e9c60d790be","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dd54affec5ed3003878888c","reading_time":7}}]}},"pageContext":{"slug":"product-news","limit":9,"skip":9,"numberOfPages":4,"humanPageNumber":2,"prevPageNumber":1,"nextPageNumber":3,"previousPagePath":"/tag/product-news/","nextPagePath":"/tag/product-news/page/3/"}},"staticQueryHashes":["1274566015","2561578252","2731221146","394248586","4145280475","749840385"]}