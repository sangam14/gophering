{"componentChunkName":"component---src-templates-tag-tsx","path":"/tag/how-to/page/2/","result":{"data":{"ghostTag":{"slug":"how-to","name":"How To","visibility":"public","feature_image":null,"featureImageSharp":null,"description":null,"meta_title":null,"meta_description":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5dd7bc8af1db6f0038c742d5","title":"The Journey to Traefik Enterprise Edition: HTTPS for Everyone","slug":"the-journey-to-traefik-enterprise-edition-https-for-everyone-90a36b33600","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/11/ee-tls-le.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/27079133642b20968c4b4d4fe242c032/ee604/ee-tls-le.png","srcSet":"/static/27079133642b20968c4b4d4fe242c032/630fb/ee-tls-le.png 300w,\n/static/27079133642b20968c4b4d4fe242c032/2a4de/ee-tls-le.png 600w,\n/static/27079133642b20968c4b4d4fe242c032/ee604/ee-tls-le.png 800w","sizes":"(max-width: 800px) 100vw, 800px"}}},"excerpt":"Welcome to the fourth step of our journey towards Traefik Enterprise Edition.\nToday, we’ll focus on how to use TraefikEE with Let’s Encrypt to get HTTPS by default...","custom_excerpt":"Welcome to the fourth step of our journey towards Traefik Enterprise Edition.\nToday, we’ll focus on how to use TraefikEE with Let’s Encrypt to get HTTPS by default...","visibility":"public","created_at_pretty":"22 November, 2019","published_at_pretty":"February 25, 2019","updated_at_pretty":"21 May, 2020","created_at":"2019-11-22T10:46:34.000+00:00","published_at":"2019-02-25T10:45:00.000+00:00","updated_at":"2020-05-21T23:28:53.000+00:00","meta_title":"The Journey to Traefik Enterprise Edition: HTTPS for Everyone","meta_description":"Welcome to the 4th step of our journey towards Traefik Enterprise. We’ll focus on how to use TraefikEE with Let’s Encrypt to get HTTPS for everyone.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Damien Duportal","slug":"damien","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/dduportal_light.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Damien Duportal","slug":"damien","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/dduportal_light.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"How To","slug":"how-to","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Welcome to the fourth step of our journey towards Traefik Enterprise Edition\n[/traefikee/].\n\nBefore jumping in, you should check the previous posts:\n\n * Join the“Early Access” Program\n   [/blog/the-journey-to-traefik-enterprise-edition-join-the-early-access-program-b73e07d62f30/]\n * Product Evaluation\n   [/blog/the-journey-to-traefik-enterprise-edition-product-evaluation-4828508cbc8/]\n * High Availability\n   [/blog/the-journey-to-traefik-enterprise-edition-high-availability-7421718be2d8/]\n\nToday, we’ll focus on how to use TraefikEE with Let’s Encrypt to get HTTPS by\ndefault, for your application.\n\nCreate a Kubernetes Cluster with kops\nFollowing the same steps as the previous blog post (“Create a cluster with\nkops”)\n[/blog/the-journey-to-traefik-enterprise-edition-high-availability-7421718be2d8/]\n, start a kops cluster with one Kubernetes manager and three Kubernetes nodes:\n\n$ export NAME=traefikee-demo.containous.cloud\n$ export KOPS_STATE_STORE=s3://<YOUR BUCKET>\n$ export ROUTE53_ZONE_ID=<ROUTE53_ZONE_ID>\n$ export NB_MASTER_NODE=1\n$ export NB_WORKER_NODE=3\n\n$ kops create cluster \\\n    --zones us-east-1a \\\n    --dns-zone=\"${ROUTE53_ZONE_ID}\" \\\n    --node-size=\"t2.large\" \\\n    --master-count=\"${NB_MASTER_NODE}\" \\\n    --node-count=\"${NB_WORKER_NODE}\" \\\n    --yes \\\n    \"${NAME}\"\n\nAfter a few minutes, your cluster is started with four Kubernetes nodes:\n\n$ kubectl get nodes\nNAME                            STATUS   ROLES    AGE   VERSION\nip-172-20-34-251.ec2.internal   Ready    node     2m    v1.11.6\nip-172-20-49-209.ec2.internal   Ready    node     2m    v1.11.6\nip-172-20-53-165.ec2.internal   Ready    node     2m    v1.11.6\nip-172-20-56-217.ec2.internal   Ready    master   3m    v1.11.6\n\nPick a Public Domain Name\nIn the previous blog post, we used a domain name generated by Amazon Web\nServices\n[/blog/the-journey-to-traefik-enterprise-edition-high-availability-7421718be2d8/] \nas the main entry point to reach our platform.\n\nYou cannot use this “generated” public hostname, because Let’s Encrypt has a\n“forbidden domains list.” Some domains are considered too risky, and any request\nfor issuing certificates under these domains is automatically refused. It’s the\ncase with domains in\n[https://community.letsencrypt.org/t/policy-forbids-issuing-for-name-on-amazon-ec2-domain/12692/2]\n*.amazonaws.com\n[https://community.letsencrypt.org/t/policy-forbids-issuing-for-name-on-amazon-ec2-domain/12692/2]\n.\n\nTo solve this challenge, let’s pick a custom public domain name. Any domain or\nsub-domain (like test.company.org ) can be used. You have to be able to create\nDNS records of type CNAME on this domain.\n\n> (A voice in the background): I don’t want to pay for a domain used for\nevaluating a product. Maybe later if it goes further, but not now.\n> Containous: You can get free DNS using Dot-T-K\n[http://www.dot.tk/en/index.html?lang=en], or even cheap ones using NameCheap\n[https://www.namecheap.com/].\nFor the next steps, we’ll pick the domain demo.containo.us .\n\nInstall TraefikEE\nThen, install a simple TraefikEE cluster, without dashboard, as we did on the\nprevious blog post\n[/blog/the-journey-to-traefik-enterprise-edition-high-availability-7421718be2d8/]\n:\n\n$ traefikeectl install \\\n  --licensekey=\"$(cat /keybase/…/traefikee-license)\" \\\n  --kubernetes\n...\n\n✔ Installation successful\n\nOnce the installation succeeded, verify that the TraefikEE cluster is composed\nof six nodes, three control nodes and three data nodes, as expected:\n\n$ traefikeectl list-nodes\n...\nName                                 Role\n----                                 ----\ntraefikee-control-node-0             CONTROL NODE\ndata-node-traefikee-data-node-9ndbp  DATA NODE\ndata-node-traefikee-data-node-vqgzr  DATA NODE\ntraefikee-control-node-1             CONTROL NODE\ntraefikee-control-node-2             CONTROL NODE (Current Leader)\ndata-node-traefikee-data-node-5w66x  DATA NODE\n\nConfigure the Domain DNS Records\nThe next step is to create a CNAME DNS record, on the public domain name,\npointing to the Load Balancer’s hostname, created during TraefikEE’s\ninstallation.\n\nGet the load balancer’s public hostname with the following command (field\nEXTERNAL-IP):\n\n$ kubectl get svc -n traefikee traefikee-lb\nNAME          TYPE         EXTERNAL-IP\ntraefikee-lb  LoadBalancer a16ff-456.us-east-1.elb.amazonaws.com\n\nThen, create the DNS CNAME record to this hostname (choose a short TTL):\n\nIN  CNAME  demo.containo.us a16ff-456.us-east-1.elb.amazonaws.com\n\nThe DNS propagation takes some time, due to the “TTL”. Verify that your computer\ncan resolve the DNS name with tools asdig , drillor nslookup :\n\n$ dig CNAME demo.containo.us\n...\n;; QUESTION SECTION:\n;demo.containo.us.       IN      CNAME\n\n;; ANSWER SECTION:\ndemo.containo.us. 60     IN      CNAME   a16ff-456.us-east-1.elb.amazonaws.com.\n\n;; Query time: 38 msec\n;; SERVER: 212.224.255.252#53(212.224.255.252)\n;; WHEN: Wed Feb 06 11:21:25 CET 2019\n;; MSG SIZE  rcvd: 136\n\nConfigure TraefikEE for HTTPS\nThen, we configure TraefikEE to enable HTTPS and Let’s Encrypt for certificate\non HTTPS. The configuration is the same as Traefik’s (check Traefik's\ndocumentation [https://docs.traefik.io] for more details):\n\n### Configure 2 entrypoints for https and https\n  --entryPoints='Name:http Address::80 Redirect.EntryPoint:https' \\\n  --entryPoints='Name:https Address::443 TLS' \\\n  --defaultentrypoints=https,http \\\n  \n### Enable ACME protocol for the HTTPS entry point\n  --acme.entryPoint=https \\\n  \n### Set up ACME protocol for Let's Encrypt TLS-APLN-01 Challenge\n  --acme.email=damien@containo.us \\\n  --acme.tlsChallenge \\\n  \n### Tell Traefik to get certificate's hostname from backend's rules\n  --acme.onHostRule=true\n\n> (A voice in the background): When using Traefik with Let’s Encrypt, I often get\ncertificates requests failures because of the rate limit on Let’s Encrypt side\n[https://letsencrypt.org/docs/rate-limits/].\n> Containous: Traefik allows to test your HTTPS configuration with the “staging”\nenvironment [https://letsencrypt.org/docs/staging-environment/], without rate\nlimiting, but with untrusted certificates . It’s useful to validate\nconfiguration before switching to “production” certificates. Add the flag \n--acme.caServer='https://acme-staging-v02.api.letsencrypt.org/directory' to the\nconfiguration.\nBe careful! You cannot change the caServer unless you reinstall TraefikEE.\nThe main difference from using Traefik here, is that TraefikEE is a distributed\nsystem, so you need to specify the configuration after TraefikEE’s installation.\n\nThe traefikeectl tool provides a command named deploy to send any routing\nconfiguration to the TraefikEE cluster. You can read more on this topic on the \nreference documentation for routing configurations [https://docs.containo.us].\n\nNow, let’s deploy the following configuration to the TraefikEE cluster and\nthat’s all!\n\ntraefikeectl deploy --kubernetes \\\n  --entryPoints='Name:http Address::80 Redirect.EntryPoint:https' \\\n  --entryPoints='Name:https Address::443 TLS' \\\n  --defaultentrypoints=https,http \\\n  --acme.entryPoint=https \\\n  --acme.email=damien@containo.us \\\n  --acme.tlsChallenge \\\n  --acme.onHostRule=true\n\n> (A voice in the background): Why is there a —-kubernetes flag in this\nconfiguration?\n> Containous: This flag tells TraefikEE to watch for any Kubernetes Ingress. It’s\nthe same directive as the one in Traefik.\nDeploy an Application\nAs we previously did on the post, “A Tour of TraefikEE”, we deploy a test\napplication based on https://github.com/containous/whoami.\n\nYou can reuse the same YAML file, but you have to change the directive host in\nthe ingress, and map it to your public domain name. I’m using the following\none-line shell command for this:\n\n$ curl --location --silent --show-error https://bit.ly/2WE5XFk \\\n  | sed 's/localhost/demo.damienduportal.org/g' \\\n  | kubectl apply -f -\n\ndeployment.extensions/whoami created\ningress.extensions/whoami created\nservice/whoami created\n\nYou can check that Kubernetes is using the right domain name by checking the\ningress “whoami”:\n\n$ kubectl get ingress whoami --namespace=traefikee\nNAME     HOSTS                     ADDRESS   PORTS   AGE\nwhoami   demo.damienduportal.org             80      9m\n\nThe page https://demo.damienduportal.org/whoami is now, (after a few seconds,\nrequired for issuing certificates), securely served over HTTPS, with a valid\ncertificate, issued by Let’s Encrypt:\n\nGreen Lock for Everyone> If you try to access\nhttp://demo.damienduportal.org/whoami, then you are redirected to\nhttps://demo.damienduportal.org/whoami as expected.\nThat’s all for today, you are ready to use HTTPS on your applications!\nYou can now clean your kops cluster with:\n\nkops delete cluster --name=\"${NAME}\"\n\n\n--------------------------------------------------------------------------------\n\nOn the next post, “The Journey to Traefik Enterprise Edition: Smooth\nOperations,” we’ll focus on how to configure and operate TraefikEE remotely with\nthe traefikeectl command line.","html":"<figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/12/image-8.png\" class=\"kg-image\"></figure><p>Welcome to the fourth step of our journey towards <a href=\"https://containous.ghost.io/traefikee/\">Traefik Enterprise Edition</a>.</p><p>Before jumping in, you should check the previous posts:</p><ul><li><em><em><a href=\"https://containous.ghost.io/blog/the-journey-to-traefik-enterprise-edition-join-the-early-access-program-b73e07d62f30/\">Join the“Early Access” Program</a></em></em></li><li><em><em><a href=\"https://containous.ghost.io/blog/the-journey-to-traefik-enterprise-edition-product-evaluation-4828508cbc8/\">Product Evaluation</a></em></em></li><li><em><em><a href=\"https://containous.ghost.io/blog/the-journey-to-traefik-enterprise-edition-high-availability-7421718be2d8/\">High Availability</a></em></em></li></ul><p>Today, we’ll focus on how to use TraefikEE with Let’s Encrypt to get HTTPS by default, for your application.</p><h2 id=\"create-a-kubernetes-cluster-with-kops\">Create a Kubernetes Cluster with kops</h2><p>Following the same steps as <a href=\"https://containous.ghost.io/blog/the-journey-to-traefik-enterprise-edition-high-availability-7421718be2d8/\">the previous blog post (“Create a cluster with kops”)</a>, start a kops cluster with one Kubernetes manager and three Kubernetes nodes:</p><pre><code class=\"language-shell\">$ export NAME=traefikee-demo.containous.cloud\n$ export KOPS_STATE_STORE=s3://&lt;YOUR BUCKET&gt;\n$ export ROUTE53_ZONE_ID=&lt;ROUTE53_ZONE_ID&gt;\n$ export NB_MASTER_NODE=1\n$ export NB_WORKER_NODE=3\n\n$ kops create cluster \\\n    --zones us-east-1a \\\n    --dns-zone=\"${ROUTE53_ZONE_ID}\" \\\n    --node-size=\"t2.large\" \\\n    --master-count=\"${NB_MASTER_NODE}\" \\\n    --node-count=\"${NB_WORKER_NODE}\" \\\n    --yes \\\n    \"${NAME}\"</code></pre><p>After a few minutes, your cluster is started with four Kubernetes nodes:</p><pre><code class=\"language-shell\">$ kubectl get nodes\nNAME                            STATUS   ROLES    AGE   VERSION\nip-172-20-34-251.ec2.internal   Ready    node     2m    v1.11.6\nip-172-20-49-209.ec2.internal   Ready    node     2m    v1.11.6\nip-172-20-53-165.ec2.internal   Ready    node     2m    v1.11.6\nip-172-20-56-217.ec2.internal   Ready    master   3m    v1.11.6</code></pre><h2 id=\"pick-a-public-domain-name\">Pick a Public Domain Name</h2><p>In the previous blog post, we used <a href=\"https://containous.ghost.io/blog/the-journey-to-traefik-enterprise-edition-high-availability-7421718be2d8/\">a domain name generated by Amazon Web Services</a> as the main entry point to reach our platform.</p><p>You cannot use this “generated” public hostname, because Let’s Encrypt has a “forbidden domains list.” Some domains are considered too risky, and any request for issuing certificates under these domains is automatically refused. <a href=\"https://community.letsencrypt.org/t/policy-forbids-issuing-for-name-on-amazon-ec2-domain/12692/2\" rel=\"noopener\">It’s the case with domains in </a><code><a href=\"https://community.letsencrypt.org/t/policy-forbids-issuing-for-name-on-amazon-ec2-domain/12692/2\" rel=\"noopener\">*.amazonaws.com</a>.</code></p><p>To solve this challenge, let’s pick a custom public domain name. Any domain or sub-domain (like <code>test.company.org</code> ) can be used. You have to be able to create DNS records of type <code>CNAME</code> on this domain.</p><blockquote><em><em><strong><strong>(A voice in the background):</strong></strong> I don’t want to pay for a domain used for evaluating a product. Maybe later if it goes further, but not now.</em></em></blockquote><blockquote><em><em><strong><strong>Containous:</strong></strong> You can get free DNS using <a href=\"http://www.dot.tk/en/index.html?lang=en\" rel=\"noopener\">Dot-T-K</a>, or even cheap ones using <a href=\"https://www.namecheap.com/\" rel=\"noopener\">NameCheap</a>.</em></em></blockquote><p>For the next steps, we’ll pick the domain <code>demo.containo.us</code> .</p><h2 id=\"install-traefikee\">Install TraefikEE</h2><p>Then, install a simple TraefikEE cluster, without dashboard, as we did on <a href=\"https://containous.ghost.io/blog/the-journey-to-traefik-enterprise-edition-high-availability-7421718be2d8/\">the previous blog post</a>:</p><pre><code class=\"language-shell\">$ traefikeectl install \\\n  --licensekey=\"$(cat /keybase/…/traefikee-license)\" \\\n  --kubernetes\n...\n\n✔ Installation successful</code></pre><p>Once the installation succeeded, verify that the TraefikEE cluster is composed of six nodes, three control nodes and three data nodes, as expected:</p><pre><code class=\"language-shell\">$ traefikeectl list-nodes\n...\nName                                 Role\n----                                 ----\ntraefikee-control-node-0             CONTROL NODE\ndata-node-traefikee-data-node-9ndbp  DATA NODE\ndata-node-traefikee-data-node-vqgzr  DATA NODE\ntraefikee-control-node-1             CONTROL NODE\ntraefikee-control-node-2             CONTROL NODE (Current Leader)\ndata-node-traefikee-data-node-5w66x  DATA NODE</code></pre><h2 id=\"configure-the-domain-dns-records\">Configure the Domain DNS Records</h2><p>The next step is to create a <code>CNAME</code> DNS record, on the public domain name, pointing to the Load Balancer’s hostname, created during TraefikEE’s installation.</p><p>Get the load balancer’s public hostname with the following command (field EXTERNAL-IP):</p><pre><code class=\"language-shell\">$ kubectl get svc -n traefikee traefikee-lb\nNAME          TYPE         EXTERNAL-IP\ntraefikee-lb  LoadBalancer a16ff-456.us-east-1.elb.amazonaws.com</code></pre><p>Then, create the DNS CNAME record to this hostname (choose a short TTL):</p><pre><code class=\"language-shell\">IN  CNAME  demo.containo.us a16ff-456.us-east-1.elb.amazonaws.com</code></pre><p>The DNS propagation takes some time, due to the “TTL”. Verify that your computer can resolve the DNS name with tools as<code>dig</code> , <code>drill</code>or <code>nslookup</code> :</p><pre><code class=\"language-shell\">$ dig CNAME demo.containo.us\n...\n;; QUESTION SECTION:\n;demo.containo.us.       IN      CNAME\n\n;; ANSWER SECTION:\ndemo.containo.us. 60     IN      CNAME   a16ff-456.us-east-1.elb.amazonaws.com.\n\n;; Query time: 38 msec\n;; SERVER: 212.224.255.252#53(212.224.255.252)\n;; WHEN: Wed Feb 06 11:21:25 CET 2019\n;; MSG SIZE  rcvd: 136</code></pre><h2 id=\"configure-traefikee-for-https\">Configure TraefikEE for HTTPS</h2><p>Then, we configure TraefikEE to enable HTTPS and Let’s Encrypt for certificate on HTTPS. The configuration is the same as Traefik’s (check <a href=\"https://docs.traefik.io\">Traefik's documentation</a> for more details):</p><pre><code class=\"language-shell\">### Configure 2 entrypoints for https and https\n  --entryPoints='Name:http Address::80 Redirect.EntryPoint:https' \\\n  --entryPoints='Name:https Address::443 TLS' \\\n  --defaultentrypoints=https,http \\\n  \n### Enable ACME protocol for the HTTPS entry point\n  --acme.entryPoint=https \\\n  \n### Set up ACME protocol for Let's Encrypt TLS-APLN-01 Challenge\n  --acme.email=damien@containo.us \\\n  --acme.tlsChallenge \\\n  \n### Tell Traefik to get certificate's hostname from backend's rules\n  --acme.onHostRule=true</code></pre><blockquote><em><em><strong><strong>(A voice in the background):</strong></strong> When using Traefik with Let’s Encrypt, I often get certificates requests failures because of <a href=\"https://letsencrypt.org/docs/rate-limits/\" rel=\"noopener\">the rate limit on Let’s Encrypt side</a>.</em></em></blockquote><blockquote><em><em><strong><strong>Containous:</strong></strong> Traefik allows to test your HTTPS configuration with <a href=\"https://letsencrypt.org/docs/staging-environment/\" rel=\"noopener\">the “staging” environment</a>, without rate limiting, but with untrusted certificates . It’s useful to validate configuration before switching to “production” certificates. Add the flag <code>--acme.caServer='https://acme-staging-v02.api.letsencrypt.org/directory<em>'</em></code><em> to the configuration.</em></em></em><br><em><em><em>Be careful! You cannot change the caServer unless you reinstall TraefikEE.</em></em></em></blockquote><p>The main difference from using Traefik here, is that TraefikEE is a distributed system, so you need to specify the configuration <strong><strong>after</strong></strong> TraefikEE’s installation.</p><p>The <code>traefikeectl</code> tool provides a command named <code>deploy</code> to send any routing configuration to the TraefikEE cluster. You can read more on this topic on the <a href=\"https://docs.containo.us\">reference documentation for routing configurations</a>.</p><p>Now, let’s deploy the following configuration to the TraefikEE cluster and that’s all!</p><pre><code class=\"language-shell\">traefikeectl deploy --kubernetes \\\n  --entryPoints='Name:http Address::80 Redirect.EntryPoint:https' \\\n  --entryPoints='Name:https Address::443 TLS' \\\n  --defaultentrypoints=https,http \\\n  --acme.entryPoint=https \\\n  --acme.email=damien@containo.us \\\n  --acme.tlsChallenge \\\n  --acme.onHostRule=true</code></pre><blockquote><em><em><strong><strong>(A voice in the background):</strong></strong> Why is there a <code>—-kubernetes</code> flag in this configuration?</em></em></blockquote><blockquote><em><em><strong><strong>Containous:</strong></strong> This flag tells TraefikEE to watch for any Kubernetes Ingress. It’s the same directive as the one in Traefik.</em></em></blockquote><h2 id=\"deploy-an-application\">Deploy an Application</h2><p>As we previously did on the post, “A Tour of TraefikEE”, we deploy a test application based on <a href=\"https://github.com/containous/whoami\" rel=\"noopener\">https://github.com/containous/whoami</a>.</p><p>You can reuse the same YAML file, but you have to change the directive <code>host</code> in the ingress, and map it to your public domain name. I’m using the following one-line shell command for this:</p><pre><code class=\"language-shell\">$ curl --location --silent --show-error https://bit.ly/2WE5XFk \\\n  | sed 's/localhost/demo.damienduportal.org/g' \\\n  | kubectl apply -f -\n\ndeployment.extensions/whoami created\ningress.extensions/whoami created\nservice/whoami created</code></pre><p>You can check that Kubernetes is using the right domain name by checking the ingress “whoami”:</p><pre><code class=\"language-shell\">$ kubectl get ingress whoami --namespace=traefikee\nNAME     HOSTS                     ADDRESS   PORTS   AGE\nwhoami   demo.damienduportal.org             80      9m</code></pre><p>The page https://demo.damienduportal.org/whoami is now, (after a few seconds, required for issuing certificates), securely served over HTTPS, with a valid certificate, issued by Let’s Encrypt:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-39.png\" class=\"kg-image\"><figcaption>Green Lock for Everyone</figcaption></figure><blockquote><em><em>If you try to access http://demo.damienduportal.org/whoami, then you are redirected to https://demo.damienduportal.org/whoami as expected.</em></em></blockquote><p>That’s all for today, you are ready to use HTTPS on your applications!<br>You can now clean your kops cluster with:</p><pre><code class=\"language-shell\">kops delete cluster --name=\"${NAME}\"</code></pre><hr><p>On the next post, “The Journey to Traefik Enterprise Edition: Smooth Operations,” we’ll focus on how to configure and operate TraefikEE remotely with the <code>traefikeectl</code> command line.</p>","url":"https://containous.ghost.io/blog/the-journey-to-traefik-enterprise-edition-https-for-everyone-90a36b33600/","canonical_url":null,"uuid":"f89e17d3-fb94-408b-a240-ff3f036d382b","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dd7bc8af1db6f0038c742d5","reading_time":5}},{"node":{"id":"Ghost__Post__5dd7c361f1db6f0038c74326","title":"The Journey to Traefik Enterprise Edition: High Availability","slug":"the-journey-to-traefik-enterprise-edition-high-availability-7421718be2d8","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/11/ee-ha.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/9c0b9ef78b45492064f94ebc3a717c59/a8378/ee-ha.png","srcSet":"/static/9c0b9ef78b45492064f94ebc3a717c59/630fb/ee-ha.png 300w,\n/static/9c0b9ef78b45492064f94ebc3a717c59/2a4de/ee-ha.png 600w,\n/static/9c0b9ef78b45492064f94ebc3a717c59/a8378/ee-ha.png 1024w","sizes":"(max-width: 1024px) 100vw, 1024px"}}},"excerpt":"Welcome to the third step of our journey towards Traefik Enterprise Edition . Let’s evaluate TraefikEE’s high availability feature with...","custom_excerpt":"Welcome to the third step of our journey towards Traefik Enterprise Edition . Let’s evaluate TraefikEE’s high availability feature with...","visibility":"public","created_at_pretty":"22 November, 2019","published_at_pretty":"January 28, 2019","updated_at_pretty":"21 May, 2020","created_at":"2019-11-22T11:15:45.000+00:00","published_at":"2019-01-28T11:15:00.000+00:00","updated_at":"2020-05-21T23:37:43.000+00:00","meta_title":"The Journey to Traefik Enterprise Edition: High Availability","meta_description":"Welcome to the third step of our journey towards Traefik Enterprise Edition . Let’s evaluate TraefikEE’s high availability feature.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Damien Duportal","slug":"damien","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/dduportal_light.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Damien Duportal","slug":"damien","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/dduportal_light.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"How To","slug":"how-to","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Welcome to the third step of our journey towards Traefik Enterprise Edition\n[/traefikee/] .\n\nAfter the two first posts Join the“Early Access” Program\n[/blog/the-journey-to-traefik-enterprise-edition-join-the-early-access-program-b73e07d62f30/https://containo.us/blog/the-journey-to-traefik-enterprise-edition-join-the-early-access-program-b73e07d62f30/]\n, and Product Evaluation\n[/blog/the-journey-to-traefik-enterprise-edition-product-evaluation-4828508cbc8/]\n), let’s get real and evaluate TraefikEE’s high availability feature.\n\nThe previous post described how to install TraefikEE on a local machine, which\nis not a realistic environment. Today, we’ll use a Kubernetes multi-node cluster\ndeployed in Amazon EC2 as a more realistic platform for running TraefikEE.\n\nCreating a Kubernetes Cluster with kops\nThe first step is to get a multi-node Kubernetes cluster up and running\nsomewhere in the cloud.\n\nkops (aka. “Kubernetes Operations”) is a tool provided by the Kubernetes\ncommunity. It provides a command line to create and manage Kubernetes clusters\non cloud infrastructures as Amazon EC2 [https://aws.amazon.com/ec2/], Google\nCompute Engine [https://cloud.google.com/compute/?hl=fr] or Digital Ocean\n[https://www.digitalocean.com/].\n\nUsing the kops tutorial for AWS, we have the following requirements set up:\n\n * The aws command line tool installed\n * AWS API access credentials loaded (check this project\n   [https://github.com/mmatur/aws-mfa] from Michael MATUR\n   [https://medium.com/u/c01753d22e74?source=post_page-----7421718be2d8----------------------] \n   if you need MFA)\n * The kops command line tool installed\n * One of the 3 DNS scenarios configured\n * An AWS S3 bucket created to store kops configuration\n\nWe can create a Kubernetes cluster with 3 masters and 6 worker nodes. The worker\nnodes are a t2.large [https://aws.amazon.com/ec2/instance-types/t2/] types, with\n2 CPUs and 8 Gb memory each:\n\n$ export NAME=traefikee-demo.containous.cloud\n$ export KOPS_STATE_STORE=s3://<YOUR BUCKET>\n$ export ROUTE53_ZONE_ID=<ROUTE53_ZONE_ID>\n\n$ kops create cluster \\\n  --zones us-east-1a \\\n  --dns-zone=\"${ROUTE53_ZONE_ID}\" \\\n  --node-size=\"t2.large\" \\\n  --master-count=3 \\\n  --node-count=6 \\\n\"${NAME}\"\n\nOnce the cluster is created, validate its state with kops, and verify the access\nto the Kubernetes API with the kubectl:\n\n$ kops validate cluster --name=\"${NAME}\"\nValidating cluster traefikee-demo.containous.cloud\n...\n\nYour cluster traefikee-demo.containous.cloud is ready\n\n$ kubectl get nodes\nNAME STATUS ROLES AGE VERSION\nip-172–20–33–152.ec2.internal Ready node 1d v1.11.6\nip-172–20–37–195.ec2.internal Ready master 1d v1.11.6\nip-172–20–38–193.ec2.internal Ready node 1d v1.11.6\nip-172–20–42–46.ec2.internal Ready master 1d v1.11.6\nip-172–20–44–104.ec2.internal Ready node 1d v1.11.6\nip-172–20–52–184.ec2.internal Ready node 1d v1.11.6\nip-172–20–60–90.ec2.internal Ready node 1d v1.11.6\nip-172–20–61–254.ec2.internal Ready node 1d v1.11.6\nip-172–20–62–134.ec2.internal Ready master 1d v1.11.6\n\nWe can now proceed to install TraefikEE on this cluster.\n\nTraefikEE Installation\nWe expect that the command line traefikeectl command is already installed on\nyour machine. If you haven’t done it yet, check the \"Install traefikeectl\"\nsection of the Installation Guide [https://docs.containo.us].\n\n$ traefikeectl version\nVersion: v1.0.0-beta17\nCodename: Gewurztraminer\nGo version: go1.11.4\nBuilt: 2019-01-22_10:12:50AM\nOS/Arch: darwin/amd64\n\nNext step: installation of TraefikEE in one line, using traefikeectl, as covered\non the previous blog post\n[/blog/the-journey-to-traefik-enterprise-edition-product-evaluation-4828508cbc8/]\n.\n\n> Don’t forget it takes some time to download all the required resources\n$ traefikeectl install \\\n  --licensekey=\"$(cat /keybase/…/traefikee-license)\" \\\n  --dashboard \\\n  --kubernetes\n\n# ...\n\nYou can access the dashboard with the following credentials:\n\nUsername: admin\nPassword: 384bae9a1fe11670\n\n✔ Installation successful\n\n> Don’t forget to write down the password for later.\nCongratulations, your TraefikEE cluster is installed locally! The last step is\nto check the topology of the TraefikEE cluster:\n\n$ traefikeectl list-nodes\nName                                 Role\n----                                 ----\ndata-node-traefikee-data-node-864tl  DATA NODE\ndata-node-traefikee-data-node-jptsq  DATA NODE\ndata-node-traefikee-data-node-rn4x8  DATA NODE\ntraefikee-control-node-1             CONTROL NODE\ndata-node-traefikee-data-node-l6x2s  DATA NODE\ndata-node-traefikee-data-node-wmm6n  DATA NODE\ndata-node-traefikee-data-node-h2pgb  DATA NODE\ntraefikee-control-node-2             CONTROL NODE (Current Leader)\ntraefikee-control-node-0             CONTROL NODE\n\nAs expected we have:\n\n * A Control Plane composed of 3 nodes, which is the default\n * A Data Plane composed of 6 nodes, which is the default behavior (see the\n   flag\n   “ — datanodes”) [https://docs.containo.us/installing/teectl-cli/] . TraefikEE\n   sets up 1 data node per worker node of the Kubernetes cluster. It uses a \n   Kubernetes Daemon Set\n   [https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/] under\n   the hood.\n\nAccessing the Web Dashboard\nOn the previous post, we used the kubectl port-forward command to access the\ndashboard by forwarding a port locally\n[https://kubernetes.io/docs/tasks/access-application-cluster/port-forward-access-application-cluster/]\n.\n\nAs this Kubernetes cluster is available from the outside, we want to use a\npublic hostname to access it instead, so the end users can access your\napplications from anywhere.\n\nUsing the command line kubectl, fetch the public hostname of the Amazon Elastic\nLoad-Balancer allocated during the installation (column EXTERNAL-IP):\n\n$ kubectl get svc -n traefikee traefikee-lb\n\nNAME          TYPE         EXTERNAL-IP\ntraefikee-lb  LoadBalancer a277b89-820.us-east-1.elb.amazonaws.com\n\nYou can now access the dashboard on the URL http://<EXTERNAL-IP>/dashboard/ .\n\nAll your nodes are belong to us> (A voice in the background): My Kubernetes Cluster does not show any\nEXTERNAL-IP. How can I reach the dashboard (and applications)?\n> Containous: Most of Kubernetes providers propose out of the box implementation\nfor the Service of type “LoadBalancer”\n[https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer].\nIf it is not your case, take a look at https://metallb.universe.tf/.\nDeploy an Application\nAs we did on the previous post, we deploy an application based on \nhttps://github.com/containous/whoami. \n\n$ kubectl apply -f https://gist.githubusercontent.com/dduportal/ad5e68ffcd9e39c65bdf4af7224304a0/raw/0ff70f9ae50d7930a9fa6c06bdc15253c81b8af4/whoami.yaml\n\nThe dashboard updates itself once the application is deployed:\n\nYou can now reach the application at the URL http://<EXTERNAL-IP>/whoami :\n\nHigh Availability\nWhat happens if one of the 6 worker node goes down by accident or for \nmaintenance\n[https://kubernetes.io/docs/tasks/administer-cluster/safely-drain-node/]?\n\n * 1 of the 6 data nodes goes down (or is rescheduled). The load balancer\n   forwards the traffic to the 5 remaining nodes: no request are lost!\n * If 1 of the control nodes was running on this worker node, the remaining\n   nodes elect a new leader and take care of the configuration, until the node\n   comes up.\n\n> (A voice in the background): Aren’t the control node part of a Raft cluster? If\nyes, then what happens if only 2 control nodes are up?\n> Containous: The workload handled by the failed node is distributed to the 2\nothers, so the cluster does not loose data and continues to work as expected.\nHowever if the failed node does not comes back, then you are not tolerant to\nanother failure. You can run a TraefikEE of 5 control nodes to be fault tolerant\nto 2 failures. You can get more information on the TraefikEE documentation or\nchek how the Raft consensus work here [http://thesecretlivesofdata.com/raft/].\nTo demonstrate this high-availability behavior, we will:\n\n * Run a load test on the “whoami” application served by TraefikEE\n * Restart 1 of the 6 Kubernetes worker node\n * Verify that no requests are lost\n * Validate that the cluster comes back in an healthy state once the Kubernetes\n   worker node is restarted\n\nLoad Testing the whoami Application\nWe’ll use “slapper” (https://github.com/ikruglov/slapper), a go command line\nproviding a real-time view of the load test in the console.\n\n# You need go - https://golang.org/dl/\n\n$ go get -u github.com/ikruglov/slapper\n...\n\n$ which slapper\n\"${GOPATH}/bin/slapper\"\n\nSlapper requires a “target file\n[https://github.com/ikruglov/slapper#targets-syntax]” which is a text file\ndescribing the load-testing scenario. Our load-testing scenario is simple: we\nwant to emit HTTP GET requests to the URL of the whoami application.\n\n$ cat whoami.target\nGET http://a277bd4f21fde11e9b5150ea2ab8b589-823458350.us-east-1.elb.amazonaws.com/whoami\n\nLet’s start the load testing for 30s, with 50 requests per seconds, and with an\nadapted scale (with an example output):\n\n$ slapper -targets ./whoami.target -minY 100ms -maxY 800ms -timeout 30s -rate 50\n\nsent: 198    in-flight: 6  rate:   50/50 RPS responses: [200]: 192\n\n100-101 ms: [     0/     0]\n101-102 ms: [     0/     0]\n102-103 ms: [     0/     0]\n103-105 ms: [     0/     0]\n105-106 ms: [     0/     0]\n106-108 ms: [    13/     0] **************************\n108-110 ms: [   112/     0] ************************************\n110-113 ms: [    40/     0] ****************************************\n113-115 ms: [    10/     0] ********************\n115-118 ms: [     3/     0] ******\n118-121 ms: [     4/     0] ********\n121-125 ms: [     2/     0] ****\n125-129 ms: [     0/     0]\n129-133 ms: [     0/     0]\n133-138 ms: [     0/     0]\n138-144 ms: [     0/     0]\n144-150 ms: [     0/     0]\n...\n800+ ms: [     0/     0]\n\nReboot a Worker Node\nUsing the aws and kubectlcommand lines, we get the EC2 instance ID of a worker\nnode, and restart it:\n\n# Select one of the 6 Kubernetes nodes\n$ kubectl get nodes\nNAME STATUS ROLES AGE VERSION\n...\nip-172–20–38–193.ec2.internal Ready node 1d v1.11.6\n...\n\n# Get the EC2 instance ID\n$ aws ec2 describe-instances --filters \"Name=private-dns-name,Values=ip-172-20-38-193.ec2.internal\" | grep InstanceId\n\"InstanceId\": \"i-0fdc6a4f95908a2ba\",\n\n# Restart the instance\n$ aws ec2 reboot-instances --instance-ids=i-0fdc6a4f95908a2ba\n\nThe Dashboard immediately reports that a control node and a data node are\nunhealthy ( traefikee-control-node-0 and data-node-traefikee-wmm6n in this\ncase):\n\nValidate High Availability\nIf you check back the load testing, you can see that no requests have been lost\nor in error. You might see, however, a punctual growth on the response time (+-\n100ms):\n\nsent: 25736  in-flight: 2 rate:   50/50 RPS responses: [200]: 25734\n\nAs soon as the EC2 instance has restarted, all the failed nodes (Kubernetes and\nTraefikEE) are going back online:\n\nTraefikEE cluster back to nominal stateCheck this video of a the load test\nrunning with a worker node randomly killed:\n\nThat’s all for today! We demonstrated the high availability feature of\nTraefikEE. Oh, and don’t forget to clean your cluster:\n\nkops delete cluster --name=\"${NAME}\"\n\n\n--------------------------------------------------------------------------------\n\nOn the next post “The Journey to Traefik Enterprise Edition: HTTPS for everyone\n[/blog/the-journey-to-traefik-enterprise-edition-https-for-everyone-90a36b33600/]\n”, we’ll focus on how to use TraefikEE with Let’s Encrypt to get HTTPS by\ndefault.","html":"<figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/12/image-9.png\" class=\"kg-image\"></figure><p>Welcome to the third step of our journey towards<a href=\"https://containous.ghost.io/traefikee/\"> Traefik Enterprise Edition</a> .</p><p>After the two first posts <em><em><a href=\"https://containous.ghost.io/blog/the-journey-to-traefik-enterprise-edition-join-the-early-access-program-b73e07d62f30/https://containo.us/blog/the-journey-to-traefik-enterprise-edition-join-the-early-access-program-b73e07d62f30/\">Join the“Early Access” Program</a></em></em>, and <em><em><a href=\"https://containous.ghost.io/blog/the-journey-to-traefik-enterprise-edition-product-evaluation-4828508cbc8/\">Product Evaluation</a></em></em>), let’s get real and evaluate TraefikEE’s high availability feature.</p><p>The previous post described how to install TraefikEE on a local machine, which is not a realistic environment. Today, we’ll use a Kubernetes multi-node cluster deployed in Amazon EC2 as a more realistic platform for running TraefikEE.</p><h2 id=\"creating-a-kubernetes-cluster-with-kops\">Creating a Kubernetes Cluster with kops</h2><p>The first step is to get a multi-node Kubernetes cluster up and running somewhere in the cloud.</p><p><code>kops</code> (aka. “Kubernetes Operations”) is a tool provided by the Kubernetes community. It provides a command line to create and manage Kubernetes clusters on cloud infrastructures as <a href=\"https://aws.amazon.com/ec2/\" rel=\"noopener\">Amazon EC2</a>, <a href=\"https://cloud.google.com/compute/?hl=fr\" rel=\"noopener\">Google Compute Engine</a> or <a href=\"https://www.digitalocean.com/\" rel=\"noopener\">Digital Ocean</a>.</p><p>Using the kops tutorial for AWS, we have the following requirements set up:</p><ul><li>The <code>aws</code> command line tool installed</li><li>AWS API access credentials loaded (<a href=\"https://github.com/mmatur/aws-mfa\" rel=\"noopener\">check this project</a> from <a href=\"https://medium.com/u/c01753d22e74?source=post_page-----7421718be2d8----------------------\" rel=\"noopener\">Michael MATUR</a> if you need MFA)</li><li>The <code>kops</code> command line tool installed</li><li>One of the 3 DNS scenarios configured</li><li>An AWS S3 bucket created to store kops configuration</li></ul><p>We can create a Kubernetes cluster with 3 masters and 6 worker nodes. The worker nodes are a <a href=\"https://aws.amazon.com/ec2/instance-types/t2/\" rel=\"noopener\">t2.large</a> types, with 2 CPUs and 8 Gb memory each:</p><pre><code class=\"language-shell\">$ export NAME=traefikee-demo.containous.cloud\n$ export KOPS_STATE_STORE=s3://&lt;YOUR BUCKET&gt;\n$ export ROUTE53_ZONE_ID=&lt;ROUTE53_ZONE_ID&gt;\n\n$ kops create cluster \\\n  --zones us-east-1a \\\n  --dns-zone=\"${ROUTE53_ZONE_ID}\" \\\n  --node-size=\"t2.large\" \\\n  --master-count=3 \\\n  --node-count=6 \\\n\"${NAME}\"</code></pre><p>Once the cluster is created, validate its state with <code>kops</code>, and verify the access to the Kubernetes API with the <code>kubectl</code>:</p><pre><code class=\"language-shell\">$ kops validate cluster --name=\"${NAME}\"\nValidating cluster traefikee-demo.containous.cloud\n...\n\nYour cluster traefikee-demo.containous.cloud is ready\n\n$ kubectl get nodes\nNAME STATUS ROLES AGE VERSION\nip-172–20–33–152.ec2.internal Ready node 1d v1.11.6\nip-172–20–37–195.ec2.internal Ready master 1d v1.11.6\nip-172–20–38–193.ec2.internal Ready node 1d v1.11.6\nip-172–20–42–46.ec2.internal Ready master 1d v1.11.6\nip-172–20–44–104.ec2.internal Ready node 1d v1.11.6\nip-172–20–52–184.ec2.internal Ready node 1d v1.11.6\nip-172–20–60–90.ec2.internal Ready node 1d v1.11.6\nip-172–20–61–254.ec2.internal Ready node 1d v1.11.6\nip-172–20–62–134.ec2.internal Ready master 1d v1.11.6</code></pre><p>We can now proceed to install TraefikEE on this cluster.</p><h2 id=\"traefikee-installation\">TraefikEE Installation</h2><p>We expect that the command line <code>traefikeectl</code> command is already installed on your machine. If you haven’t done it yet, check the \"Install traefikeectl\" section of the <a href=\"https://docs.containo.us\">Installation Guide</a>.</p><pre><code class=\"language-shell\">$ traefikeectl version\nVersion: v1.0.0-beta17\nCodename: Gewurztraminer\nGo version: go1.11.4\nBuilt: 2019-01-22_10:12:50AM\nOS/Arch: darwin/amd64</code></pre><p>Next step: installation of TraefikEE in one line, using <code>traefikeectl</code>, as covered on <a href=\"https://containous.ghost.io/blog/the-journey-to-traefik-enterprise-edition-product-evaluation-4828508cbc8/\">the previous blog post</a>.</p><blockquote><em><em>Don’t forget it takes some time to download all the required resources</em></em></blockquote><pre><code class=\"language-shell\">$ traefikeectl install \\\n  --licensekey=\"$(cat /keybase/…/traefikee-license)\" \\\n  --dashboard \\\n  --kubernetes\n\n# ...\n\nYou can access the dashboard with the following credentials:\n\nUsername: admin\nPassword: 384bae9a1fe11670\n\n✔ Installation successful</code></pre><blockquote>Don’t forget to write down the password for later.</blockquote><p>Congratulations, your TraefikEE cluster is installed locally! The last step is to check the topology of the TraefikEE cluster:</p><pre><code class=\"language-shell\">$ traefikeectl list-nodes\nName                                 Role\n----                                 ----\ndata-node-traefikee-data-node-864tl  DATA NODE\ndata-node-traefikee-data-node-jptsq  DATA NODE\ndata-node-traefikee-data-node-rn4x8  DATA NODE\ntraefikee-control-node-1             CONTROL NODE\ndata-node-traefikee-data-node-l6x2s  DATA NODE\ndata-node-traefikee-data-node-wmm6n  DATA NODE\ndata-node-traefikee-data-node-h2pgb  DATA NODE\ntraefikee-control-node-2             CONTROL NODE (Current Leader)\ntraefikee-control-node-0             CONTROL NODE</code></pre><p>As expected we have:</p><ul><li>A Control Plane composed of <strong><strong>3</strong></strong> nodes, which is the default</li><li>A Data Plane composed of <strong><strong>6</strong></strong> nodes, which is <a href=\"https://docs.containo.us/installing/teectl-cli/\">the default behavior (see the flag “ — datanodes”)</a> . TraefikEE sets up 1 data node per worker node of the Kubernetes cluster. It uses a <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/\" rel=\"noopener\">Kubernetes Daemon Set</a> under the hood.</li></ul><h2 id=\"accessing-the-web-dashboard\">Accessing the Web Dashboard</h2><p>On the previous post, we used the <code>kubectl port-forward</code> command to access the dashboard by <a href=\"https://kubernetes.io/docs/tasks/access-application-cluster/port-forward-access-application-cluster/\" rel=\"noopener\">forwarding a port locally</a>.</p><p>As this Kubernetes cluster is available from the outside, we want to use a public hostname to access it instead, so the end users can access your applications from anywhere.</p><p>Using the command line <code>kubectl</code>, fetch the public hostname of the Amazon Elastic Load-Balancer allocated during the installation (column <code>EXTERNAL-IP</code>):</p><pre><code class=\"language-shell\">$ kubectl get svc -n traefikee traefikee-lb\n\nNAME          TYPE         EXTERNAL-IP\ntraefikee-lb  LoadBalancer a277b89-820.us-east-1.elb.amazonaws.com</code></pre><p>You can now access the dashboard on the URL <code>http://&lt;EXTERNAL-IP&gt;/dashboard/</code> .</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-41.png\" class=\"kg-image\"><figcaption>All your nodes are belong to us</figcaption></figure><blockquote><em><em><strong><strong>(A voice in the background):</strong></strong> My Kubernetes Cluster does not show any EXTERNAL-IP. How can I reach the dashboard (and applications)?</em></em></blockquote><blockquote><em><em><strong><strong>Containous:</strong></strong> Most of Kubernetes providers propose out of the box implementation for the <a href=\"https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer\" rel=\"noopener\">Service of type “LoadBalancer”</a>. If it is not your case, take a look at <a href=\"https://metallb.universe.tf/\" rel=\"noopener\">https://metallb.universe.tf/</a>.</em></em></blockquote><h2 id=\"deploy-an-application\">Deploy an Application</h2><p>As we did on the previous post, we deploy an application based on <a href=\"https://github.com/containous/whoami\" rel=\"noopener\">https://github.com/containous/whoami</a>. </p><pre><code class=\"language-shell\">$ kubectl apply -f https://gist.githubusercontent.com/dduportal/ad5e68ffcd9e39c65bdf4af7224304a0/raw/0ff70f9ae50d7930a9fa6c06bdc15253c81b8af4/whoami.yaml</code></pre><p>The dashboard updates itself once the application is deployed:</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-42.png\" class=\"kg-image\"></figure><p>You can now reach the application at the URL <code>http://&lt;EXTERNAL-IP&gt;/whoami</code> :</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-43.png\" class=\"kg-image\"></figure><h2 id=\"high-availability\">High Availability</h2><p>What happens if one of the 6 worker node goes down by accident or for <a href=\"https://kubernetes.io/docs/tasks/administer-cluster/safely-drain-node/\" rel=\"noopener\">maintenance</a>?</p><ul><li>1 of the 6 data nodes goes down (or is rescheduled). The load balancer forwards the traffic to the 5 remaining nodes: no request are lost!</li><li>If 1 of the control nodes was running on this worker node, the remaining nodes elect a new leader and take care of the configuration, until the node comes up.</li></ul><blockquote><em><em><strong><strong>(A voice in the background):</strong></strong> Aren’t the control node part of a Raft cluster? If yes, then what happens if only 2 control nodes are up?</em></em></blockquote><blockquote><em><em><strong><strong>Containous:</strong></strong> The workload handled by the failed node is distributed to the 2 others, so the cluster does not loose data and continues to work as expected. However if the failed node does not comes back, then you are not tolerant to another failure. You can run a TraefikEE of 5 control nodes to be fault tolerant to 2 failures. You can get more information on the TraefikEE documentation or chek how the Raft consensus work <a href=\"http://thesecretlivesofdata.com/raft/\" rel=\"noopener\">here</a>.</em></em></blockquote><p>To demonstrate this high-availability behavior, we will:</p><ul><li>Run a load test on the “<em><em>whoami</em></em>” application served by TraefikEE</li><li>Restart 1 of the 6 Kubernetes worker node</li><li>Verify that no requests are lost</li><li>Validate that the cluster comes back in an healthy state once the Kubernetes worker node is restarted</li></ul><h2 id=\"load-testing-the-whoami-application\">Load Testing the whoami Application</h2><p>We’ll use “slapper” (<a href=\"https://github.com/ikruglov/slapper\" rel=\"noopener\">https://github.com/ikruglov/slapper</a>), a go command line providing a real-time view of the load test in the console.</p><pre><code class=\"language-shell\"># You need go - https://golang.org/dl/\n\n$ go get -u github.com/ikruglov/slapper\n...\n\n$ which slapper\n\"${GOPATH}/bin/slapper\"</code></pre><p>Slapper requires a “<a href=\"https://github.com/ikruglov/slapper#targets-syntax\" rel=\"noopener\">target file</a>” which is a text file describing the load-testing scenario. Our load-testing scenario is simple: we want to emit HTTP GET requests to the URL of the <em><em>whoami</em></em> application.</p><pre><code class=\"language-shell\">$ cat whoami.target\nGET http://a277bd4f21fde11e9b5150ea2ab8b589-823458350.us-east-1.elb.amazonaws.com/whoami</code></pre><p>Let’s start the load testing for 30s, with 50 requests per seconds, and with an adapted scale (with an example output):</p><pre><code class=\"language-shell\">$ slapper -targets ./whoami.target -minY 100ms -maxY 800ms -timeout 30s -rate 50\n\nsent: 198    in-flight: 6  rate:   50/50 RPS responses: [200]: 192\n\n100-101 ms: [     0/     0]\n101-102 ms: [     0/     0]\n102-103 ms: [     0/     0]\n103-105 ms: [     0/     0]\n105-106 ms: [     0/     0]\n106-108 ms: [    13/     0] **************************\n108-110 ms: [   112/     0] ************************************\n110-113 ms: [    40/     0] ****************************************\n113-115 ms: [    10/     0] ********************\n115-118 ms: [     3/     0] ******\n118-121 ms: [     4/     0] ********\n121-125 ms: [     2/     0] ****\n125-129 ms: [     0/     0]\n129-133 ms: [     0/     0]\n133-138 ms: [     0/     0]\n138-144 ms: [     0/     0]\n144-150 ms: [     0/     0]\n...\n800+ ms: [     0/     0]</code></pre><h2 id=\"reboot-a-worker-node\">Reboot a Worker Node</h2><p>Using the <code>aws</code> and <code>kubectl</code>command lines, we get the EC2 instance ID of a worker node, and restart it:</p><pre><code class=\"language-shell\"># Select one of the 6 Kubernetes nodes\n$ kubectl get nodes\nNAME STATUS ROLES AGE VERSION\n...\nip-172–20–38–193.ec2.internal Ready node 1d v1.11.6\n...\n\n# Get the EC2 instance ID\n$ aws ec2 describe-instances --filters \"Name=private-dns-name,Values=ip-172-20-38-193.ec2.internal\" | grep InstanceId\n\"InstanceId\": \"i-0fdc6a4f95908a2ba\",\n\n# Restart the instance\n$ aws ec2 reboot-instances --instance-ids=i-0fdc6a4f95908a2ba</code></pre><p>The Dashboard immediately reports that a control node and a data node are unhealthy ( <code>traefikee-control-node-0</code> and <code>data-node-traefikee-wmm6n</code> in this case):</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-44.png\" class=\"kg-image\"></figure><h2 id=\"validate-high-availability\">Validate High Availability</h2><p>If you check back the load testing, you can see that no requests have been lost or in error. You might see, however, a punctual growth on the response time (+- 100ms):</p><pre><code class=\"language-shell\">sent: 25736  in-flight: 2 rate:   50/50 RPS responses: [200]: 25734</code></pre><p>As soon as the EC2 instance has restarted, all the failed nodes (Kubernetes and TraefikEE) are going back online:</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-45.png\" class=\"kg-image\"><figcaption>TraefikEE cluster back to nominal state</figcaption></figure><p>Check this video of a the load test running with a worker node randomly killed:</p><figure class=\"kg-card kg-embed-card\"><iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/ghYsR5CuNiQ?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><p>That’s all for today! We demonstrated the high availability feature of TraefikEE. Oh, and don’t forget to clean your cluster:</p><pre><code class=\"language-shell\">kops delete cluster --name=\"${NAME}\"</code></pre><hr><p>On the next post “<a href=\"https://containous.ghost.io/blog/the-journey-to-traefik-enterprise-edition-https-for-everyone-90a36b33600/\">The Journey to Traefik Enterprise Edition: HTTPS for everyone</a>”, we’ll focus on how to use TraefikEE with Let’s Encrypt to get HTTPS by default.</p>","url":"https://containous.ghost.io/blog/the-journey-to-traefik-enterprise-edition-high-availability-7421718be2d8/","canonical_url":null,"uuid":"68a2548b-36b0-4fe7-9993-4eba958e6280","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dd7c361f1db6f0038c74326","reading_time":7}},{"node":{"id":"Ghost__Post__5dd7e6ebf1db6f0038c7437f","title":"The Journey to Traefik Enterprise Edition: Product Evaluation","slug":"the-journey-to-traefik-enterprise-edition-product-evaluation-4828508cbc8","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/11/ee-evaluation.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/b5028e39443bd90d0ac061a694e3e926/f3583/ee-evaluation.png","srcSet":"/static/b5028e39443bd90d0ac061a694e3e926/630fb/ee-evaluation.png 300w,\n/static/b5028e39443bd90d0ac061a694e3e926/2a4de/ee-evaluation.png 600w,\n/static/b5028e39443bd90d0ac061a694e3e926/f3583/ee-evaluation.png 1200w,\n/static/b5028e39443bd90d0ac061a694e3e926/bbee5/ee-evaluation.png 1800w,\n/static/b5028e39443bd90d0ac061a694e3e926/0ef64/ee-evaluation.png 2400w,\n/static/b5028e39443bd90d0ac061a694e3e926/5363e/ee-evaluation.png 2450w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"Welcome to the second post of our journey towards Traefik Enterprise Edition . Let’s continue our journey by quickly evaluating the product on your local machine...","custom_excerpt":"Welcome to the second post of our journey towards Traefik Enterprise Edition . Let’s continue our journey by quickly evaluating the product on your local machine...","visibility":"public","created_at_pretty":"22 November, 2019","published_at_pretty":"January 22, 2019","updated_at_pretty":"21 May, 2020","created_at":"2019-11-22T13:47:23.000+00:00","published_at":"2019-01-22T13:47:00.000+00:00","updated_at":"2020-05-21T23:32:20.000+00:00","meta_title":"The Journey to Traefik Enterprise Edition: Product Evaluation","meta_description":"Welcome to the second post of our journey towards Traefik Enterprise Edition . Let’s continue our journey by quickly evaluating the product.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Damien Duportal","slug":"damien","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/dduportal_light.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Damien Duportal","slug":"damien","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/11/dduportal_light.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"How To","slug":"how-to","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Welcome to the second post of our journey towards Traefik Enterprise Edition\n[/traefikee/] .\n\nAfter our first step (Join the“Early Access” Program\n[/blog/the-journey-to-traefik-enterprise-edition-join-the-early-access-program-b73e07d62f30/]\n), let’s continue by doing a quick evaluation the product on your local machine.\n\n> (A voice in the background): But, the shiny website says that it is a \ndistributed version. How can we assess this on a single machine?\n> (Another voice in the background): A developer machine is not a production\nenvironment!\n> Containous: These assertions are 100% right dear users! Following the core\nprinciples of Traefik, we want to keep things simple and start by getting\nTraefikEE up and running on a “testing system”. Don’t worry: next steps of the\njourney are coming, to cover other topics from high availability, to\ninstallation on production systems.\nTraefikEE Installation\nThe next step of the journey is to install TraefikEE: Let’s follow the provided \ndocumentation [https://docs.containo.us/]!\n\n“TraefikEE-Cuddle”\n\nThe “Getting Started with Installation\n[https://docs.containo.us/getting-started/]” page recommends to use the command\nline traefikeectl and guides you on installing this command:\n\n$ curl -sSL -o /usr/local/bin/traefikeectl https://get-the-link-for-your-operating-system/traefikeectl\n\n$ shasum -a256 /usr/local/bin/traefikeectl # Check against the SHA256 checksums for your release\n\n$ chmod a+x /usr/local/bin/traefikeectl # Make it executable\n\n$ traefikeectl version\nVersion:      v1.0.0-beta16\nCodename:     Gewurztraminer\nGo version:   go1.11.4\nBuilt:        2019-01-21_06:00:54PM\nOS/Arch:      darwin/amd64\n\nKubernetes Time!\n\nTraefikEE can be installed on different platforms but, this example uses \nKubernetes [https://kubernetes.io/].\n\n> (A voice in the background): I don’t know Kubernetes\nContainous: You don’t have to for this evaluation. But you can learn it from \nhttps://kubernetes.io/docs/tutorials/kubernetes-basics/\nA Kubernetes installation is required. Don’t worry, we are not yak shaving\n[https://en.wiktionary.org/wiki/yak_shaving] to select where and how install\nKubernetes.\n\nInstead we’ll use the awesome “KinD” (Kubernetes inside Docker)\n[https://github.com/kubernetes-sigs/kind] tool providing a disposable Kubernetes\nlocally.\n\n> (From https://github.com/kubernetes-sigs/kind), kind is a tool for running local\nKubernetes clusters using Docker container \"nodes\".\nkind is primarily designed for testing Kubernetes 1.11+, initially targeting the\nconformance tests. If you have Go [https://golang.org/] and Docker\n[https://www.docker.com/] installed go get sigs.k8s.io/kind && kind create\ncluster is all you need\nInstall your Kubernetes cluster for the evaluation:\n\n$ kind create cluster --name=traefikee\nCreating cluster 'kind-traefikee' ...\n✓ Ensuring node image (kindest/node:v1.12.3) 🖼\n✓ [kind-traefikee-control-plane] Creating node container 📦\n✓ [kind-traefikee-control-plane] Fixing mounts 🗻\n✓ [kind-traefikee-control-plane] Starting systemd 🖥\n✓ [kind-traefikee-control-plane] Waiting for docker to be ready 🐋\n✓ [kind-traefikee-control-plane] Starting Kubernetes (this may take a minute) ☸\n\nCluster creation complete. You can now use the cluster with:\nexport KUBECONFIG=\"$(kind get kubeconfig-path --name=\"traefikee\")\"\nkubectl cluster-info\n\n$ export KUBECONFIG=\"$(kind get kubeconfig-path --name=\"traefikee\")\"\n\n$ kubectl cluster-info\nKubernetes master is running at https://localhost:55243\n\n# We have a Kubernetes cluster ready to use!\n\nPlease note that any local Kubernetes installation passing the conformance tests\ncan be used for the evaluation (as Docker4Mac or Docker4Windows).\n\nTrafikEE Installation\n\nFollowing the official documentation [https://docs.containo.us], you may install\nTraefikEE in one line, using traefikeectl . It might take a few minute to\ndownload all the required resources:\n\n$ traefikeectl install \\\n  --licensekey=\"$(cat /keybase/.../traefikee-license)\" \\\n  --dashboard \\\n  --kubernetes\n...\n\nYou can access the dashboard with the following credentials:\n\nUsername: admin\nPassword: 4087abf2354666d9\n\n✔ Installation successful\n\nCongratulations, your TraefikEE cluster is installed locally!\n\nA Tour of TraefikEE\nTraefikEE is installed, now what?\n\nFirst, we have to open access from your web-browser to the cluster:\n\n# Forward TraefikEE data plane's port 80 to your localhost:8000\nkubectl port-forward -n traefikee \"$(kubectl get pod -n traefikee | awk '{print $1}' | grep data-node)\" 8000:80 &\n\nTraefikEE is now exposed on your machine on the following URL:\nhttp://localhost:8000 .\n\n> On a production-grade Kubernetes installation, you would use your external Load\nBalancer’s public hostname and port.\nWeb Dashboard\n\nLet’s start the tour with the Web Dashboard, which is enabled because we used\nthe flag--dashboard during the installation.\n\nOpen the URL http://localhost:8000 and authenticate with the username and\npassword credentials from the traefikeectl install command’s output from\nearlier.\n\n> In this example, the username is admin and the password is d4087abf2354666d9dsds\n. These credentials are generated automatically during the installation.\nYou can see the default section named “Providers” which shows you the\nTraefikEE’s routing configuration, generated from Kubernetes:\n\nLooks like Traefik’s WebUIUsing the top bar, navigate to the “Metrics” section\nto get an overview of the incoming request’s metrics.\n\n> (A voice in the background): Traefik also provides a “Metrics” page, what is the\nvalue of this one?\nContainous: It’s the same, except that metrics are aggregated from all the data\nplane’s nodes.\nLook, someone forgot its password and got HTTP/401 responsesIt’s time to get an\noverview of the cluster. Browse to the “Cluster” section to check that you have\na Control Plane of 3 nodes, and a Data Plane of 1 node.\n\n> (A voice in the background): Wait, isn’t TraefikEE distributed? Why only 1 node\nin the data plane?\nContainous: By default, there is 1 “TraefikEE Data Node” per Kubernetes node. We\nare using a single-node Kubernetes hence 1 data node. Wait for the next blog to\nlearn more about the distribution.\nIt’s a nice cluster that you have thereOperations with traefikeectl\n\nNext step of this tour is the “Smooth Operations” feature. We know that\nEngineers love automation. So we made a command line, traefikeectlto automate\nall the operations on your TraefikEE clusters.\n\nYou already tasted traefikeectl. Let’s do another example of operation by\nlisting all the cluster’s nodes with traefikeectl:\n\n$ traefikeectl list-nodes\n\nName                                 Role\n----                                 ----\ndata-node-traefikee-data-node-5fplw  DATA NODE\ntraefikee-control-node-0             CONTROL NODE (Current Leader)\ntraefikee-control-node-2             CONTROL NODE\ntraefikee-control-node-1             CONTROL NODE\n\nThe next section shows another example, but you can already check the \ntraefikeectl ‘s Command Line Reference Documentation\n[https://docs.containo.us/installing/teectl-cli/] to learn more about the\noperations features.\n\nDeploy an application\n\nTraefikEE is an edge router, which main goal is to route incoming request into\nyour applications.\n\n> (A voice in the background): Did you just say “applications”? But there are no\napplications deployed into this Kubernetes, only TraefikEE.\nContainous: Patience, there is an example below. But let that sink in: Isn’t the\nDashboard an application with incoming traffic?\nLet’s deploy an example application. It’s an HTTP web service, based on\ngithub.com/containous/whoami, which responds an HTML page with the headers of\nyour request.\n\n$ kubectl apply -f https://gist.githubusercontent.com/dduportal/ad5e68ffcd9e39c65bdf4af7224304a0/raw/8b87143b084c612f86d66f587df7c058c7fa1aa0/whoami.yaml\n\nCheck the dashboard again. After a few seconds, the routing configuration for\nthe application “whoami” is automatically picked by TraefikEE from Kubernetes: a\nfrontend and 2 associated backends (the 2 replicas).\n\nThe application is reachable at the URL localhost:8000/whoami. As the “whoami”\napplication is scaled to 2 instances, try to reload the page multiple time to\nsee the field “Hostname” changing, due to the Load Balancing.\n\nSuch Web, Much Text\n--------------------------------------------------------------------------------\n\nThat’s all for today and this first quick tour. On the next post “The Journey\nto\nTraefik Enterprise Edition: High Availability\n[/blog/the-journey-to-traefik-enterprise-edition-high-availability-7421718be2d8/]\n”, we’ll cover the distributed features of TraefikEE.","html":"<figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2019/12/image-10.png\" class=\"kg-image\"></figure><p>Welcome to the second post of our journey towards <a href=\"https://containous.ghost.io/traefikee/\">Traefik Enterprise Edition</a> .</p><p>After our first step (<em><em><a href=\"https://containous.ghost.io/blog/the-journey-to-traefik-enterprise-edition-join-the-early-access-program-b73e07d62f30/\">Join the“Early Access” Program</a></em></em>), let’s continue by doing a quick evaluation the product on your local machine.</p><blockquote><em><em><strong><strong>(A voice in the background):</strong></strong> But, the shiny website says that it is a <strong><strong>distributed</strong></strong> version. How can we assess this on a single machine?</em></em></blockquote><blockquote><em><em><strong><strong>(Another voice in the background):</strong></strong> A developer machine is <strong><strong>not</strong></strong> a production environment!</em></em></blockquote><blockquote><em><em><strong><strong>Containous:</strong></strong> These assertions are 100% right dear users! Following the core principles of Traefik, we want to keep things simple and start by getting TraefikEE up and running on a “testing system”. Don’t worry: next steps of the journey are coming, to cover other topics from high availability, to installation on production systems.</em></em></blockquote><h2 id=\"traefikee-installation\">TraefikEE Installation</h2><p>The next step of the journey is to install TraefikEE: Let’s follow the provided <a href=\"https://docs.containo.us/\">documentation</a>!</p><p><strong><strong><em><em>“TraefikEE-Cuddle”</em></em></strong></strong></p><p>The “<a href=\"https://docs.containo.us/getting-started/\">Getting Started with Installation</a>” page recommends to use the command line <code>traefikeectl</code> and guides you on installing this command:</p><pre><code class=\"language-shell\">$ curl -sSL -o /usr/local/bin/traefikeectl https://get-the-link-for-your-operating-system/traefikeectl\n\n$ shasum -a256 /usr/local/bin/traefikeectl # Check against the SHA256 checksums for your release\n\n$ chmod a+x /usr/local/bin/traefikeectl # Make it executable\n\n$ traefikeectl version\nVersion:      v1.0.0-beta16\nCodename:     Gewurztraminer\nGo version:   go1.11.4\nBuilt:        2019-01-21_06:00:54PM\nOS/Arch:      darwin/amd64</code></pre><p><strong><strong><em><em>Kubernetes Time!</em></em></strong></strong></p><p>TraefikEE can be installed on different platforms but, this example uses <a href=\"https://kubernetes.io/\" rel=\"noopener\">Kubernetes</a>.</p><blockquote><em><em><strong><strong>(A voice in the background):</strong></strong> I don’t know Kubernetes</em></em><br><em><em><strong><strong>Containous:</strong></strong> You don’t have to for this evaluation. But you can learn it from <a href=\"https://kubernetes.io/docs/tutorials/kubernetes-basics/\" rel=\"noopener\">https://kubernetes.io/docs/tutorials/kubernetes-basics/</a></em></em></blockquote><p>A Kubernetes installation is required. Don’t worry, we are not <a href=\"https://en.wiktionary.org/wiki/yak_shaving\" rel=\"noopener\">yak shaving</a> to select where and how install Kubernetes.</p><p>Instead we’ll use the awesome <a href=\"https://github.com/kubernetes-sigs/kind\" rel=\"noopener\">“KinD” (Kubernetes inside Docker)</a> tool providing a disposable Kubernetes locally.</p><blockquote><em><em>(From <a href=\"https://github.com/kubernetes-sigs/kind\" rel=\"noopener\">https://github.com/kubernetes-sigs/kind</a></em>), <em><code><em>kind</em></code> is a tool for running local Kubernetes clusters using Docker container \"nodes\".</em></em><br><em><em><code><em>kind</em></code> is primarily designed for testing Kubernetes 1.11+, initially targeting the conformance tests.</em> <em>If you have <a href=\"https://golang.org/\" rel=\"noopener\">Go</a> and <a href=\"https://www.docker.com/\" rel=\"noopener\">Docker</a> installed <code><em>go get sigs.k8s.io/kind &amp;&amp; kind create cluster</em></code> is all you need</em></em></blockquote><p>Install your Kubernetes cluster for the evaluation:</p><pre><code class=\"language-shell\">$ kind create cluster --name=traefikee\nCreating cluster 'kind-traefikee' ...\n✓ Ensuring node image (kindest/node:v1.12.3) 🖼\n✓ [kind-traefikee-control-plane] Creating node container 📦\n✓ [kind-traefikee-control-plane] Fixing mounts 🗻\n✓ [kind-traefikee-control-plane] Starting systemd 🖥\n✓ [kind-traefikee-control-plane] Waiting for docker to be ready 🐋\n✓ [kind-traefikee-control-plane] Starting Kubernetes (this may take a minute) ☸\n\nCluster creation complete. You can now use the cluster with:\nexport KUBECONFIG=\"$(kind get kubeconfig-path --name=\"traefikee\")\"\nkubectl cluster-info\n\n$ export KUBECONFIG=\"$(kind get kubeconfig-path --name=\"traefikee\")\"\n\n$ kubectl cluster-info\nKubernetes master is running at https://localhost:55243\n\n# We have a Kubernetes cluster ready to use!</code></pre><p><em><em>Please note that any local Kubernetes installation passing the conformance tests can be used for the evaluation (as Docker4Mac or Docker4Windows).</em></em></p><p><strong><strong><em><em>TrafikEE Installation</em></em></strong></strong></p><p>Following the <a href=\"https://docs.containo.us\">official documentation</a>, you may install TraefikEE in one line, using <code>traefikeectl</code> . It might take a few minute to download all the required resources:</p><pre><code class=\"language-shell\">$ traefikeectl install \\\n  --licensekey=\"$(cat /keybase/.../traefikee-license)\" \\\n  --dashboard \\\n  --kubernetes\n...\n\nYou can access the dashboard with the following credentials:\n\nUsername: admin\nPassword: 4087abf2354666d9\n\n✔ Installation successful</code></pre><p>Congratulations, your TraefikEE cluster is installed locally!</p><h2 id=\"a-tour-of-traefikee\">A Tour of TraefikEE</h2><p>TraefikEE is installed, now what?</p><p>First, we have to open access from your web-browser to the cluster:</p><pre><code class=\"language-shell\"># Forward TraefikEE data plane's port 80 to your localhost:8000\nkubectl port-forward -n traefikee \"$(kubectl get pod -n traefikee | awk '{print $1}' | grep data-node)\" 8000:80 &amp;</code></pre><p>TraefikEE is now exposed on your machine on the following URL: http://localhost:8000 .</p><blockquote><em><em>On a production-grade Kubernetes installation, you would use your external Load Balancer’s public hostname and port.</em></em></blockquote><p><strong><strong><em><em>Web Dashboard</em></em></strong></strong></p><p>Let’s start the tour with the Web Dashboard, which is enabled because we used the flag<code>--dashboard</code> during the installation.</p><p>Open the URL http://localhost:8000 and authenticate with the username and password credentials from the <code>traefikeectl install</code> command’s output from earlier.</p><blockquote><em><em>In this example, the username is <code><em>admin</em></code> and the password is <code><em>d4087abf2354666d9dsds</em></code>. These credentials are generated automatically during the installation.</em></em></blockquote><p>You can see the default section named “Providers” which shows you the TraefikEE’s routing configuration, generated from Kubernetes:</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-46.png\" class=\"kg-image\"><figcaption>Looks like Traefik’s WebUI</figcaption></figure><p>Using the top bar, navigate to the “Metrics” section to get an overview of the incoming request’s metrics.</p><blockquote><em><em><strong><strong>(A voice in the background):</strong></strong> Traefik also provides a “Metrics” page, what is the value of this one?</em></em><br><em><em><strong><strong>Containous:</strong></strong> It’s the same, except that metrics are aggregated from all the data plane’s nodes.</em></em></blockquote><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-47.png\" class=\"kg-image\"><figcaption>Look, someone forgot its password and got HTTP/401 responses</figcaption></figure><p>It’s time to get an overview of the cluster. Browse to the “Cluster” section to check that you have a Control Plane of 3 nodes, and a Data Plane of 1 node.</p><blockquote><em><em><strong><strong>(A voice in the background):</strong></strong> Wait, isn’t TraefikEE distributed? Why only 1 node in the data plane?</em></em><br><em><em><strong><strong>Containous:</strong></strong> By default, there is 1 “TraefikEE Data Node” per Kubernetes node. We are using a single-node Kubernetes hence 1 data node. Wait for the next blog to learn more about the distribution.</em></em></blockquote><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-48.png\" class=\"kg-image\"><figcaption>It’s a nice cluster that you have there</figcaption></figure><p><strong><strong><em><em>Operations with traefikeectl</em></em></strong></strong></p><p>Next step of this tour is the “Smooth Operations” feature. We know that Engineers love automation. So we made a command line, <code>traefikeectl</code>to automate all the operations on your TraefikEE clusters.</p><p>You already tasted <code>traefikeectl</code>. Let’s do another example of operation by listing all the cluster’s nodes with <code>traefikeectl</code>:</p><pre><code class=\"language-shell\">$ traefikeectl list-nodes\n\nName                                 Role\n----                                 ----\ndata-node-traefikee-data-node-5fplw  DATA NODE\ntraefikee-control-node-0             CONTROL NODE (Current Leader)\ntraefikee-control-node-2             CONTROL NODE\ntraefikee-control-node-1             CONTROL NODE</code></pre><p>The next section shows another example, but you can already check the <code>traefikeectl</code> ‘s <a href=\"https://docs.containo.us/installing/teectl-cli/\">Command Line Reference Documentation</a> to learn more about the operations features.</p><p><strong><strong><em><em>Deploy an application</em></em></strong></strong></p><p>TraefikEE is an edge router, which main goal is to route incoming request into your applications.</p><blockquote><em><em><strong><strong>(A voice in the background):</strong></strong> Did you just say “applications”? But there are no applications deployed into this Kubernetes, only TraefikEE.</em></em><br><em><em><strong><strong>Containous:</strong></strong> Patience, there is an example below. But let that sink in: Isn’t the Dashboard an application with incoming traffic?</em></em></blockquote><p>Let’s deploy an example application. It’s an HTTP web service, based on github.com/containous/whoami, which responds an HTML page with the headers of your request.</p><pre><code class=\"language-shell\">$ kubectl apply -f https://gist.githubusercontent.com/dduportal/ad5e68ffcd9e39c65bdf4af7224304a0/raw/8b87143b084c612f86d66f587df7c058c7fa1aa0/whoami.yaml</code></pre><p>Check the dashboard again. After a few seconds, the routing configuration for the application “whoami” is automatically picked by TraefikEE from Kubernetes: a frontend and 2 associated backends (the 2 replicas).</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-49.png\" class=\"kg-image\"></figure><p>The application is reachable at the URL localhost:8000/whoami. As the “whoami” application is scaled to 2 instances, try to reload the page multiple time to see the field “Hostname” changing, due to the Load Balancing.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-50.png\" class=\"kg-image\"><figcaption>Such Web, Much Text</figcaption></figure><hr><p>That’s all for today and this first quick tour. On the next post “<a href=\"https://containous.ghost.io/blog/the-journey-to-traefik-enterprise-edition-high-availability-7421718be2d8/\">The Journey to Traefik Enterprise Edition: High Availability</a>”, we’ll cover the distributed features of TraefikEE.</p>","url":"https://containous.ghost.io/blog/the-journey-to-traefik-enterprise-edition-product-evaluation-4828508cbc8/","canonical_url":null,"uuid":"63024ef7-edc2-4641-ad1c-3774332c9c49","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dd7e6ebf1db6f0038c7437f","reading_time":5}}]}},"pageContext":{"slug":"how-to","limit":9,"skip":9,"numberOfPages":2,"humanPageNumber":2,"prevPageNumber":1,"nextPageNumber":null,"previousPagePath":"/tag/how-to/","nextPagePath":null}},"staticQueryHashes":["1274566015","2561578252","2731221146","394248586","4145280475","749840385"]}