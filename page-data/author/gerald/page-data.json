{"componentChunkName":"component---src-templates-author-tsx","path":"/author/gerald/","result":{"data":{"ghostAuthor":{"slug":"gerald","name":"Gerald Croes","bio":null,"cover_image":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","location":null,"website":null,"twitter":null,"facebook":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5def57371efbbd0038ef55ec","title":"Traefik 2.1","slug":"traefik-2-1-in-the-wild","featured":false,"feature_image":"https://containous.ghost.io/content/images/2020/04/Traefik2.1-Blog.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/9064b05f744a66955ef4f6af07b520d9/f3583/Traefik2.1-Blog.png","srcSet":"/static/9064b05f744a66955ef4f6af07b520d9/630fb/Traefik2.1-Blog.png 300w,\n/static/9064b05f744a66955ef4f6af07b520d9/2a4de/Traefik2.1-Blog.png 600w,\n/static/9064b05f744a66955ef4f6af07b520d9/f3583/Traefik2.1-Blog.png 1200w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"Releases keep coming, but this one feels unique to us because this is our very first release since Traefik 2.0, and we've learned a lot! ","custom_excerpt":"Releases keep coming, but this one feels unique to us because this is our very first release since Traefik 2.0, and we've learned a lot! ","visibility":"public","created_at_pretty":"10 December, 2019","published_at_pretty":"December 12, 2019","updated_at_pretty":"09 April, 2020","created_at":"2019-12-10T08:28:39.000+00:00","published_at":"2019-12-12T13:03:00.000+00:00","updated_at":"2020-04-09T18:36:28.000+00:00","meta_title":"Traefik 2.1 - 2.X in the Wild","meta_description":"This release feels unique to us because this is our very first release since Traefik 2.0! Let's talk about changes introduced in 2.1.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"2.X in the Wild\n\nReleases keep coming, but this one feels unique to us because this is our very\nfirst release since Traefik 2.0, and we've learned a lot! \n\nWe all know it, you all know it: Traefik 2.0 consisted in a fest of new\nfeatures: TCP, middleware, rule syntax, YAML support, CRDs, WebUI, canary,\nmirroring, provider namespaces, new documentation, and many other inconspicuous\nchanges that will help us building the product we love towards greater heights.\n\nAll this was accompanied by tools to help the community seamlessly make the\ntransition: We developed a migration tool\n[https://github.com/containous/traefik-migration-tool], Â launched a community\nforum [https://community.containo.us/] to foster good communication and support,\nwrote new tutorials to help people have a fresh start with Traefik\n[/blog/traefik-2-0-docker-101-fc2893944b9d/] (including details about new TLS\noptions [/blog/traefik-2-tls-101-23b4fbee81f1/]), and of course we added a \nmigration guide in our documentation\n[https://docs.traefik.io/migration/v1-to-v2/]. \n\nThanks to the (immense) feedback we got from the community, we know we can do \neven better, and we were given some pointers in the right direction.\n\nBut before we talk about what we've learned and how we'll leverage this\nknowledge, let's talk about the changes introduced in 2.1. \n\nConsul Catalog Is Back!\nGreat news for Consul Catalog fans, Traefik 2.1 brings it back in the list of \nsupported providers\n[https://docs.traefik.io/v2.1/providers/overview/#supported-providers]! (But\nstay on hold because I know for sure that others will follow suit\n[https://github.com/containous/traefik/pull/5899].)\n\nImproving the CRD\nStickiness\nThe stickiness option is the ability for a load balancer to keep using the same\ntarget for a client once it has been sent to one. This option is now available\nfor our CRD users!\n\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: myName\n  namespace: myNamespace\nspec:\n  entryPoints:\n  - web\n  routes:\n  - kind: Rule\n    match: Host(`some-domain`)\n    services:\n    - kind: Service\n      name: myService\n      namespace: myNamespace\n      port: 80\n      sticky:\n        cookie: {} # Once a pod is selected for a client, it will stay the same for future calls\n\nService Load Balancing & Mirroring\nIntroduced in 2.0, service load balancing and mirroring were previously\nexclusively configurable using the file provider\n[https://docs.traefik.io/v2.0/providers/file/]. With 2.1 and the introduction of\nthe TraefikService object, we leveraged Traefik's CRD to enable such\nconfiguration in Kubernetes, and here is a first example with mirroring:\n\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: my-route-to-mirroring\n  namespace: default\n\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`some-domain`) && PathPrefix(`/some/path`)\n    kind: Rule\n    services:\n    - name: mirroring-example #targets the mirroring-example service\n      namespace: default\n      kind: TraefikService # we want to target the TraefikService we've declared (and not a K8S service named mirroring-example)\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: TraefikService\nmetadata:\n  name: mirroring-example\n  namespace: default\nspec:\n  mirroring:\n    name: v1 #sends 100% of the requests to the K8S service \"v1\" ...\n    mirrors:\n      - name: v2 # ... and sends a copy of 10% of the requests to v2\n        percent: 10\n        port: 80\n\nFor our second example, let's see how we could use service load balancing to do\ncanary deployments:\n\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: my-route-to-canary\n  namespace: default\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`some-domain`) && PathPrefix(`/some/path`)\n    kind: Rule\n    services:\n    - name: mirror1\n      namespace: default\n      kind: TraefikService\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: TraefikService\nmetadata:\n  name: canary-example\n  namespace: default\n\nspec:\n  weighted:\n    services:\n      - name: v1\n        weight: 80\n        port: 80\n      - name: v2\n        weight: 20\n        port: 80\n\nWe can now change the weight for each service (v1 and v2) at will!\n\nMixing Regular (Kubernetes) Services with TraefikServices\nWhen you define a target (with the name attribute) for your IngressRoute, by\ndefault, it targets a regular Service. If you want to target the new \nTraefikService objects, you just specify the kind attribute. What's great with\nthis system is that you can chain and combine them at will, creating intricate\npatterns depending on your needs.\n\nBelow is an example that leverages both services and TraefikServices, and that\nuses mirroring and service load balancing at the same time!\n\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: route-to-mirroring\n  namespace: default\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`some-domain`) && PathPrefix(`/some/path`)\n    kind: Rule\n    services:\n    - name: mirroring-example\n      namespace: default\n      kind: TraefikService\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: TraefikService\nmetadata:\n  name: mirroring-example\n  namespace: default\nspec:\n  mirroring:\n    name: canary-example\n    kind: TraefikService\n    mirrors:\n      - name: service-mirror\n        percent: 20\n        port: 80\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: TraefikService\nmetadata:\n  name: canary-example\n  namespace: default\nspec:\n  weighted:\n    services:\n      - name: v1\n        port: 80\n        weight: 80\n      - name: v2\n        weight: 20\n        port: 80\n\nNote on Updating the CRD for 2.1\nWhile updating an installation to v2.1, it is required to apply the new CRD and\nto enhance the existing ClusterRoledefinition. You will find out how in the \nfollowing guide [https://docs.traefik.io/migration/v2/].\n\nMore Control On Internal Routing\nIn 2.0, we've made changes to make sure people would be able to properly secure\nsome critical services offered by Traefik, like the API and the Dashboard (you\ncan see an example in our Traefik & Docker 101 article\n[/blog/traefik-2-0-docker-101-fc2893944b9d/]).\n\nPursuing the ability to configure internal services further while always giving\nusers more control, the 2.1 dashboard now shows the internal routers and\nservices involved.\n\nShows the internal services for the API and the DashboardShows the internal\nrouters leading to the internal API and Dashboard services (when users don't\nexplicitly configure them)We also jumped on the opportunity to add other\nconfigurable services to the list, namely rest@internal, ping@internal, and \nprometheus@internal. \n\n\n--------------------------------------------------------------------------------\n\nMigrating to 2.X Made Easy\nWith so many new options to customize Traefik to your every need, we understand\nthat some people can be a bit lost when migrating to 2.x, especially since\nTraefik is the kind of software that you run and forget (because it works nights\nand days without any other intervention from its users).\n\n> We have been working really hard to make this migration a matter of minutes.\nSo, if you're thinking about migrating but haven't jumped on the task yet, we\nwant to point you in the right direction:\n\n * This guide [/blog/traefik-2-0-docker-101-fc2893944b9d/] helps you truly\n   understand how Traefik 2 works on a Docker setup and will show you that 5\n   minutes are enough to have a good grasp of what you can do with it.\n * If you're looking for information about how to configure HTTPS / TLS, we\n   have\n   you covered with this guide [/blog/traefik-2-tls-101-23b4fbee81f1/]!\n * If you don't want to lose time converting your Ingress objects in Kubernetes\n   (who would want that?), we've developed a migration tool\n   [https://github.com/containous/traefik-migration-tool] that will handle it\n   for you.\n * Same goes with your traefik.toml file: the migration tool\n   [https://github.com/containous/traefik-migration-tool] can convert it for\n   you.\n * Oh, and the migration tool\n   [https://github.com/containous/traefik-migration-tool] can also convert your \n   acme.json certificate file.\n * And always feel free to engage conversation in our community forum\n   [https://community.containo.us], we read everything and do our best to\n   provide answers when we can.\n\n\n--------------------------------------------------------------------------------\n\nSupporting the 1.X Branch for Two Years!\nOur community matters, and we don't want our users to feel rushed to migrate to\nversion 2. We prefer seeing people slowly falling in love with the new tools\nTraefik has to offer and migrate. For this reason, we've decided to extend the\nsupport of the 1.X version until the end of 2021. \n\nThat's right: you have two years ahead of you before you need to make the leap!\n(And we believe you'll find benefits in migrating to 2.X way before that.)\n\n\n--------------------------------------------------------------------------------\n\nNext? Focusing on the User Experience\nIn the introduction, we've stated that we received (and are still receiving) a\nlot of feedback about 2.0. And let me tell you:\n\n> We listen\nApart from bringing extra features in the next release (like UDP, HTTP/3,\nKey-Value Stores, and the list goes on ...), we want to focus this release on\nthe user experience.\n\nNow that we've seen people massively use Traefik 2, we decided it's time to work\non making powerful features simpler to configure, or at least ... less verbose. \n\nSo, let's work together on making it happen! Come and raise your voice in the \nissue tracker [https://github.com/containous/traefik/issues], on the community\nforum [https://community.containo.us], or betterâpull request\n[https://github.com/containous/traefik/pulls] your way into making Traefik a\nbetter tool for everyone.\n\nSee you around, and happy Traefik!","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">2.X in the Wild</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2019/12/traefik-cantal-flat.png\" class=\"kg-image\"></figure><p>Releases keep coming, but this one feels unique to us because this is our very first release since Traefik 2.0, and we've learned a lot! </p><p>We all know it, <em>you</em> all know it: Traefik 2.0 consisted in a fest of new features: TCP, middleware, rule syntax, YAML support, CRDs, WebUI, canary, mirroring, provider namespaces, new documentation, and many other inconspicuous changes that will help us building the product we love towards greater heights.</p><p>All this was accompanied by tools to help the community seamlessly make the transition: We developed a <a href=\"https://github.com/containous/traefik-migration-tool\">migration tool</a>, Â launched a <a href=\"https://community.containo.us/\">community forum</a> to foster good communication and support, wrote new tutorials to help people have a <a href=\"https://containous.ghost.io/blog/traefik-2-0-docker-101-fc2893944b9d/\">fresh start with Traefik</a> (including <a href=\"https://containous.ghost.io/blog/traefik-2-tls-101-23b4fbee81f1/\">details about new TLS options</a>), and of course we added a <a href=\"https://docs.traefik.io/migration/v1-to-v2/\">migration guide in our documentation</a>. </p><p>Thanks to the (immense) feedback we got from the community, we know we can do <em>even</em> better, and we were given some pointers in the right direction.</p><p>But before we talk about what we've learned and how we'll leverage this knowledge, let's talk about the changes introduced in 2.1. </p><h2 id=\"consul-catalog-is-back-\">Consul Catalog Is Back!</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/12/consul-catalog.png\" class=\"kg-image\"></figure><p>Great news for Consul Catalog fans, Traefik 2.1 brings it back in the list of <a href=\"https://docs.traefik.io/v2.1/providers/overview/#supported-providers\">supported providers</a>! (But stay on hold because I know for sure that <a href=\"https://github.com/containous/traefik/pull/5899\">others will follow suit</a>.)</p><h2 id=\"improving-the-crd\">Improving the CRD</h2><h3 id=\"stickiness\">Stickiness</h3><p>The stickiness option is the ability for a load balancer to keep using the same target for a client once it has been sent to one. This option is now available for our CRD users!</p><pre><code class=\"language-yaml\">apiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: myName\n  namespace: myNamespace\nspec:\n  entryPoints:\n  - web\n  routes:\n  - kind: Rule\n    match: Host(`some-domain`)\n    services:\n    - kind: Service\n      name: myService\n      namespace: myNamespace\n      port: 80\n      sticky:\n        cookie: {} # Once a pod is selected for a client, it will stay the same for future calls</code></pre><h3 id=\"service-load-balancing-mirroring\">Service Load Balancing &amp; Mirroring</h3><p>Introduced in 2.0, service load balancing and mirroring were previously exclusively configurable using the <a href=\"https://docs.traefik.io/v2.0/providers/file/\">file provider</a>. With 2.1 and the introduction of the <code>TraefikService</code> object, we leveraged Traefik's CRD to enable such configuration in Kubernetes, and here is a first example with mirroring:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/12/image-18.png\" class=\"kg-image\"></figure><pre><code class=\"language-yaml\">apiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: my-route-to-mirroring\n  namespace: default\n\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`some-domain`) &amp;&amp; PathPrefix(`/some/path`)\n    kind: Rule\n    services:\n    - name: mirroring-example #targets the mirroring-example service\n      namespace: default\n      kind: TraefikService # we want to target the TraefikService we've declared (and not a K8S service named mirroring-example)\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: TraefikService\nmetadata:\n  name: mirroring-example\n  namespace: default\nspec:\n  mirroring:\n    name: v1 #sends 100% of the requests to the K8S service \"v1\" ...\n    mirrors:\n      - name: v2 # ... and sends a copy of 10% of the requests to v2\n        percent: 10\n        port: 80</code></pre><p>For our second example, let's see how we could use service load balancing to do canary deployments:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/12/image-19.png\" class=\"kg-image\"></figure><pre><code class=\"language-yaml\">apiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: my-route-to-canary\n  namespace: default\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`some-domain`) &amp;&amp; PathPrefix(`/some/path`)\n    kind: Rule\n    services:\n    - name: mirror1\n      namespace: default\n      kind: TraefikService\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: TraefikService\nmetadata:\n  name: canary-example\n  namespace: default\n\nspec:\n  weighted:\n    services:\n      - name: v1\n        weight: 80\n        port: 80\n      - name: v2\n        weight: 20\n        port: 80</code></pre><p>We can now change the weight for each service (v1 and v2) at will!</p><h3 id=\"mixing-regular-kubernetes-services-with-traefikservices\">Mixing Regular (Kubernetes) Services with TraefikServices</h3><p>When you define a target (with the <code>name</code> attribute) for your <code>IngressRoute</code>, by default, it targets a regular <code>Service</code>. If you want to target the new <code>TraefikService</code> objects, you just specify the <code>kind</code> attribute. What's great with this system is that you can chain and combine them at will, creating intricate patterns depending on your needs.</p><p>Below is an example that leverages both services and <code>TraefikServices</code>, and that uses mirroring and service load balancing at the same time!</p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/12/canary-and-mirroring.png\" class=\"kg-image\"></figure><pre><code class=\"language-yaml\">apiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: route-to-mirroring\n  namespace: default\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`some-domain`) &amp;&amp; PathPrefix(`/some/path`)\n    kind: Rule\n    services:\n    - name: mirroring-example\n      namespace: default\n      kind: TraefikService\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: TraefikService\nmetadata:\n  name: mirroring-example\n  namespace: default\nspec:\n  mirroring:\n    name: canary-example\n    kind: TraefikService\n    mirrors:\n      - name: service-mirror\n        percent: 20\n        port: 80\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: TraefikService\nmetadata:\n  name: canary-example\n  namespace: default\nspec:\n  weighted:\n    services:\n      - name: v1\n        port: 80\n        weight: 80\n      - name: v2\n        weight: 20\n        port: 80</code></pre><h3 id=\"note-on-updating-the-crd-for-2-1\">Note on Updating the CRD for 2.1</h3><p>While updating an installation to v2.1, it is required to apply the new CRD and to enhance the existing <code>ClusterRole</code>definition. You will find out how in the <a href=\"https://docs.traefik.io/migration/v2/\">following guide</a>.</p><h2 id=\"more-control-on-internal-routing\">More Control On Internal Routing</h2><p>In 2.0, we've made changes to make sure people would be able to properly secure some critical services offered by Traefik, like the API and the Dashboard (you can see an example in our <a href=\"https://containous.ghost.io/blog/traefik-2-0-docker-101-fc2893944b9d/\">Traefik &amp; Docker 101 article</a>).</p><p>Pursuing the ability to configure internal services further while always giving users more control, the 2.1 dashboard now shows the internal routers and services involved.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://containous.ghost.io/content/images/2019/12/Screenshot_2019-12-10-Traefik.png\" class=\"kg-image\"><figcaption>Shows the internal services for the API and the Dashboard</figcaption></figure><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://containous.ghost.io/content/images/2019/12/Screenshot_2019-12-10-Traefik-1-.png\" class=\"kg-image\"><figcaption>Shows the internal routers leading to the internal API and Dashboard services (when users don't explicitly configure them)</figcaption></figure><p>We also jumped on the opportunity to add other configurable services to the list, namely <code>rest@internal</code>, <code>ping@internal</code>, and <code>prometheus@internal</code>. </p><hr><h2 id=\"migrating-to-2-x-made-easy\">Migrating to 2.X Made Easy</h2><p>With so many new options to customize Traefik to your every need, we understand that some people can be a bit lost when migrating to 2.x, especially since Traefik is the kind of software that you run and forget (because it works nights and days without any other intervention from its users).</p><blockquote>We have been working really hard to make this migration a matter of minutes.</blockquote><p>So, if you're thinking about migrating but haven't jumped on the task yet, we want to point you in the right direction:</p><ul><li><a href=\"https://containous.ghost.io/blog/traefik-2-0-docker-101-fc2893944b9d/\">This guide</a> helps you truly understand how Traefik 2 works on a Docker setup and will show you that 5 minutes are enough to have a good grasp of what you can do with it.</li><li>If you're looking for information about how to configure HTTPS / TLS, <a href=\"https://containous.ghost.io/blog/traefik-2-tls-101-23b4fbee81f1/\">we have you covered with this guide</a>!</li><li>If you don't want to lose time converting your Ingress objects in Kubernetes (who would want that?), we've developed a <a href=\"https://github.com/containous/traefik-migration-tool\">migration tool</a> that will handle it for you.</li><li>Same goes with your <code>traefik.toml</code> file: the <a href=\"https://github.com/containous/traefik-migration-tool\">migration tool</a> can convert it for you.</li><li>Oh, and the <a href=\"https://github.com/containous/traefik-migration-tool\">migration tool</a> can also convert your <code>acme.json</code> certificate file.</li><li>And always feel free to engage conversation in our <a href=\"https://community.containo.us\">community forum</a>, we read <em>everything</em> and do our best to provide answers when we can.</li></ul><hr><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/12/2-year-warranty.jpg\" class=\"kg-image\"></figure><h2 id=\"supporting-the-1-x-branch-for-two-years-\">Supporting the 1.X Branch for Two Years!</h2><p>Our community matters, and we don't want our users to feel rushed to migrate to version 2. We prefer seeing people slowly falling in love with the new tools Traefik has to offer and migrate. For this reason, we've decided to extend the support of the 1.X version until the end of 2021. </p><p>That's right: you have <strong>two years</strong> ahead of you before you need to make the leap! (And we believe you'll find benefits in migrating to 2.X <em>way</em> <em>before</em> that.)</p><hr><h2 id=\"next-focusing-on-the-user-experience\">Next? Focusing on the User Experience</h2><p>In the introduction, we've stated that we received (and are still receiving) a lot of feedback about 2.0. And let me tell you:</p><blockquote>We listen</blockquote><p>Apart from bringing extra features in the next release (like UDP, HTTP/3, Key-Value Stores, and the list goes on ...), we want to focus this release on the user experience.</p><p>Now that we've seen people massively use Traefik 2, we decided it's time to work on making powerful features simpler to configure, or at least ... less verbose. </p><p>So, let's work together on making it happen! Come and raise your voice in the <a href=\"https://github.com/containous/traefik/issues\">issue tracker</a>, on the <a href=\"https://community.containo.us\">community forum</a>, or betterâ<a href=\"https://github.com/containous/traefik/pulls\">pull request</a> your way into making Traefik a better tool for everyone.</p><p>See you around, and happy Traefik!</p>","url":"https://containous.ghost.io/blog/traefik-2-1-in-the-wild/","canonical_url":null,"uuid":"d345bdcc-6cf7-4811-a78d-505391119b8a","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5def57371efbbd0038ef55ec","reading_time":6}},{"node":{"id":"Ghost__Post__5dcdfa6f2345360038abe218","title":"Traefik 2 & TLS 101","slug":"traefik-2-tls-101-23b4fbee81f1","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/11/Traefik-2---TLS-101-x-Docker---Blog-Post-@2x-2.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/cc3e270abe4acb548943583a98f72cfb/f3583/Traefik-2---TLS-101-x-Docker---Blog-Post-%402x-2.png","srcSet":"/static/cc3e270abe4acb548943583a98f72cfb/630fb/Traefik-2---TLS-101-x-Docker---Blog-Post-%402x-2.png 300w,\n/static/cc3e270abe4acb548943583a98f72cfb/2a4de/Traefik-2---TLS-101-x-Docker---Blog-Post-%402x-2.png 600w,\n/static/cc3e270abe4acb548943583a98f72cfb/f3583/Traefik-2---TLS-101-x-Docker---Blog-Post-%402x-2.png 1200w,\n/static/cc3e270abe4acb548943583a98f72cfb/bbee5/Traefik-2---TLS-101-x-Docker---Blog-Post-%402x-2.png 1800w,\n/static/cc3e270abe4acb548943583a98f72cfb/ed396/Traefik-2---TLS-101-x-Docker---Blog-Post-%402x-2.png 2000w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"You have an HTTP service exposed through Traefik, and you want Traefik to deal with the HTTPS burden (TLS termination)...","custom_excerpt":"You have an HTTP service exposed through Traefik, and you want Traefik to deal with the HTTPS burden (TLS termination)...","visibility":"public","created_at_pretty":"15 November, 2019","published_at_pretty":"November 14, 2019","updated_at_pretty":"22 May, 2020","created_at":"2019-11-15T01:07:59.000+00:00","published_at":"2019-11-14T08:07:00.000+00:00","updated_at":"2020-05-22T00:43:50.000+00:00","meta_title":"How to configure Traefik 2 with TLS - Traefik 2 & TLS 101","meta_description":"You have an HTTP service exposed through Traefik, and you want Traefik to deal with the HTTPS burden (TLS termination)...","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"How To","slug":"how-to","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"#community-related-resource","slug":"hash-community-related-resource","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"internal"},{"name":"#traefik-related-resource","slug":"hash-traefik-related-resource","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"internal"}],"plaintext":"HTTPS (& TCP over TLS) for everyone!\n\nThere are hundreds of reasons why I love being a developer (besides memories of\nsleepless nights trying to fix a video game that nobody except myself would ever\nplay).\n\nBeing a developer gives you superpowers â you can solve any kind of problems.\nYes, especially if they donât involve real-life practical situations.\n\nBut these superpowers are sometimes hindered by tedious configuration work that\nexpects you to master yet another arcane language assembled with heaps of words\nyouâve never seen before. Such a barrier can be encountered when dealing with\nHTTPS and its certificates.\n\nLuckily for us, Traefik tends to lower this kind of hurdle and makes sure that\nthere are easy ways of securely connecting your developments to the outside\nworld.\n\nThe Goal for Today\nThe challenge weâll accept is the following â You have an HTTP service exposed\nthrough Traefik, and you want Traefik to deal with the HTTPS burden (TLS\ntermination), leaving your pristine service unspoiled by mundane technical\ndetails.\n\nWeâll assume you have a basic understanding of Traefik on Docker and that youâre\nfamiliar with its configuration (if not, itâs time to read Traefik 2 & Docker\n101 [/blog/traefik-2-0-docker-101-fc2893944b9d/]).\n\nDuring this article, weâll use my pet demo docker-compose file: it enables the\ndocker provider and launches a my-app application that allows us to test any\nrequest.\n\nversion: \"3\"\nservices:\n  traefik:\n    image: \"traefik:v2.0\"\n    command:\n      - --entrypoints.web.address=:80\n      - --providers.docker=true\n    ports:\n      - \"80:80\"\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n  \n  my-app:\n    image: containous/whoami:v1.3.0\n\nGetting Things Ready\nFirst things first, letâs make sure our setup can handle HTTPS traffic on the\ndefault port (:443), and that Traefik listens to this port thanks to an \nentrypoint [https://docs.traefik.io/routing/entrypoints/] weâll name web-secure.\n\nversion: \"3\"\nservices:\n  traefik:\n    image: \"traefik:v2.0\"\n    command:\n      - --entrypoints.web.address=:80\n      - --entrypoints.web-secure.address=:443 #Declares the web-secure entrypoint in Traefik\n      - --providers.docker=true\n    ports:\n      - \"80:80\"\n      - \"443:443\" #Docker sends requests on port 443 to Traefik on port 443\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n  \n  my-app:\n    image: containous/whoami:v1.3.0\n\nTo avoid confusion, letâs state the obvious â We havenât yet configured anything\nbut enabled requests on 443 to be handled by Traffic. So, no certificate\nmanagement yet!\n\nGeneral Concepts\nUltimately, in Traefik, you configure HTTPS on the router\n[https://docs.traefik.io/routing/routers/] level. While defining routes, you\ndecide whether they are HTTP routes or HTTPS routes (by default, they are HTTP\nroutes).\n\nFirst, letâs expose our my-app service on HTTP so that it handles requests on\ndomain example.com.\n\nversion: \"3\"\n\nservices:\n  # ...\n  my-app:\n    image: containous/whoami:v1.3.0\n    labels:\n      - \"traefik.http.routers.my-app.rule=Host(`example.com`)\"\n\nAnd now, see what it takes to make this route HTTPS only!\n\nversion: \"3\"\n\nservices:\n  # ...\n  my-app:\n    image: containous/whoami:v1.3.0\n    labels:\n      - \"traefik.http.routers.my-app.rule=Host(`example.com`)\"\n      - \"traefik.http.routers.my-app.tls=true\"\n\nThere, by adding the tls option to the route, weâve made it HTTPS.\n\nThe only unanswered question left is, âWhere does Traefik get its certificates\nfrom?â And the answer is, âEither from a collection of certificates you own and\nhave configured or from a fully automatic mechanism that gets them for you.â\n\nLetâs see these solutions in action!\n\n\n--------------------------------------------------------------------------------\n\nOption 1 â Certificates You Own\nThe least magical of the two options involves creating a configuration file.\n\nSay you already own a certificate for a domain (or a collection of certificates\nfor different domains) and that you are then the proud holder of files to claim\nyour ownership of the said domain.\n\nTo have Traefik make a claim on your behalf, youâll have to give it access to\nthe certificate files. Letâs do this.\n\nAdd a Configuration File for Certificates\n\nversion: \"3\"\n\nservices:\n  traefik:\n    image: \"traefik:v2.0\"\n    command:\n      - --entrypoints.web.address=:80\n      - --entrypoints.web-secure.address=:443\n      - --providers.docker=true\n      - --providers.file.directory=/configuration/\n      - --providers.file.watch=true\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n      - \"/home/username/traefik/configuration/:/configuration/\"\n\nTraefik runs with many providers beyond Docker (i.e., Kubernetes\n[https://docs.traefik.io/providers/kubernetes-crd/], Rancher\n[https://docs.traefik.io/providers/rancher/], Marathon\n[https://docs.traefik.io/providers/marathon/]), and here we chose to add plain\nold configuration files (--providers.file) in the configuration/ directory (and\nweâll automatically reload changes with --providers.file.watch=true). Weâll use\na configuration file to declare our certificates.\n\nAdd the Certificates to the Configuration File\n# in files/certificates.toml\n\n[[tls.certificates]] #first certificate\n   certFile = â/path/to/example-com.certâ \n   keyFile = â/path/to/example-com.keyâ\n\n[[tls.certificates]] #second certificate\n   certFile = â/path/to/other.certâ \n   keyFile = â/path/to/other.keyâ\n   \n# and so on\n\nNow that we have our TOML configuration file available (thanks to the enabled\nfile provider), we can fill in certificates in the [[tls.certificates]]section.\n\nEnjoy!\nThis is all there is to do. When dealing with an HTTPS route, Traefik goes\nthrough your default certificate store to find a matching certificate.\n\nSpecifying a Default Certificate?\nIf no valid certificate is found, Traefik serves a default auto-signed\ncertificate. But if needed, you can customize the default certificate like so:\n\n[tls.stores]\n  [tls.stores.default]\n   [tls.stores.default.defaultCertificate] \n     certFile = âpath/to/cert.crtâ \n     keyFile = âpath/to/cert.keyâ\n\nAdditional Thoughts\nEven though the configuration is straightforward, it is your responsibility, as\nthe administrator, to configure / renew your certificates when they expire. If\nyou donât like such constraints, keep reading!\n\n\n--------------------------------------------------------------------------------\n\nOption 2 â Dynamic / Automatic Certificates\nHaving to manage (buy/install/renew) your certificates is a process you might \nnot enjoy (I donât). If so, youâll be interested in the automatic certificate\ngeneration embedded in Traefik (thanks to Letâs Encrypt).\n\nLong story short, you can start Traefik with no other configuration than your\nLetâs Encrypt account, and Traefik automatically negotiates\n(get/renew/configure) certificates for you â No extra step.\n\nCertificate Resolvers\nWe saw that you can configure a router to use TLS\n(--traefik.http.routers.router-name.tls=true). \nAs a consequence, we saw that Traefik would go through your certificate list to\nfind a suitable match for the domain at hand (and if not would use a default\ncertificate).\n\nFor automatic certificate generation, you can add a certificate resolver to your\nTLS options. A certificate resolver is responsible for retrieving certificates.\n\nHere, letâs define a certificate resolver that works with your Letâs Encrypt\naccount!\n\nservices:\n  traefik:\n    image: \"traefik:v2.0\"\n    command:\n      - --entrypoints.websecure.address=:443\n      # ...\n      - --certificatesresolvers.le.acme.email=my@email.com\n      - --certificatesresolvers.le.acme.storage=/acme.json\n      - --certificatesresolvers.le.acme.tlschallenge=true\n      # ...\n\nAs you can read, we defined a certificate resolver named le of type acme. Then,\nwe provided an email (your Letâs Encrypt account), the storage file (for\ncertificates it retrieves), and the challenge for certificate negotiation\n[https://docs.traefik.io/https/acme/#the-different-acme-challenges](here \ntlschallenge, just because itâs the most concise configuration option for the\nsake of the example).\n\nFrom now on, Traefik is fully equipped to generate certificates for you!\n\nUsing the Certificate Resolver\nIf you remember correctly (Iâm sure you do!), we enabled TLS on our router like\nso:\n\nversion: \"3\"\n\nservices:\n  # ...\n  my-app:\n    image: containous/whoami:v1.3.0\n    labels:\n      - \"traefik.http.routers.my-app.rule=Host(`example.com`)\"\n      - \"traefik.http.routers.my-app.tls=true\"\n\nNow, to enable our certificate resolver and have it automatically generate\ncertificates (when needed), weâll add it to the TLS configuration, like so:\n\nversion: \"3\"\n\nservices:\n  # ...\n  my-app:\n    image: containous/whoami:v1.3.0\n    labels:\n      - \"traefik.http.routers.my-app.rule=Host(`example.com`)\"\n      - \"traefik.http.routers.my-app.tls=true\"\n      - \"traefik.http.routers.my-app.tls.certresolver=le\"\n\nNow, if your certificate store doesnât yet have a valid certificate for \nexample.com, the le certificate resolver will transparently negotiate one for\nyou â itâs that simple.\n\nMultiple Certificate Resolvers?\nWith certificate resolvers, you can configure different challenges.\n\nBelow is an example that shows how to configure two CertResolvers that leverage\nLetâs Encrypt, one using the dnsChallenge\n[https://docs.traefik.io/https/acme/#dnschallenge], the other using the \ntlsChallenge [https://docs.traefik.io/https/acme/#tlschallenge].\n\n[certificatesResolvers.resolver-digital-ocean.acme]\n  # ... \n  [certificatesResolvers.resolver-digital-ocean.acme.dnsChallenge]\n    provider = \"digitalocean\"\n    delayBeforeCheck = 0\n\n[certificatesResolvers.tls-challenge-resolver.acme]\n  # ...\n  [certificatesResolvers.tls-challenge-resolver.acme.tlsChallenge]\n\nLater on, youâll be able to use one or the other on your routers.\n\n# in routers.toml\n\n[http.routers]\n  [http.routers.https-route]\n    rule = \"Host(`my.domain`)\"\n    [http.routers.https-route.tls]\n      certResolver = \"resolver-digital-ocean\"\n\n[http.routers.https-route-2]\n    rule = \"Host(`other.domain`)\"\n    [http.routers.https-route-2.tls]\n      certResolver = \"tls-challenge-resolver\"\n\nIn the above example (that uses the file provider), weâve asked Traefik to\ngenerate certificates for my.domain using the dnsChallenge (with digital ocean)\nand to generate certificates for other.domain using the TLSChallenge.\n\nAnd youâve guessed it already â Traefik supports DNS challenge for different DNS\nproviders, at the same time!\n\n\n\n--------------------------------------------------------------------------------\n\nWildcard and Letâs Encrypt?\nInstead of generating a certificate for each subdomain, you can choose to\ngenerate wildcard certificates!\n\n[http.routers]\n  [http.routers.router-example]\n    rule = \"Host(`something.my.domain`)\"\n    [http.routers.router-example.tls]\n      certResolver = \"my-resolver\"\n      [[http.routers.router-example.tls.domains]]\n        main = \"my.domain\"\n        sans = \"*.my.domain\"\n\nIn the above example, weâve configured Traefik to generate a wildcard\ncertificate for *.my.domain.\n\nIf we had omitted the .tls.domains section, Traefik would have used the host\n(here something.my.domain) defined in the Host rule to generate a certificate.\n\n\n--------------------------------------------------------------------------------\n\nWhat About TCP & TLS?\nIf you want to configure TLS with TCP, then good news: nothing changes, youâll\nconfigure the same tls option, but this time on your tcp router.\n\nversion: \"3\"\n\nservices:\n  # ...\n  my-tcp-app:\n    image: containous/whoamitcp:v1.0.0\n    labels:\n      - \"traefik.tcp.routers.my-tcp-app.rule=HostSNI(`tcp-example.com`)\"\n      - \"traefik.tcp.routers.my-tcp-app.tls=true\"\n\n\n--------------------------------------------------------------------------------\n\nWhat About Pass-Through?\nSometimes your services handle TLS by themselves. In such cases, Traefik mustnât\nterminate the TLS connection but forward the request âas isâ to these services.\nTo configure this passthrough, youâll need to configure a TCP router (even if\nyour service handles HTTPS).\n\nversion: \"3\"\n\nservices:\n  # ...\n  my-tcp-app:\n    image: containous/whoamitcp:v1.0.0\n    labels:\n      - \"traefik.tcp.routers.my-tcp-app.rule=HostSNI(`tcp-example.com`)\"\n      - \"traefik.tcp.routers.my-tcp-app.tls.passthrough=true\"\n\n\n--------------------------------------------------------------------------------\n\nQuestions? Where to Go Next?\nHopefully, this article sheds light on how to configure Traefik 2 with TLS.\n\nIf there are missing use cases or still unanswered questions, let me know in the\ncomments or on the community forum\n[https://community.containo.us/c/traefik/traefik-v2]!\n\nIn the meantime â Happy Traefik!","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">HTTPS (& TCP over TLS) for everyone!</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-103.png\" class=\"kg-image\"></figure><p>There are hundreds of reasons why I love being a developer (besides memories of sleepless nights trying to fix a video game that nobody except myself would ever play).</p><p>Being a developer gives you superpowers â you can solve any kind of problems. Yes, especially if they donât involve real-life practical situations.</p><p>But these superpowers are sometimes hindered by tedious configuration work that expects you to master <em><em>yet another</em></em> arcane language assembled with heaps of words youâve never seen before. Such a barrier can be encountered when dealing with HTTPS and its certificates.</p><p>Luckily for us, Traefik tends to lower this kind of hurdle and makes sure that there are easy ways of securely connecting your developments to the outside world.</p><h2 id=\"the-goal-for-today\">The Goal for Today</h2><p>The challenge weâll accept is the following â You have an HTTP service exposed through Traefik, and you want Traefik to deal with the HTTPS burden (TLS termination), leaving your pristine service unspoiled by mundane technical details.</p><p>Weâll assume you have a basic understanding of Traefik on Docker and that youâre familiar with its configuration (if not, itâs time to read <a href=\"https://containous.ghost.io/blog/traefik-2-0-docker-101-fc2893944b9d/\">Traefik 2 &amp; Docker 101</a>).</p><p>During this article, weâll use my pet demo docker-compose file: it enables the docker provider and launches a <code>my-app</code> application that allows us to test any request.</p><pre><code class=\"language-yaml\">version: \"3\"\nservices:\n  traefik:\n    image: \"traefik:v2.0\"\n    command:\n      - --entrypoints.web.address=:80\n      - --providers.docker=true\n    ports:\n      - \"80:80\"\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n  \n  my-app:\n    image: containous/whoami:v1.3.0</code></pre><h2 id=\"getting-things-ready\">Getting Things Ready</h2><p>First things first, letâs make sure our setup can handle HTTPS traffic on the default port (<code>:443</code>), and that Traefik listens to this port thanks to an <a href=\"https://docs.traefik.io/routing/entrypoints/\" rel=\"noopener nofollow\">entrypoint</a> weâll name <code>web-secure</code>.</p><pre><code class=\"language-yaml\">version: \"3\"\nservices:\n  traefik:\n    image: \"traefik:v2.0\"\n    command:\n      - --entrypoints.web.address=:80\n      - --entrypoints.web-secure.address=:443 #Declares the web-secure entrypoint in Traefik\n      - --providers.docker=true\n    ports:\n      - \"80:80\"\n      - \"443:443\" #Docker sends requests on port 443 to Traefik on port 443\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n  \n  my-app:\n    image: containous/whoami:v1.3.0</code></pre><p>To avoid confusion, letâs state the obvious â We havenât yet configured anything but enabled requests on 443 to be handled by Traffic. So, no certificate management yet!</p><h2 id=\"general-concepts\">General Concepts</h2><p>Ultimately, in Traefik, you configure HTTPS on the <a href=\"https://docs.traefik.io/routing/routers/\" rel=\"noopener nofollow\">router</a> level. While defining routes, you decide whether they are HTTP routes or HTTPS routes (by default, they are HTTP routes).</p><p>First, letâs expose our <code>my-app</code> service on HTTP so that it handles requests on domain <code>example.com</code>.</p><pre><code class=\"language-yaml\">version: \"3\"\n\nservices:\n  # ...\n  my-app:\n    image: containous/whoami:v1.3.0\n    labels:\n      - \"traefik.http.routers.my-app.rule=Host(`example.com`)\"</code></pre><p>And now, see what it takes to make this route HTTPS only!</p><pre><code class=\"language-yaml\">version: \"3\"\n\nservices:\n  # ...\n  my-app:\n    image: containous/whoami:v1.3.0\n    labels:\n      - \"traefik.http.routers.my-app.rule=Host(`example.com`)\"\n      - \"traefik.http.routers.my-app.tls=true\"</code></pre><p>There, by adding the <code>tls</code> option to the route, weâve made it HTTPS.</p><p>The only unanswered question left is, âWhere does Traefik get its certificates from?â And the answer is, âEither from a collection of certificates you own and have configured or from a fully automatic mechanism that gets them for you.â</p><p>Letâs see these solutions in action!</p><hr><h2 id=\"option-1-certificates-you-own\">Option 1 â Certificates You Own</h2><p>The least magical of the two options involves creating a configuration file.</p><p>Say you already own a certificate for a domain (or a collection of certificates for different domains) and that you are then the proud holder of files to claim your ownership of the said domain.</p><p>To have Traefik make a claim on your behalf, youâll have to give it access to the certificate files. Letâs do this.</p><h3 id=\"add-a-configuration-file-for-certificates\">Add a Configuration File for Certificates<br></h3><pre><code class=\"language-yaml\">version: \"3\"\n\nservices:\n  traefik:\n    image: \"traefik:v2.0\"\n    command:\n      - --entrypoints.web.address=:80\n      - --entrypoints.web-secure.address=:443\n      - --providers.docker=true\n      - --providers.file.directory=/configuration/\n      - --providers.file.watch=true\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n      - \"/home/username/traefik/configuration/:/configuration/\"</code></pre><p>Traefik runs with many providers beyond Docker (i.e., <a href=\"https://docs.traefik.io/providers/kubernetes-crd/\" rel=\"noopener nofollow\">Kubernetes</a>, <a href=\"https://docs.traefik.io/providers/rancher/\" rel=\"noopener nofollow\">Rancher</a>, <a href=\"https://docs.traefik.io/providers/marathon/\" rel=\"noopener nofollow\">Marathon</a>), and here we chose to add plain old configuration files (<code>--providers.file</code>) in the <code>configuration/</code> directory (and weâll automatically reload changes with <code>--providers.file.watch=true</code>). Weâll use a configuration file to declare our certificates.</p><h3 id=\"add-the-certificates-to-the-configuration-file\">Add the Certificates to the Configuration File</h3><pre><code class=\"language-toml\"># in files/certificates.toml\n\n[[tls.certificates]] #first certificate\n   certFile = â/path/to/example-com.certâ \n   keyFile = â/path/to/example-com.keyâ\n\n[[tls.certificates]] #second certificate\n   certFile = â/path/to/other.certâ \n   keyFile = â/path/to/other.keyâ\n   \n# and so on</code></pre><p>Now that we have our TOML configuration file available (thanks to the enabled file provider), we can fill in certificates in the <code>[[tls.certificates]]</code>section.</p><h3 id=\"enjoy-\">Enjoy!</h3><p>This is all there is to do. When dealing with an HTTPS route, Traefik goes through your default certificate store to find a matching certificate.</p><h3 id=\"specifying-a-default-certificate\">Specifying a Default Certificate?</h3><p>If no valid certificate is found, Traefik serves a default auto-signed certificate. But if needed, you can customize the default certificate like so:</p><pre><code class=\"language-toml\">[tls.stores]\n  [tls.stores.default]\n   [tls.stores.default.defaultCertificate] \n     certFile = âpath/to/cert.crtâ \n     keyFile = âpath/to/cert.keyâ</code></pre><h3 id=\"additional-thoughts\">Additional Thoughts</h3><p>Even though the configuration is straightforward, it is your responsibility, as the administrator, to configure / renew your certificates when they expire. If you donât like such constraints, keep reading!</p><hr><h2 id=\"option-2-dynamic-automatic-certificates\">Option 2 â Dynamic / Automatic Certificates</h2><p>Having to manage (buy/install/renew) your certificates is a process you might <em><em>not</em></em> enjoy (I donât). If so, youâll be interested in the automatic certificate generation embedded in Traefik (thanks to Letâs Encrypt).</p><p>Long story short, you can start Traefik with no other configuration than your Letâs Encrypt account, and Traefik automatically negotiates (get/renew/configure) certificates for you â No extra step.</p><h3 id=\"certificate-resolvers\">Certificate Resolvers</h3><p>We saw that you can configure a router to use TLS<br>(<code>--traefik.http.routers.router-name.tls=true</code>). <br>As a consequence, we saw that Traefik would go through your certificate list to find a suitable match for the domain at hand (and if not would use a default certificate).</p><p>For automatic certificate generation, you can add a <em><em>certificate resolver</em></em> to your TLS options. A certificate resolver is responsible for retrieving certificates.</p><p>Here, letâs define a certificate resolver that works with your Letâs Encrypt account!</p><pre><code class=\"language-yaml\">services:\n  traefik:\n    image: \"traefik:v2.0\"\n    command:\n      - --entrypoints.websecure.address=:443\n      # ...\n      - --certificatesresolvers.le.acme.email=my@email.com\n      - --certificatesresolvers.le.acme.storage=/acme.json\n      - --certificatesresolvers.le.acme.tlschallenge=true\n      # ...</code></pre><p>As you can read, we defined a certificate resolver named <code>le</code> of type <code>acme</code>. Then, we provided an email (your Letâs Encrypt account), the storage file (for certificates it retrieves), and <a href=\"https://docs.traefik.io/https/acme/#the-different-acme-challenges\" rel=\"noopener nofollow\">the challenge for certificate negotiation</a>(here <code>tlschallenge</code>, just because itâs the most concise configuration option for the sake of the example).</p><p>From now on, Traefik is fully equipped to generate certificates for you!</p><h3 id=\"using-the-certificate-resolver\">Using the Certificate Resolver</h3><p>If you remember correctly (Iâm sure you do!), we enabled TLS on our router like so:</p><pre><code class=\"language-yaml\">version: \"3\"\n\nservices:\n  # ...\n  my-app:\n    image: containous/whoami:v1.3.0\n    labels:\n      - \"traefik.http.routers.my-app.rule=Host(`example.com`)\"\n      - \"traefik.http.routers.my-app.tls=true\"</code></pre><p>Now, to enable our certificate resolver and have it automatically generate certificates (when needed), weâll add it to the TLS configuration, like so:</p><pre><code class=\"language-yaml\">version: \"3\"\n\nservices:\n  # ...\n  my-app:\n    image: containous/whoami:v1.3.0\n    labels:\n      - \"traefik.http.routers.my-app.rule=Host(`example.com`)\"\n      - \"traefik.http.routers.my-app.tls=true\"\n      - \"traefik.http.routers.my-app.tls.certresolver=le\"</code></pre><p>Now, if your certificate store doesnât yet have a valid certificate for <code>example.com</code>, the <code>le</code> certificate resolver will transparently negotiate one for you â itâs that simple.</p><h3 id=\"multiple-certificate-resolvers\">Multiple Certificate Resolvers?</h3><p>With certificate resolvers, you can configure different challenges.</p><p>Below is an example that shows how to configure two CertResolvers that leverage Letâs Encrypt, one using the <a href=\"https://docs.traefik.io/https/acme/#dnschallenge\" rel=\"noopener nofollow\">dnsChallenge</a>, the other using the <a href=\"https://docs.traefik.io/https/acme/#tlschallenge\" rel=\"noopener nofollow\">tlsChallenge</a>.</p><pre><code class=\"language-toml\">[certificatesResolvers.resolver-digital-ocean.acme]\n  # ... \n  [certificatesResolvers.resolver-digital-ocean.acme.dnsChallenge]\n    provider = \"digitalocean\"\n    delayBeforeCheck = 0\n\n[certificatesResolvers.tls-challenge-resolver.acme]\n  # ...\n  [certificatesResolvers.tls-challenge-resolver.acme.tlsChallenge]</code></pre><p>Later on, youâll be able to use one or the other on your routers.</p><pre><code class=\"language-toml\"># in routers.toml\n\n[http.routers]\n  [http.routers.https-route]\n    rule = \"Host(`my.domain`)\"\n    [http.routers.https-route.tls]\n      certResolver = \"resolver-digital-ocean\"\n\n[http.routers.https-route-2]\n    rule = \"Host(`other.domain`)\"\n    [http.routers.https-route-2.tls]\n      certResolver = \"tls-challenge-resolver\"</code></pre><p>In the above example (that uses the file provider), weâve asked Traefik to generate certificates for <code>my.domain</code> using the dnsChallenge (with digital ocean) and to generate certificates for <code>other.domain</code> using the TLSChallenge.</p><p>And youâve guessed it already â Traefik supports DNS challenge for different DNS providers, <em><em>at the same time</em></em>!<br></p><hr><h2 id=\"wildcard-and-let-s-encrypt\">Wildcard and Letâs Encrypt?</h2><p>Instead of generating a certificate for each subdomain, you can choose to generate wildcard certificates!</p><pre><code class=\"language-toml\">[http.routers]\n  [http.routers.router-example]\n    rule = \"Host(`something.my.domain`)\"\n    [http.routers.router-example.tls]\n      certResolver = \"my-resolver\"\n      [[http.routers.router-example.tls.domains]]\n        main = \"my.domain\"\n        sans = \"*.my.domain\"</code></pre><p>In the above example, weâve configured Traefik to generate a wildcard certificate for <code>*.my.domain</code>.</p><p>If we had omitted the <code>.tls.domains</code> section, Traefik would have used the host (here <code>something.my.domain</code>) defined in the <code>Host</code> rule to generate a certificate.</p><hr><h2 id=\"what-about-tcp-tls\">What About TCP &amp; TLS?</h2><p>If you want to configure TLS with TCP, then good news: nothing changes, youâll configure the same <code>tls</code> option, but this time on your <code>tcp</code> router.</p><pre><code class=\"language-yaml\">version: \"3\"\n\nservices:\n  # ...\n  my-tcp-app:\n    image: containous/whoamitcp:v1.0.0\n    labels:\n      - \"traefik.tcp.routers.my-tcp-app.rule=HostSNI(`tcp-example.com`)\"\n      - \"traefik.tcp.routers.my-tcp-app.tls=true\"</code></pre><hr><h2 id=\"what-about-pass-through\">What About Pass-Through?</h2><p>Sometimes your services handle TLS by themselves. In such cases, Traefik mustnât terminate the TLS connection but forward the request âas isâ to these services. To configure this passthrough, youâll need to configure a TCP router (even if your service handles HTTPS).</p><pre><code class=\"language-yaml\">version: \"3\"\n\nservices:\n  # ...\n  my-tcp-app:\n    image: containous/whoamitcp:v1.0.0\n    labels:\n      - \"traefik.tcp.routers.my-tcp-app.rule=HostSNI(`tcp-example.com`)\"\n      - \"traefik.tcp.routers.my-tcp-app.tls.passthrough=true\"</code></pre><hr><h2 id=\"questions-where-to-go-next\">Questions? Where to Go Next?</h2><p>Hopefully, this article sheds light on how to configure Traefik 2 with TLS.</p><p>If there are missing use cases or still unanswered questions, let me know in the comments or on the <a href=\"https://community.containo.us/c/traefik/traefik-v2\" rel=\"noopener nofollow\">community forum</a>!</p><p>In the meantime â Happy Traefik!</p>","url":"https://containous.ghost.io/blog/traefik-2-tls-101-23b4fbee81f1/","canonical_url":null,"uuid":"63ca7b89-9af1-4516-ba7c-c4f4747cf300","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dcdfa6f2345360038abe218","reading_time":7}},{"node":{"id":"Ghost__Post__5dd550aeec5ed3003878892e","title":"Traefik 2.0 & Docker 101","slug":"traefik-2-0-docker-101-fc2893944b9d","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/11/traefik-2-101-docker.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/19e113d66274fb69bbfde43d3e491cc0/f3583/traefik-2-101-docker.png","srcSet":"/static/19e113d66274fb69bbfde43d3e491cc0/630fb/traefik-2-101-docker.png 300w,\n/static/19e113d66274fb69bbfde43d3e491cc0/2a4de/traefik-2-101-docker.png 600w,\n/static/19e113d66274fb69bbfde43d3e491cc0/f3583/traefik-2-101-docker.png 1200w,\n/static/19e113d66274fb69bbfde43d3e491cc0/bbee5/traefik-2-101-docker.png 1800w,\n/static/19e113d66274fb69bbfde43d3e491cc0/0ef64/traefik-2-101-docker.png 2400w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"Docker friends â Welcome!\nToday we decided to dedicate some time to walk you through the 2.0 changes using practical & common scenarios.","custom_excerpt":"Docker friends â Welcome!\nToday we decided to dedicate some time to walk you through the 2.0 changes using practical & common scenarios.","visibility":"public","created_at_pretty":"20 November, 2019","published_at_pretty":"October 1, 2019","updated_at_pretty":"21 May, 2020","created_at":"2019-11-20T14:41:50.000+00:00","published_at":"2019-10-01T14:37:00.000+00:00","updated_at":"2020-05-21T22:02:15.000+00:00","meta_title":"Traefik 2.0 & Docker 101","meta_description":"Docker friends â Welcome!\nToday we decided to dedicate some time to walk you through the 2.0 changes using practical & common scenarios.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null},{"name":"Ludovic Fernandez","slug":"ldez","bio":null,"profile_image":"//www.gravatar.com/avatar/9185f906b875328134ba0d4a6bb6085a?s=250&d=mm&r=x","twitter":"@ludnadez","facebook":null,"website":"https://ldez.github.io"}],"primary_author":{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Docker","slug":"docker","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Tips & Tricks the Documentation Doesnât Tell You\n\nDocker friends â Welcome!\n\nToday we decided to dedicate some time to walk you through the 2.0 changes using\npractical & common scenarios. Hopefully, after having read this article, youâll\nunderstand every concept there is to know, and youâll keep learning by yourself,\ndiscovering tips & tricks to share with the community.\n\nBefore we go further, Iâll assume for this article that you already have a\ndocker setup using Traefik 2.0. Since I like to use docker-compose files for\nbasic demonstrations, Iâll use the following base compose file:\n\nversion: \"3.3\"\n\nservices:\n  traefik:\n    image: \"traefik:v2.0.0\"\n    command:\n      - --entrypoints.web.address=:80\n      - --providers.docker=true\n    ports:\n      - \"80:80\"\n      - \"8080:8080\"\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n  \n  my-app:\n    image: containous/whoami:v1.3.0\n\nFull compose file available there.\n[https://github.com/containous/blog-posts/blob/master/2019_09_10-101_docker/docker-compose-01.yml]\nNothing fancy, we declare an entrypoint\n[https://docs.traefik.io/v2.0/routing/entrypoints/] (web for port 80), enable\nthe docker provider [https://docs.traefik.io/v2.0/providers/overview/], attach\nour traefik container to the needed ports and make sure we can listen to Docker\nthought the socket. We also have an application my-app weâll expose later.\n\nSide Note: You can get the examples from our repository if you want to play with\nthem. (Yes, we know how dangerous it can be to copy/paste some YAML :-))\n\nNow that weâre all set, letâs start!\n\n\n--------------------------------------------------------------------------------\n\nLetâs Enable the Dashboard!\nBecause we all enjoy seeing what weâre doing, weâll first enable Traefikâs\nDashboard in development mode, and all we need to do is add one argument to the\nTraefik command itself.\n\nservices:\n  traefik:\n    image: \"traefik:v2.0.0\"\n    command:\n      - --entrypoints.web.address=:80\n      - --providers.docker\n      - --api.insecure # Don't do that in production\n#   ...\n\nFull compose file available there.\n[https://github.com/containous/blog-posts/blob/master/2019_09_10-101_docker/docker-compose-02.yml]\nThere we are! By adding --api.insecure weâve enabled the API along with the\ndashboard. But beware, in this first step, weâve enabled the insecure\ndevelopment mode â Donât do that in production!\n\nOf course, weâll see at the end of the article how to enable a secured\ndashboard, but for now, you can enjoy and see it on localhost:8080/dashboard/\n\n\n--------------------------------------------------------------------------------\n\nMy Application Handles Requests on \"example.com\"\nIf you only need to route requests to my-app based on the host, then attach one \nlabel to your container â Thatâs it!\n\nservices:\n  my-app:\n    image: containous/whoami:v1.3.0\n    labels:\n      - traefik.http.routers.my-app.rule=Host(`example.com`)\n\nFull compose file available there.\n[https://github.com/containous/blog-posts/blob/master/2019_09_10-101_docker/docker-compose-03.yml]\nQuick Explanation\nIn English, this label means, âHey Traefik! (traefik.) This HTTP router (\nhttp.routers.) I call my-app (my-app.) must catch requests to example.com (\nrule=Host(`example.com`)).â\n\nMore Details (Optional Read)\nTraefik 2.0 introduces the notion of Routers\n[https://docs.traefik.io/v2.0/routing/routers/]. Routers define the routes that\nconnect your services to the requests, and you use rules\n[https://docs.traefik.io/v2.0/routing/routers/#rule] to define what makes the\nconnection. This is the reason why you see routers in the label, as well as rule\n.\n\nTraefik 2.0 also introduces TCP support (in addition to the existing HTTP\nsupport). Since Traefik supports both protocols, it wants to know what kind of\nprotocol youâre interested in, which explains the http keyword in the label.\n\n\n--------------------------------------------------------------------------------\n\nMy Application Listens on a Specific Port\nWhat happens if your application listens on a different port than the default \n:80? Letâs say it listens on :8082. Weâll build on the previous example and add\n(again) one label.\n\nservices:\n  my-service:\n    image: containous/whoami:v1.3.0\n    command:\n      - --port=8082 # Our service listens on 8082\n    labels:\n      - traefik.http.routers.my-app.rule=Host(`example.com`)\n      - traefik.http.services.my-app.loadbalancer.server.port=8082\n\nFull compose file available there.\n[https://github.com/containous/blog-posts/blob/master/2019_09_10-101_docker/docker-compose-04.yml]\nQuick Explanation\nIn English, this label means, âHey Traefik! (traefik.) This HTTP service (\nhttp.services.) I call my-app (my-app.) will load balance incoming requests\nbetween servers (.server) that listen on port 8082 (.port=8082).â\n\nMore Details (Optional Read)\nTraefik 2.0 introduces the notion of Services\n[https://docs.traefik.io/v2.0/routing/services/]. Services are the targets for\nthe routes. They usually define how to reach your programs in your cluster.\nServices can have different types. The most common one is the LoadBalancer\n[https://docs.traefik.io/v2.0/routing/services/#servers-load-balancer] type. The\nLoadBalancer type is a round robin between all the available instances (called \nserver). By default, Traefik considers that your program is available on the\nport exposed by the Dockerfile of your program, but you can change that by\nexplicitly defining the port.\n\nSince we specify only one service in the example, there is no need to define the\ntarget of the previously defined router explicitly.\n\nSide Note: Theâ-port=8082 command is specific to our whoami application and has\nnothing to do with Traefik. It tells whoami to start listening on 8082, so we\ncan simulate our use case.\n\n\n--------------------------------------------------------------------------------\n\nI Need BasicAuth (Or Any Piece of Middleware)\nOnce Traefik has found a match for the request, it can process it before\nforwarding it to the service. In the following example, weâll add a BasicAuth\nmechanism for our route. This is done with two additional labels.\n\nservices:\n  my-svc:\n    image: containous/whoami:v1.3.0\n    labels:\n      - traefik.http.routers.my-app.rule=Host(`example.com`)\n      - traefik.http.routers.my-app.middlewares=auth\n      - traefik.http.middlewares.auth.basicauth.users=test:xxx\n\nFull compose file available there.\n[https://github.com/containous/blog-posts/blob/master/2019_09_10-101_docker/docker-compose-05.yml]\nQuick Explanation\nIn English, the first label means, âHey Traefik! (traefik.) My HTTP router I\ncalled my-app, remember? (http.routers.my-app.) Iâd like to attach to it a piece\nof middleware named auth (.middlewares=auth).â\n\nOf course, since we havenât yet declared the auth middleware, we need to be a\nbit more explicit, so the second label means, âHey Traefik! (traefik.) Letâs\ntalk about an HTTP middleware (http.middlewares.) I call auth (auth.). Itâs a\nBasicAuth middleware (basicauth.). Since you probably need users to know who can\ndo what, here is the users list (.users=test:xxx).â\n\nMore Details (Optional Read)\nTraefik 2.0 introduces the notion of Middleware\n[https://docs.traefik.io/v2.0/middlewares/overview/]. Middleware is a way to\ndefine behaviors and tweak the incoming request before forwarding it to the\nservice. Since they act before the request is forwarded, they are attached to\nRouters. You can define middleware and reuse them as many times as you like\n(this is why you need to name them, in the example auth). There are many kinds\nof middleware, and BasicAuth\n[https://docs.traefik.io/v2.0/middlewares/basicauth/] is one of them. Each\nmiddleware has a different set of parameters to define their behaviors (in the\nexample, we define the users list).\n\n\n--------------------------------------------------------------------------------\n\nI Need HTTPS\nWith Traefik, enabling automatic certificate generation is a matter of 4 lines\nof configuration, and enabling HTTPS on your routes is a matter of 2 lines of\nconfiguration.\n\n1 â Enabling Automatic Certificate Generation\n\nWeâll introduce a little tip here â Since Traefik is launched as a container,\nweâll attach labels to it for common configuration options. (What is specific to\nother containers will, of course, stay on other containers, weâre not messy\npeople!)\n\nservices:\n  traefik:\n    image: \"traefik:v2.0.0\"\n    command:\n      - --entrypoints.websecure.address=:443\n      # ...\n      - --certificatesresolvers.le.acme.email=my@email.com\n      - --certificatesresolvers.le.acme.storage=/acme.json\n      - --certificatesresolvers.le.acme.tlschallenge=true\n      # ...\n    ports:\n      # ...\n      - \"443:443\"\n\nFull compose file available there.\n[https://github.com/containous/blog-posts/blob/master/2019_09_10-101_docker/docker-compose-06.yml]\nQuick Explanation\nWeâve seen already the first command line given to Traefik. In English, it\nmeans, âI have an entrypoint (entrypoints.) I call websecure (websecure.) that\nuses port 443 (.address=:443).â And since Traefik now listens to 443, we need to\ntell Docker that it should bind external port 443 to our serviceâs port 443 (\n\"443:443\").\n\nNow, the others are a bit trickier, but nothing crazy if youâve had time to\ndrink your coffee/tea. The first says, âIâd like a mechanism to generate\ncertificates for me (certificatesresolvers.) that Iâll call le (le.). Itâs an\nacme resolver (acme.), my account there is my@email.com (email=my@email.com).â\n(Disclaimer: not my real email address, donât try it.)\n\nThe second says, âThis mechanism named le I told you about, the acme stuff (\ncertificatesresolvers.le.acme.), it will save the certificates in the file \n/acme.json (storage=/acme.json).â\n\nAnd the third is our inner geek speaking, âSince this le mechanism I defined\nbefore (certificatesresolvers.le.acme.) supports different challenges for\ncertificate generation, Iâll choose â¦ the TLS challenge (tlschallenge=true).â\n\nThat was a bit more text than usual, but here we are: we have a fully functional\nmechanism to generate/renew certificates for us!\n\nMore Details (Optional Read)\nTraefik 2.0 introduces the notion of CertificatesResolvers\n[https://docs.traefik.io/v2.0/https/acme/]. Certificates resolvers are a system\nthat handles certificate generation/renewal/disposal for you. They detect the\nhosts youâve defined for your routers and get the matching certificates.\n\nCurrently, certificates resolvers leverage Letâs Encrypt\n[https://letsencrypt.org/] to get certificates, and expect you to configure your\naccount (which is basically your email address). In order to prove Letâs Encrypt\nthat youâre the owner of the domains youâll request certificates for, LE will\ngive Traefik a challenge. There are multiple possible challenges, and we chose\nin the example the TLSChallenge. In the documentation, youâll find a description\nfor each other challenges\n[https://docs.traefik.io/v2.0/https/acme/#the-different-acme-challenges] (\ndnsChallenge [https://docs.traefik.io/v2.0/https/acme/#dnschallenge] and \nhttpChallenge [https://docs.traefik.io/v2.0/https/acme/#httpchallenge]).\n\nKnow that advanced users can define multiple CertificatesResolvers using\ndifferent challenges, and that they can use them to generate wildcards â¦ but\nthatâs a story weâll talk about later :-)\n\n2 â Enabling Automatic Certificate Generation\n\nNow that we have a mechanism to generate certificates for us, letâs leverage it\nto enable HTTPS on our route. Weâll only need two labels!\n\nmy-app:\n    image: containous/whoami:v1.3.0\n    labels:\n      - traefik.http.routers.my-app.rule=Host(`example.com`)\n      - traefik.http.routers.my-app.middlewares=auth\n      - traefik.http.routers.my-app.tls.certresolver=le\n      - traefik.http.routers.my-app.entrypoints=websecure\n\nFull compose file available there.\n[https://github.com/containous/blog-posts/blob/master/2019_09_10-101_docker/docker-compose-06.yml]\nQuick Explanation\nIn English, the first label means, âHey Traefik! (traefik.) My HTTP router (\nhttp.routers.) I call my-app (my-app.) uses TLS and the CertificateResolver\nnamed le (certresolver=le).â\n\nAnd the second says, âTraefik! (traefik.) this router, you know? (\nhttp.routers.my-app) It will only listen to the entrypoint I call websecure (\nentrypoints=websecure).â\n\nMore Details (Optional Read)\nTraefik 2.0 allows you to define TLS termination directly on your routers\n[https://docs.traefik.io/v2.0/routing/routers/#tls]!\n\nAlso, by default, routers listen to every known entrypoints. In our example, we\nwanted Traefik to limit the use of https on port 443, which is the reason why we\ntold the router to listen only to websecure (defined to port 443 with \nentrypoints.websecure.address=:443)\n\n\n--------------------------------------------------------------------------------\n\nI Want HTTPS Redirection!\nNow that we have HTTPS routes, letâs redirect every non-https requests to their\nhttps equivalent. For that, weâll reuse the previous trick and add just 4 labels \nto declare a redirect middleware and a catch-all router for unsecured routes.\n\nservices:\n  traefik:\n    image: \"traefik:v2.0.0\"\n    # ...\n    labels:\n      # ...\n      \n      # middleware redirect\n      - \"traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https\"\n      \n      # global redirect to https\n      - \"traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`)\"\n      - \"traefik.http.routers.redirs.entrypoints=web\"\n      - \"traefik.http.routers.redirs.middlewares=redirect-to-https\"\n\nFull compose file available there.\n[https://github.com/containous/blog-posts/blob/master/2019_09_10-101_docker/docker-compose-07.yml]\nQuick Explanation\nIn English, the first label means, âHey Traefik! (traefik.) letâs declare an\nHTTP middleware (http.middlewares.) weâll call redirect-to-https (\nredirect-to-https.). Itâs a RedirectScheme\n[https://docs.traefik.io/v2.0/middlewares/redirectscheme/] middleware (\nredirectscheme.) that will force the scheme to https (scheme=https).â\n\nThen, letâs see the router part, âHey Traefik! (you know the drill) (traefik.) I\nhave an HTTP router (http.routers.) Iâll call redirs (redirs.) that will match\nrequests on any host (rule=hostregexp(`{host:.+}`)) Yes sir! Iâm insane and will\ncatch everything, thatâs how greedy I am.â\n\nThen, we add, âHey Traefik! (traefik.) I was kidding â¦ the redirs HTTP router (\nhttp.routers.redirs.) wonât catch everything but just requests on port 80 (\nentrypoints=web).â\n\nFinally, weâll add the redirect middleware to the router. âTraefik? (traefik.)\nOn the redirs HTTP router (http.routers.redirs.) weâll add the redirect-to-https \nmiddleware (middlewares=redirect-to-https).â\n\nMore Details (Optional Read)\nBy now, weâve seen everything there is to know, so no additional details to\nlearn about :-)\n\n\n--------------------------------------------------------------------------------\n\nCompiling Everything for a Secured Dashboard!\nNow that weâve manipulated every important notion (Entrypoints, Routers,\nMiddleware, Services, CertificatesResolvers & TLS), we can combine them to\nobtain a secured Dashboard!\n\nversion: \"3.3\"\n\nservices:\n  traefik:\n    image: \"traefik:v2.0.0\"\n    command:\n      - --entrypoints.web.address=:80\n      - --entrypoints.websecure.address=:443\n      - --providers.docker\n      - --api\n      - --certificatesresolvers.le.acme.email=your@email.com\n      - --certificatesresolvers.le.acme.storage=/acme.json\n      - --certificatesresolvers.le.acme.tlschallenge=true\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n      - \"./acme.json:/acme.json\"\n    labels:\n      # Dashboard\n      - \"traefik.http.routers.traefik.rule=Host(`api.example.com`)\"\n      - \"traefik.http.routers.traefik.service=api@internal\"\n      - \"traefik.http.routers.traefik.middlewares=admin\"\n      - \"traefik.http.routers.traefik.tls.certresolver=le\"\n      - \"traefik.http.routers.traefik.entrypoints=websecure\"\n      - \"traefik.http.middlewares.admin.basicauth.users=admin:xxx\"\n\n      # ...\n\nFull compose file available there.\n[https://github.com/containous/blog-posts/blob/master/2019_09_10-101_docker/docker-compose-09.yml]\nQuick Explanation\nFirst, we remove the insecure api (specifying --api instead of --api.insecure).\n\nThen, we tell Traefik (traefik.) to add an HTTP router called traefik (\nhttp.routers.traefik.) catching requests on api.example.com (\nrule=Host(`api.example.com`)).\n\nThis router (traefik.http.routers.traefik.) will forward requests to a service\ncalled api@internal (service=api@internal), uses a middleware named admin (\nmiddlewares=admin), and uses tls (tls=true) with a certresolver called le (\ntls.certresolver=le).\n\nFinally, we declare the admin middleware (\ntraefik.http.middlewares.admin.basicauth.users=admin:xxx).\n\nMore Details (Optional Read)\nThe only subtle thing to know is that when you enable the api (in default mode,\nit creates an internal service called api@internal (Itâs then up to you to\nproperly secure it).\n\n\n--------------------------------------------------------------------------------\n\nQuestions? Where to Go Next?\nHopefully, weâve gone through important questions youâll have when dealing with\nTraefik 2.0 in a Docker setup, and we hope this article brings many answers.\n\nIf you want to keep the conversation going, let us know on the community forum\n[https://community.containo.us/c/traefik/traefik-v2]!\n\nIn the meantime â Happy Traefik!","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">Tips & Tricks the Documentation Doesnât Tell You</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-109.png\" class=\"kg-image\"></figure><p>Docker friends â Welcome!</p><p>Today we decided to dedicate some time to walk you through the 2.0 changes using practical &amp; common scenarios. Hopefully, after having read this article, youâll understand every concept there is to know, and youâll keep learning by yourself, discovering tips &amp; tricks to share with the community.</p><p>Before we go further, Iâll assume for this article that you already have a docker setup using Traefik 2.0. Since I like to use docker-compose files for basic demonstrations, Iâll use the following base compose file:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-yaml\">version: \"3.3\"\n\nservices:\n  traefik:\n    image: \"traefik:v2.0.0\"\n    command:\n      - --entrypoints.web.address=:80\n      - --providers.docker=true\n    ports:\n      - \"80:80\"\n      - \"8080:8080\"\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n  \n  my-app:\n    image: containous/whoami:v1.3.0</code></pre><figcaption><a href=\"https://github.com/containous/blog-posts/blob/master/2019_09_10-101_docker/docker-compose-01.yml\" rel=\"noopener\">Full compose file available there.</a></figcaption></figure><p><em><em>Nothing fancy, we declare an </em></em><a href=\"https://docs.traefik.io/v2.0/routing/entrypoints/\" rel=\"noopener\"><em><em>entrypoint</em></em></a><em><em> (</em></em><code><em><em>web</em></em></code><em><em> for port </em></em><code><em><em>80</em></em></code><em><em>), enable the docker </em></em><a href=\"https://docs.traefik.io/v2.0/providers/overview/\" rel=\"noopener\"><em><em>provider</em></em></a><em><em>, attach our traefik container to the needed ports and make sure we can listen to Docker thought the socket. We also have an application </em></em><code><em><em>my-app</em></em></code><em><em> weâll expose later.</em></em></p><p><strong><strong>Side Note</strong></strong>: You can get the examples from our repository if you want to play with them. (Yes, we know how dangerous it can be to copy/paste some YAML :-))</p><p>Now that weâre all set, letâs start!</p><hr><h2 id=\"let-s-enable-the-dashboard-\">Letâs Enable the Dashboard!</h2><p>Because we all enjoy seeing what weâre doing, weâll first enable Traefikâs Dashboard in <em><em>development</em></em> mode, and all we need to do is add <em><em>one</em></em> argument to the Traefik command itself.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-yaml\">services:\n  traefik:\n    image: \"traefik:v2.0.0\"\n    command:\n      - --entrypoints.web.address=:80\n      - --providers.docker\n      - --api.insecure # Don't do that in production\n#   ...</code></pre><figcaption><a href=\"https://github.com/containous/blog-posts/blob/master/2019_09_10-101_docker/docker-compose-02.yml\" rel=\"noopener\">Full compose file available there.</a></figcaption></figure><p>There we are! By adding <code>--api.insecure</code> weâve enabled the API along with the dashboard. But beware, in this first step, weâve enabled the insecure development mode â Donât do that in production!</p><p>Of course, weâll see at the end of the article how to enable a secured dashboard, but for now, you can enjoy and see it on localhost:8080/dashboard/</p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-11.png\" class=\"kg-image\"></figure><hr><h2 id=\"my-application-handles-requests-on-example-com\">My Application Handles Requests on \"example.com\"</h2><p>If you only need to route requests to <code>my-app</code> based on the host, then attach <em><em>one</em></em> label to your container â Thatâs it!</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-yaml\">services:\n  my-app:\n    image: containous/whoami:v1.3.0\n    labels:\n      - traefik.http.routers.my-app.rule=Host(`example.com`)</code></pre><figcaption><a href=\"https://github.com/containous/blog-posts/blob/master/2019_09_10-101_docker/docker-compose-03.yml\" rel=\"noopener\">Full compose file available there.</a></figcaption></figure><h3 id=\"quick-explanation\">Quick Explanation</h3><p>In English, this label means, âHey Traefik! (<code>traefik.</code>) This HTTP router (<code>http.routers.</code>) I call my-app (<code>my-app.</code>) must catch requests to example.com (<code>rule=Host(`example.com`)</code>).â</p><h3 id=\"more-details-optional-read-\">More Details (Optional Read)</h3><p>Traefik 2.0 introduces the notion of <a href=\"https://docs.traefik.io/v2.0/routing/routers/\" rel=\"noopener\">Routers</a>. Routers define the routes that connect your services to the requests, and you use <a href=\"https://docs.traefik.io/v2.0/routing/routers/#rule\" rel=\"noopener\">rules</a> to define <em><em>what</em></em> makes the connection. This is the reason why you see <code>routers</code> in the label, as well as <code>rule</code>.</p><p>Traefik 2.0 also introduces TCP support (in addition to the existing HTTP support). Since Traefik supports both protocols, it wants to know what kind of protocol youâre interested in, which explains the <code>http</code> keyword in the label.</p><hr><h2 id=\"my-application-listens-on-a-specific-port\">My Application Listens on a Specific Port</h2><p>What happens if your application listens on a different port than the default <code>:80</code>? Letâs say it listens on <code>:8082</code>. Weâll build on the previous example and add (again) <em><em>one</em></em> label.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-yaml\">services:\n  my-service:\n    image: containous/whoami:v1.3.0\n    command:\n      - --port=8082 # Our service listens on 8082\n    labels:\n      - traefik.http.routers.my-app.rule=Host(`example.com`)\n      - traefik.http.services.my-app.loadbalancer.server.port=8082</code></pre><figcaption><a href=\"https://github.com/containous/blog-posts/blob/master/2019_09_10-101_docker/docker-compose-04.yml\" rel=\"noopener\">Full compose file available there.</a></figcaption></figure><h3 id=\"quick-explanation-1\">Quick Explanation</h3><p>In English, this label means, âHey Traefik! (<code>traefik.</code>) This HTTP service (<code>http.services.</code>) I call my-app (<code>my-app.</code>) will load balance incoming requests between servers (<code>.server</code>) that listen on port 8082 (<code>.port=8082</code>).â</p><h3 id=\"more-details-optional-read--1\">More Details (Optional Read)</h3><p>Traefik 2.0 introduces the notion of <a href=\"https://docs.traefik.io/v2.0/routing/services/\" rel=\"noopener\">Services</a>. Services are the <em><em>targets</em></em> for the routes. They usually define how to reach your programs in your cluster. Services can have different types. The most common one is the <a href=\"https://docs.traefik.io/v2.0/routing/services/#servers-load-balancer\" rel=\"noopener\">LoadBalancer</a> type. The LoadBalancer type is a round robin between all the available instances (called <code>server</code>). By default, Traefik considers that your program is available on the port exposed by the Dockerfile of your program, but you can change that by explicitly defining the port.</p><p>Since we specify only one service in the example, there is no need to define the target of the previously defined router explicitly.</p><p>Side Note: The<code>â-port=8082</code> command is specific to our <code>whoami</code> application and has nothing to do with Traefik. It tells <code>whoami</code> to start listening on 8082, so we can simulate our use case.</p><hr><h2 id=\"i-need-basicauth-or-any-piece-of-middleware-\">I Need BasicAuth (Or Any Piece of Middleware)</h2><p>Once Traefik has found a match for the request, it can process it before forwarding it to the service. In the following example, weâll add a BasicAuth mechanism for our route. This is done with <em><em>two</em></em> additional labels.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-yaml\">services:\n  my-svc:\n    image: containous/whoami:v1.3.0\n    labels:\n      - traefik.http.routers.my-app.rule=Host(`example.com`)\n      - traefik.http.routers.my-app.middlewares=auth\n      - traefik.http.middlewares.auth.basicauth.users=test:xxx</code></pre><figcaption><a href=\"https://github.com/containous/blog-posts/blob/master/2019_09_10-101_docker/docker-compose-05.yml\" rel=\"noopener\">Full compose file available there.</a></figcaption></figure><h3 id=\"quick-explanation-2\">Quick Explanation</h3><p>In English, the first label means, âHey Traefik! (<code>traefik.</code>) My HTTP router I called my-app, remember? (<code>http.routers.my-app.</code>) Iâd like to attach to it a piece of middleware named auth (<code>.middlewares=auth</code>).â</p><p>Of course, since we havenât yet declared the <code>auth</code> middleware, we need to be a bit more explicit, so the second label means, âHey Traefik! (<code>traefik.</code>) Letâs talk about an HTTP middleware (<code>http.middlewares.</code>) I call auth (<code>auth.</code>). Itâs a BasicAuth middleware (<code>basicauth.</code>). Since you probably need users to know who can do what, here is the users list (<code>.users=test:xxx</code>).â</p><h3 id=\"more-details-optional-read--2\">More Details (Optional Read)</h3><p>Traefik 2.0 introduces the notion of <a href=\"https://docs.traefik.io/v2.0/middlewares/overview/\" rel=\"noopener\">Middleware</a>. Middleware is a way to define behaviors and tweak the incoming request before forwarding it to the service. Since they act before the request is forwarded, they are attached to Routers. You can define middleware and reuse them as many times as you like (this is why you need to name them, in the example <code>auth</code>). There are many kinds of middleware, and <a href=\"https://docs.traefik.io/v2.0/middlewares/basicauth/\" rel=\"noopener\">BasicAuth</a> is one of them. Each middleware has a different set of parameters to define their behaviors (in the example, we define the users list).</p><hr><h2 id=\"i-need-https\">I Need HTTPS</h2><p>With Traefik, enabling automatic certificate generation is a matter of <em><em>4 lines of configuration, </em></em>and enabling HTTPS on your routes is a matter of<em><em> 2 lines of configuration</em></em>.</p><p><strong><strong>1 â Enabling Automatic Certificate Generation</strong></strong></p><p>Weâll introduce a little tip here â Since Traefik is launched as a container, weâll attach labels to it for common configuration options. (What is specific to other containers will, of course, stay on other containers, weâre not messy people!)</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-yaml\">services:\n  traefik:\n    image: \"traefik:v2.0.0\"\n    command:\n      - --entrypoints.websecure.address=:443\n      # ...\n      - --certificatesresolvers.le.acme.email=my@email.com\n      - --certificatesresolvers.le.acme.storage=/acme.json\n      - --certificatesresolvers.le.acme.tlschallenge=true\n      # ...\n    ports:\n      # ...\n      - \"443:443\"</code></pre><figcaption><a href=\"https://github.com/containous/blog-posts/blob/master/2019_09_10-101_docker/docker-compose-06.yml\" rel=\"noopener\">Full compose file available there.</a></figcaption></figure><h3 id=\"quick-explanation-3\">Quick Explanation</h3><p>Weâve seen already the first command line given to Traefik. In English, it means, âI have an entrypoint (<code>entrypoints.</code>) I call websecure (<code>websecure.</code>) that uses port 443 (<code>.address=:443</code>).â And since Traefik now listens to 443, we need to tell Docker that it should bind external port 443 to our serviceâs port 443 (<code>\"443:443\"</code>).</p><p>Now, the others are a bit trickier, but nothing crazy if youâve had time to drink your coffee/tea. The first says, âIâd like a mechanism to generate certificates for me (<code>certificatesresolvers.</code>) that Iâll call le (<code>le.</code>). Itâs an acme resolver (<code>acme.</code>), my account there is <code>my@email.com</code> (<code>email=my@email.com</code>).â (Disclaimer: not my real email address, donât try it.)</p><p>The second says, âThis mechanism named <code>le</code> I told you about, the acme stuff (<code>certificatesresolvers.le.acme.</code>), it will save the certificates in the file <code>/acme.json </code>(<code>storage=/acme.json</code>).â</p><p>And the third is our inner geek speaking, âSince this <code>le</code> mechanism I defined before (<code>certificatesresolvers.le.acme.</code>) supports different challenges for certificate generation, Iâll choose â¦ the TLS challenge (<code>tlschallenge=true</code>).â</p><p>That was a bit more text than usual, but here we are: we have a fully functional mechanism to generate/renew certificates for us!</p><h3 id=\"more-details-optional-read--3\">More Details (Optional Read)</h3><p>Traefik 2.0 introduces the notion of <a href=\"https://docs.traefik.io/v2.0/https/acme/\" rel=\"noopener\">CertificatesResolvers</a>. Certificates resolvers are a system that handles certificate generation/renewal/disposal for you. They detect the hosts youâve defined for your routers and get the matching certificates.</p><p>Currently, certificates resolvers leverage <a href=\"https://letsencrypt.org/\" rel=\"noopener\">Letâs Encrypt</a> to get certificates, and expect you to configure your account (which is basically your email address). In order to prove Letâs Encrypt that youâre the owner of the domains youâll request certificates for, LE will give Traefik a challenge. There are multiple possible challenges, and we chose in the example the TLSChallenge. In the documentation, youâll find a description for each <a href=\"https://docs.traefik.io/v2.0/https/acme/#the-different-acme-challenges\" rel=\"noopener\">other challenges</a> (<a href=\"https://docs.traefik.io/v2.0/https/acme/#dnschallenge\" rel=\"noopener\">dnsChallenge</a> and <a href=\"https://docs.traefik.io/v2.0/https/acme/#httpchallenge\" rel=\"noopener\">httpChallenge</a>).</p><p>Know that advanced users can define multiple CertificatesResolvers using different challenges, and that they can use them to generate wildcards â¦ but thatâs a story weâll talk about later :-)</p><p><strong><strong>2 â Enabling Automatic Certificate Generation</strong></strong></p><p>Now that we have a mechanism to generate certificates for us, letâs leverage it to enable HTTPS on our route. Weâll only need <em><em>two</em></em> labels!</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-yaml\">my-app:\n    image: containous/whoami:v1.3.0\n    labels:\n      - traefik.http.routers.my-app.rule=Host(`example.com`)\n      - traefik.http.routers.my-app.middlewares=auth\n      - traefik.http.routers.my-app.tls.certresolver=le\n      - traefik.http.routers.my-app.entrypoints=websecure</code></pre><figcaption><a href=\"https://github.com/containous/blog-posts/blob/master/2019_09_10-101_docker/docker-compose-06.yml\" rel=\"noopener\">Full compose file available there.</a></figcaption></figure><h3 id=\"quick-explanation-4\">Quick Explanation</h3><p>In English, the first label means, âHey Traefik! (<code>traefik.</code>) My HTTP router (<code>http.routers.</code>) I call <em><em>my-app</em></em> (<code>my-app.</code>) uses TLS and the CertificateResolver named le (<code>certresolver=le</code>).â</p><p>And the second says, âTraefik! (<code>traefik.</code>) this router, you know? (<code>http.routers.my-app</code>) It will only listen to the <em><em>entrypoint</em></em> I call <em><em>websecure </em></em>(<code>entrypoints=websecure</code>).â</p><h3 id=\"more-details-optional-read--4\">More Details (Optional Read)</h3><p>Traefik 2.0 allows you to define TLS termination <a href=\"https://docs.traefik.io/v2.0/routing/routers/#tls\" rel=\"noopener\">directly on your routers</a>!</p><p>Also, by default, routers listen to every known <em><em>entrypoints</em></em>. In our example, we wanted Traefik to limit the use of https on port <code>443</code>, which is the reason why we told the router to listen only to <em><em>websecure</em></em> (defined to port 443 with <code>entrypoints.websecure.address=:443</code>)</p><hr><h2 id=\"i-want-https-redirection-\">I Want HTTPS Redirection!</h2><p>Now that we have HTTPS routes, letâs redirect every non-https requests to their https equivalent. For that, weâll reuse the previous trick and add just <em><em>4 labels</em></em> to declare a redirect middleware and a catch-all router for unsecured routes.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-yaml\">services:\n  traefik:\n    image: \"traefik:v2.0.0\"\n    # ...\n    labels:\n      # ...\n      \n      # middleware redirect\n      - \"traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https\"\n      \n      # global redirect to https\n      - \"traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`)\"\n      - \"traefik.http.routers.redirs.entrypoints=web\"\n      - \"traefik.http.routers.redirs.middlewares=redirect-to-https\"</code></pre><figcaption><a href=\"https://github.com/containous/blog-posts/blob/master/2019_09_10-101_docker/docker-compose-07.yml\" rel=\"noopener\">Full compose file available there.</a></figcaption></figure><h3 id=\"quick-explanation-5\">Quick Explanation</h3><p>In English, the first label means, âHey Traefik! (<code>traefik.</code>) letâs declare an HTTP middleware (<code>http.middlewares.</code>) weâll call redirect-to-https (<code>redirect-to-https.</code>). Itâs a <a href=\"https://docs.traefik.io/v2.0/middlewares/redirectscheme/\" rel=\"noopener\">RedirectScheme</a> middleware (<code>redirectscheme.</code>) that will force the scheme to https (<code>scheme=https</code>).â</p><p>Then, letâs see the router part, âHey Traefik! (you know the drill) (<code>traefik.</code>) I have an HTTP router (<code>http.routers.</code>) Iâll call redirs (<code>redirs.</code>) that will match requests on any host (<code>rule=hostregexp(`{host:.+}`)</code>) Yes sir! Iâm insane and will catch everything, thatâs how greedy I am.â</p><p>Then, we add, âHey Traefik! (<code>traefik.</code>) I was kidding â¦ the <em><em>redirs</em></em> HTTP router (<code>http.routers.redirs.</code>) wonât catch everything but just requests on port 80 (<code>entrypoints=web</code>).â</p><p>Finally, weâll add the redirect middleware to the router. âTraefik? (<code>traefik.</code>) On the <em><em>redirs</em></em> HTTP router (<code>http.routers.redirs.</code>) weâll add the <em><em>redirect-to-https</em></em> middleware (<code>middlewares=redirect-to-https</code>).â</p><h3 id=\"more-details-optional-read--5\">More Details (Optional Read)</h3><p>By now, weâve seen everything there is to know, so no additional details to learn about :-)</p><hr><h2 id=\"compiling-everything-for-a-secured-dashboard-\">Compiling Everything for a Secured Dashboard!</h2><p>Now that weâve manipulated every important notion (Entrypoints, Routers, Middleware, Services, CertificatesResolvers &amp; TLS), we can combine them to obtain a secured Dashboard!</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-yaml\">version: \"3.3\"\n\nservices:\n  traefik:\n    image: \"traefik:v2.0.0\"\n    command:\n      - --entrypoints.web.address=:80\n      - --entrypoints.websecure.address=:443\n      - --providers.docker\n      - --api\n      - --certificatesresolvers.le.acme.email=your@email.com\n      - --certificatesresolvers.le.acme.storage=/acme.json\n      - --certificatesresolvers.le.acme.tlschallenge=true\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n      - \"./acme.json:/acme.json\"\n    labels:\n      # Dashboard\n      - \"traefik.http.routers.traefik.rule=Host(`api.example.com`)\"\n      - \"traefik.http.routers.traefik.service=api@internal\"\n      - \"traefik.http.routers.traefik.middlewares=admin\"\n      - \"traefik.http.routers.traefik.tls.certresolver=le\"\n      - \"traefik.http.routers.traefik.entrypoints=websecure\"\n      - \"traefik.http.middlewares.admin.basicauth.users=admin:xxx\"\n\n      # ...</code></pre><figcaption><a href=\"https://github.com/containous/blog-posts/blob/master/2019_09_10-101_docker/docker-compose-09.yml\" rel=\"noopener\">Full compose file available there.</a></figcaption></figure><h3 id=\"quick-explanation-6\">Quick Explanation</h3><p>First, we remove the insecure api (specifying <code>--api</code> instead of <code>--api.insecure</code>).</p><p>Then, we tell Traefik (<code>traefik.</code>) to add an HTTP router called traefik (<code>http.routers.traefik.</code>) catching requests on <em><em>api.example.com</em></em> (<code>rule=Host(`api.example.com`)</code>).</p><p>This router (<code>traefik.http.routers.traefik.</code>) will forward requests to a service called api@internal (<code>service=api@internal</code>), uses a middleware named admin (<code>middlewares=admin</code>), and uses tls (<code>tls=true</code>) with a certresolver called <em><em>le</em></em> (<code>tls.certresolver=le</code>).</p><p>Finally, we declare the admin middleware (<code>traefik.http.middlewares.admin.basicauth.users=admin:xxx</code>).</p><h3 id=\"more-details-optional-read--6\">More Details (Optional Read)</h3><p>The only subtle thing to know is that when you enable the api (in default mode, it creates an internal service called <code>api@internal</code> (Itâs then up to you to properly secure it).</p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-12.png\" class=\"kg-image\"></figure><hr><h2 id=\"questions-where-to-go-next\">Questions? Where to Go Next?</h2><p>Hopefully, weâve gone through important questions youâll have when dealing with Traefik 2.0 in a Docker setup, and we hope this article brings many answers.</p><p>If you want to keep the conversation going, let us know on the <a href=\"https://community.containo.us/c/traefik/traefik-v2\" rel=\"noopener\">community forum</a>!</p><p>In the meantime â Happy Traefik!</p>","url":"https://containous.ghost.io/blog/traefik-2-0-docker-101-fc2893944b9d/","canonical_url":null,"uuid":"56123f92-a17f-4afe-a461-a255ae2f2e1e","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dd550aeec5ed3003878892e","reading_time":9}},{"node":{"id":"Ghost__Post__5dd54affec5ed3003878888c","title":"Traefik 2.0","slug":"traefik-2-0-6531ec5196c2","featured":false,"feature_image":"https://containous.ghost.io/content/images/2020/04/Traefik2.0-Blog.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/d296ee0938e591fca4472b2324a12286/f3583/Traefik2.0-Blog.png","srcSet":"/static/d296ee0938e591fca4472b2324a12286/630fb/Traefik2.0-Blog.png 300w,\n/static/d296ee0938e591fca4472b2324a12286/2a4de/Traefik2.0-Blog.png 600w,\n/static/d296ee0938e591fca4472b2324a12286/f3583/Traefik2.0-Blog.png 1200w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"When we started our journey toward 2.0, we had high expectations (since you had high expectations), and huddled around the whiteboard...","custom_excerpt":"When we started our journey toward 2.0, we had high expectations (since you had high expectations), and huddled around the whiteboard...","visibility":"public","created_at_pretty":"20 November, 2019","published_at_pretty":"September 17, 2019","updated_at_pretty":"22 May, 2020","created_at":"2019-11-20T14:17:35.000+00:00","published_at":"2019-09-17T14:28:00.000+00:00","updated_at":"2020-05-22T00:42:01.000+00:00","meta_title":"Traefik 2.0 - The Wait is Over!","meta_description":"When we started our journey toward 2.0, we had high expectations (since you had high expectations), and huddled around the whiteboard...","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"The Wait Is Over!\n\nWhen we started our journey toward 2.0, we had high expectations (since you had\nhigh expectations), and huddled around the whiteboard.\n\nWe designed Version 2 as if there were no constraints: we forgot our codebase,\nput aside technical challenges, and developed a new configuration structure that\nwould welcome everything we had ever dreamed of for Traefik.\n\n> We forgot what was impossible so we could build it!\nA year later, we proudly present to you Traefik 2.0. Make sure you grab your cup\nof coffee/cup of tea before going further because this is probably the biggest\nnew features list weâve ever had to write!\n\n\n--------------------------------------------------------------------------------\n\nTCP Support with SNI Routing & Multi-Protocol Ports\nWe talked about this flagship feature in the 2.0 alpha announcement\n[/blog/back-to-traefik-2-0-2f9aa17be305/], but since it was feature request #10\n[https://github.com/containous/traefik/issues/10], we thought we would dedicate\nsome time to discussing this key element in a world of new possibilities.\n\nLetâs see a sample configuration â using the newly supported YAML format â that\nroutes requests to a database:\n\ntcp:\n  routers:\n    to-database:\n      entrypoints:\n      - database-entrypoint\n      rule: HostSNI(`*`)\n      service: database-service\n  services:     \n    database-service:\n      loadBalancer:\n        servers:\n        - address: xx.xx.xx.xx:xx\n\nIn the example above, every request ending on database-entrypoint will be routed\nto our database-service.\n\n> Over TLS, Traefik routes TCP \nrequests based on the SNI\nIn the following example, Traefik [/traefik/] routes requests to two databases\nbased on the SNI (Server Name Indication):\n\ntcp:\n  routers:\n    to-db-1:\n      entrypoints:\n      - web-secure\n      rule: \"HostSNI(`db1.domain`)\"\n      service: \"db1\"\n      tls: {} \n    to-db-2:\n      entrypoints:\n      - web-secure\n      rule: \"HostSNI(`db2.domain`)\"\n      service: \"db2\"\n      tls: {}\n\n> HTTP & TCP on the same port?\nYes, there is Traefik for that!\nIf you ever want to have the same entrypoint get both HTTP and TCP requests,\nknow that Traefik will handle it perfectly!\n\ntcp:\n  routers:\n    to-db-1:\n      entrypoints:\n      - web-secure\n      rule: \"HostSNI(`db1.domain`)\"\n      service: \"db-1\"\n      tls: {}\nhttp:\n  routers:\n    to-db1-dashboard:\n      entrypoints:\n      - web-secure\n      rule: \"Host(`dashboard.db1.domain`)\"\n      service: \"db1-dashboard\"\n      tls: {}\n\nIn the above example, HTTP requests on dashboard.db1.domain will be routed to\nthe database dashboard service, and TCP requests on db1.domain will be routed to\nthe database.\n\nFully Customize Your Routes with Middleware\nTraefik 2.0 introduces middleware\n[https://docs.traefik.io/middlewares/overview/]: a common banner for features\nthat tweak requests before/after routing them to their destinations.\n\n> You can declare Middleware and reuse them on as \nmany routers as you like.\nWant to see how to configure them? Letâs declare a BasicAuth middleware\n[https://docs.traefik.io/middlewares/basicauth/] to control access to our\nservice! (this time using TOML)\n\n# Declaring a basicauth middleware with two users\n[http.middlewares.test-auth.basicAuth]\n  users = [\"user1:hashed\", \"user2:hashed\"]\n\n# Applying the middleware to our router\n[http.routers.my-router.to-service]\n  rule = \"host(`my-protected.domain`)\"\n  middlewares = [\"test-auth\"]\n  service = \"service1\"\n\n> A Chain to Bind Them All\nIf you have a classic combination you often use together, you can declare chains\n[https://docs.traefik.io/middlewares/chain/], and reuse them over and over.\nWhatâs even better for our Kubernetes users, you can use Traefikâs new CRD\n(Custom Resource Definition) for a crystal clear configuration that doesnât\ninvolve intricate annotations. (You can find more information on the \nIngressRoute object\n[https://docs.traefik.io/providers/kubernetes-crd/#traefik-ingressroute-definition] \nin our documentation.)\n\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: test\n  namespace: default\nspec:\n  entryPoints:\n    - web\n  routes:\n    - match: Host(`mydomain`)\n      kind: Rule\n      services:\n        - name: whoami\n          port: 80\n      middlewares:\n        - name: secured\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: secured\nspec:\n  chain:\n    middlewares:\n    - name: https-only\n    - name: known-ips\n    - name: auth-users\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: auth-users\nspec:\n  basicAuth:\n    secret: secretUsers #yes! Compatible with K8S secrets\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: https-only\nspec:\n  redirectScheme:\n    scheme: https\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: known-ips\nspec:\n  ipWhiteList:\n    sourceRange:\n    - 192.168.1.7\n    - 127.0.0.1/32\n\nAt release, Traefik comes with many pieces of middleware\n[https://docs.traefik.io/middlewares/overview/]: path manipulation\n[https://docs.traefik.io/middlewares/replacepath/], several authentication\nmechanisms [https://docs.traefik.io/middlewares/forwardauth/], buffering\n[https://docs.traefik.io/middlewares/buffering/], circuit breaker\n[https://docs.traefik.io/middlewares/circuitbreaker/], retry\n[https://docs.traefik.io/middlewares/retry/], compression\n[https://docs.traefik.io/middlewares/compress/], error handling\n[https://docs.traefik.io/middlewares/errorpages/], headers\n[https://docs.traefik.io/middlewares/headers/], IP whitelisting\n[https://docs.traefik.io/middlewares/ipwhitelist/], rate limiting\n[https://docs.traefik.io/middlewares/ratelimit/], redirections\n[https://docs.traefik.io/middlewares/redirectscheme/], and more.\n\nAlso, weâve re-architectured the code to make it easier for contributors to\nprovide additional pieces of middleware, and Iâm sure weâll find a way to do \neven better [https://github.com/containous/yaegi].\n\nA New Dashboard & WebUI\nOur goal with the new WebUI was to show users what was happening on their\ncluster at a glance. We also wanted to display what features they can enable.\n\nSince the flow has changed, we wanted to display every path that leads to\nservices, with every configuration option.\n\nCanary Deployments with Service Load Balancers\nAnother long-awaited feature [https://github.com/containous/traefik/issues/1164] \nâ canary deployments, A/B testing â makes its way into Traefik 2.0 in the form\nof Service Load Balancers.\n\nService Load Balancers can be seen as virtual services that are responsible for\nforwarding the request to the actual services.\n\nLetâs take a classic scenario where you have an existing route to an API:\n\nhttp:\n  routers:\n    my-route:\n      rule: \"Host(`my.domain`)\"\n      service: my-api-v1\n  services:\n    my-api-v1:\n      loadBalancer:\n        servers:\n        - url: \"http://private-ip-server-1/\"\n\nNow you want to deploy a new version of this service, but would like to deploy\nit progressively, letâs say approximately a third of the requests. What youâll\ndo is deploy the new service, with its own ID (here itâsmy-api-v2).\n\nhttp:\n  services:\n    my-api-v2:\n      loadBalancer:\n        servers:\n        - url: \"http://private-ip-server-2/\"\n\nThen, instead of pointing directly to this new version, youâll first define a\nService Load Balancer (in the example canary-api) and define the proportion for\neach version (with the weight option).\n\nhttp:\n  services:\n    canary-api:\n      weighted:\n        services:\n        - name: my-api-v1\n          weight: 3\n        - name: my-api-v2\n          weight: 1\n\nFinally, point to this canary-api service from your router.\n\nhttp:\n  routers:\n    my-route:\n      rule: \"Host(`my.domain`)\"\n      service: canary-api\n\nLater, youâll be able to update the weight without having to redeploy your \nactual services. Youâll also be able to scale them without any impact on the\ncanary deployment itself.\n\nMirroring with Service Load Balancers\nCanary deployments arenât the only tricks available in the service family.\nTraefik 2.0 introduces Mirroring Services â a way to duplicate the incoming\nrequest [https://github.com/containous/traefik/issues/2989] and send it to\ndifferent services at the same time. The mirror will get a given percentage of\nrequests, and its answers will be ignored.\n\n[http.services.mirrored-api]\n    [http.services.mirrored-api.mirroring]\n      service = \"api\"\n    [[http.services.mirrored-api.mirroring.mirrors]]\n      name = \"api-v2\"\n      percent = 10\n\n[http.services.api]\n    [http.services.api.loadBalancer]\n      [[http.services.api.loadBalancer.servers]]\n        url = \"http://private-ip-server-1/\"\n\n[http.services.api-v2]\n    [http.services.api-v2.loadBalancer]\n      [[http.services.api-v2.loadBalancer.servers]]\n        url = \"http://private-ip-server-2/\"\n\nIn the above example, weâre sending 10% of the requests to the mirror.\n\nAnd Much, Much More!\nTraefik 2.0 introduces a syntax (@provider) to allow users to declare elements\n(middleware, services, routers) in a provider and to reference them from an\nother one. It provides an easier way to configure CORS headers\n[https://docs.traefik.io/middlewares/headers/#cors-headers], embeds a redesigned \nconstraint management\n[https://docs.traefik.io/providers/overview/#restrict-the-scope-of-service-discovery] \nto better control services you want to expose, and improves the default rule\ngeneration for a quick and easy way to define routes for containers.\n\nOn top of many enhancements [https://docs.traefik.io/operations/api/], the API\nnow embeds status information for your middleware, services, routers, and\nreports errors to help you identify and fix problems.\n\nThe polished configuration options ensure that configuring Traefik is always\nachieved the same way whether expressed with TOML, YAML, labels, or keys, and\nthe revamped documentation [https://docs.traefik.io/] includes examples for\nevery syntax.\n\nYou can define TLS termination separately on each router, configure TLS\npassthrough, use the new CertResolver to benefit from different challenges for\ncertificate generation (yes, itâs now multiple-DNS-providers-proof!), and\ndynamically generate wildcard certificates.\n\nRouter rules now use a go-like syntax with operators and parenthesis\n[https://docs.traefik.io/routing/routers/#rule] for powerful and readable\ncombinations.\n\nThe list goes on and on with bug fixes and other significant tweaks!\n\n\n--------------------------------------------------------------------------------\n\nMigrating From 1.x\nWith so many new features, bug fixes, and enhancements, Traefik 2.0 might ask\nyou to re-think the way you used to route your requests. In order to facilitate\nthe transition and help you leverage the power of these new options, we\ninitiated a migration guide [https://docs.traefik.io/migration/v1-to-v2/] that\ngoes through every change we made.\n\nFor our Kubernetes [https://kubernetes.io/] user-base, weâve also written a \nmigration tool [https://github.com/containous/traefik-migration-tool] to help\nyou convert your Ingress objects to the new IngressRoute format. (This migration\ntool will also help all users convert their acme.json file.)\n\nAll this is designed for the thousands of people already using Traefik.\n\n\n--------------------------------------------------------------------------------\n\nBehind the Curtain\nTraefik 2.0 is not the only thing that has improved! By the time we released\n2.0, we launched TraefikEE [/traefikee/], Yaegi\n[https://github.com/containous/yaegi], Maesh [/maesh/], and you can bet weâll\nkeep going further. We also constantly monitor our processes and tools. Weâve\nlaunched a Community Forum [https://community.containo.us/] to foster better\ncommunication amongst users, introduced a monthly journal, and scheduled \nTraefik\nOnline Meetups [/events/] to promote the community talent.\n\n\n--------------------------------------------------------------------------------\n\nNext Steps\nMore than anything, this release shows the importance of the community. Every\n[https://github.com/containous/traefik/issues/10] feature\n[https://github.com/containous/traefik/issues/2999] that\n[https://github.com/containous/traefik/issues/7] has\n[https://github.com/containous/traefik/issues/727] been\n[https://github.com/containous/traefik/issues/895] discussed\n[https://github.com/containous/traefik/issues/1164] today\n[https://github.com/containous/traefik/issues/160] was born\n[https://github.com/containous/traefik/issues/2989] from\n[https://github.com/containous/traefik/issues/914] a\n[https://github.com/containous/traefik/issues/2653] user\n[https://github.com/containous/traefik/issues/966] asking for a new feature\n[https://github.com/containous/traefik/issues/3378], reporting a bug\n[https://github.com/containous/traefik/issues/4069], or just asking\n[https://github.com/containous/traefik/issues/3868] for âbetter.â\n[https://github.com/containous/traefik/issues/2773]\n\nTraefik 1.X has been downloaded more than a billion times, and we hope to double\nthat number with Traefik 2.X.\n\n> â¤ï¸ Thank you for your support!â¤ï¸\nâ¦ and keep raising your voice for the (many) version(s) to come!\n\nP.S. â Stay tuned! There is so much to show you with this new version that our\ndeveloper team is preparing an Online Meetup for you. :-)\n\n\n--------------------------------------------------------------------------------\n\nUseful Links\n * Traefik documentation [https://docs.traefik.io/], website [/traefik/] & \n   Github page [https://github.com/containous/traefik]\n * Containous website [/]\n * Community forum [https://community.containo.us/]","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">The Wait Is Over!</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-108.png\" class=\"kg-image\"></figure><p>When we started our journey toward 2.0, we had high expectations (since <em><em>you</em></em> had high expectations), and huddled around the whiteboard.</p><p>We designed Version 2 as if there were no constraints: we forgot our codebase, put aside technical challenges, and developed a new configuration structure that would welcome everything we had ever dreamed of for Traefik.</p><blockquote>We forgot what was impossible so we could build it!</blockquote><p>A year later, we proudly present to you Traefik 2.0. Make sure you grab your cup of coffee/cup of tea before going further because this is probably the biggest new features list weâve ever had to write!</p><hr><h2 id=\"tcp-support-with-sni-routing-multi-protocol-ports\">TCP Support with SNI Routing &amp; Multi-Protocol Ports</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-4.png\" class=\"kg-image\"></figure><p>We talked about this flagship feature in the <a href=\"https://containous.ghost.io/blog/back-to-traefik-2-0-2f9aa17be305/\">2.0 alpha announcement</a>, but since it was <a href=\"https://github.com/containous/traefik/issues/10\" rel=\"noopener\">feature request #10</a>, we thought we would dedicate some time to discussing this key element in a world of new possibilities.</p><p>Letâs see a sample configuration â using the <em><em>newly supported </em></em><strong><strong><em><em>YAML</em></em></strong></strong><em><em> format</em></em> â that routes requests to a database:</p><pre><code class=\"language-yaml\">tcp:\n  routers:\n    to-database:\n      entrypoints:\n      - database-entrypoint\n      rule: HostSNI(`*`)\n      service: database-service\n  services:     \n    database-service:\n      loadBalancer:\n        servers:\n        - address: xx.xx.xx.xx:xx</code></pre><p>In the example above, every request ending on <code>database-entrypoint</code> will be routed to our <code>database-service</code>.</p><blockquote>Over TLS, Traefik routes TCP <br>requests based on the SNI</blockquote><p>In the following example, <a href=\"https://containous.ghost.io/traefik/\">Traefik</a> routes requests to two databases based on the SNI (<em><em>Server Name Indication</em></em>):</p><pre><code class=\"language-yaml\">tcp:\n  routers:\n    to-db-1:\n      entrypoints:\n      - web-secure\n      rule: \"HostSNI(`db1.domain`)\"\n      service: \"db1\"\n      tls: {} \n    to-db-2:\n      entrypoints:\n      - web-secure\n      rule: \"HostSNI(`db2.domain`)\"\n      service: \"db2\"\n      tls: {}</code></pre><blockquote>HTTP &amp; TCP on the same port?<br>Yes, there is Traefik for that!</blockquote><p>If you ever want to have the same <em><em>entrypoint</em></em> get both HTTP and TCP requests, know that Traefik will handle it perfectly!</p><pre><code class=\"language-yaml\">tcp:\n  routers:\n    to-db-1:\n      entrypoints:\n      - web-secure\n      rule: \"HostSNI(`db1.domain`)\"\n      service: \"db-1\"\n      tls: {}\nhttp:\n  routers:\n    to-db1-dashboard:\n      entrypoints:\n      - web-secure\n      rule: \"Host(`dashboard.db1.domain`)\"\n      service: \"db1-dashboard\"\n      tls: {}</code></pre><p>In the above example, HTTP requests on <code>dashboard.db1.domain</code> will be routed to the database dashboard service, and TCP requests on <code>db1.domain</code> will be routed to the database.</p><h2 id=\"fully-customize-your-routes-with-middleware\">Fully Customize Your Routes with Middleware</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-5.png\" class=\"kg-image\"></figure><p>Traefik 2.0 introduces <a href=\"https://docs.traefik.io/middlewares/overview/\">middleware</a>: a common banner for features that tweak requests before/after routing them to their destinations.</p><blockquote>You can declare Middleware and reuse them on as <br>many routers as you like.</blockquote><p>Want to see how to configure them? Letâs declare a <a href=\"https://docs.traefik.io/middlewares/basicauth/\">BasicAuth middleware</a> to control access to our service! (this time using TOML)</p><pre><code class=\"language-toml\"># Declaring a basicauth middleware with two users\n[http.middlewares.test-auth.basicAuth]\n  users = [\"user1:hashed\", \"user2:hashed\"]\n\n# Applying the middleware to our router\n[http.routers.my-router.to-service]\n  rule = \"host(`my-protected.domain`)\"\n  middlewares = [\"test-auth\"]\n  service = \"service1\"</code></pre><blockquote>A Chain to Bind Them All</blockquote><p>If you have a classic combination you often use together, you can declare <a href=\"https://docs.traefik.io/middlewares/chain/\">chains</a>, and reuse them over and over. Whatâs even better for our Kubernetes users, you can use Traefikâs new CRD (Custom Resource Definition) for a crystal clear configuration that doesnât involve intricate annotations. (You can find more information on the <a href=\"https://docs.traefik.io/providers/kubernetes-crd/#traefik-ingressroute-definition\">IngressRoute object</a> in our documentation.)</p><pre><code class=\"language-yaml\">apiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: test\n  namespace: default\nspec:\n  entryPoints:\n    - web\n  routes:\n    - match: Host(`mydomain`)\n      kind: Rule\n      services:\n        - name: whoami\n          port: 80\n      middlewares:\n        - name: secured\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: secured\nspec:\n  chain:\n    middlewares:\n    - name: https-only\n    - name: known-ips\n    - name: auth-users\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: auth-users\nspec:\n  basicAuth:\n    secret: secretUsers #yes! Compatible with K8S secrets\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: https-only\nspec:\n  redirectScheme:\n    scheme: https\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: known-ips\nspec:\n  ipWhiteList:\n    sourceRange:\n    - 192.168.1.7\n    - 127.0.0.1/32</code></pre><p>At release, Traefik comes with many <a href=\"https://docs.traefik.io/middlewares/overview/\">pieces of middleware</a>: <a href=\"https://docs.traefik.io/middlewares/replacepath/\">path manipulation</a>, <a href=\"https://docs.traefik.io/middlewares/forwardauth/\">several authentication mechanisms</a>, <a href=\"https://docs.traefik.io/middlewares/buffering/\">buffering</a>, <a href=\"https://docs.traefik.io/middlewares/circuitbreaker/\">circuit breaker</a>, <a href=\"https://docs.traefik.io/middlewares/retry/\">retry</a>, <a href=\"https://docs.traefik.io/middlewares/compress/\">compression</a>, <a href=\"https://docs.traefik.io/middlewares/errorpages/\">error handling</a>, <a href=\"https://docs.traefik.io/middlewares/headers/\">headers</a>, <a href=\"https://docs.traefik.io/middlewares/ipwhitelist/\">IP whitelisting</a>, <a href=\"https://docs.traefik.io/middlewares/ratelimit/\">rate limiting</a>, <a href=\"https://docs.traefik.io/middlewares/redirectscheme/\">redirections</a>, and more.</p><p>Also, weâve re-architectured the code to make it easier for contributors to provide additional pieces of middleware, and Iâm sure weâll find a way to do <a href=\"https://github.com/containous/yaegi\" rel=\"noopener\">even better</a>.</p><h2 id=\"a-new-dashboard-webui\">A New Dashboard &amp; WebUI</h2><p>Our goal with the new WebUI was to show users what was happening on their cluster at a glance. We also wanted to display what features they can enable.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-6.png\" class=\"kg-image\"></figure><p>Since the flow has changed, we wanted to display every path that leads to services, with every configuration option.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-7.png\" class=\"kg-image\"></figure><h2 id=\"canary-deployments-with-service-load-balancers\">Canary Deployments with Service Load Balancers</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-8.png\" class=\"kg-image\"></figure><p>Another <a href=\"https://github.com/containous/traefik/issues/1164\" rel=\"noopener\">long-awaited feature</a> â canary deployments, A/B testing â makes its way into Traefik 2.0 in the form of Service Load Balancers.</p><p>Service Load Balancers can be seen as virtual services that are responsible for forwarding the request to the actual services.</p><p>Letâs take a classic scenario where you have an existing route to an API:</p><pre><code class=\"language-yaml\">http:\n  routers:\n    my-route:\n      rule: \"Host(`my.domain`)\"\n      service: my-api-v1\n  services:\n    my-api-v1:\n      loadBalancer:\n        servers:\n        - url: \"http://private-ip-server-1/\"</code></pre><p>Now you want to deploy a new version of this service, but would like to deploy it progressively, letâs say approximately a third of the requests. What youâll do is deploy the new service, with its own ID (here itâs<code>my-api-v2</code>).</p><pre><code class=\"language-yaml\">http:\n  services:\n    my-api-v2:\n      loadBalancer:\n        servers:\n        - url: \"http://private-ip-server-2/\"</code></pre><p>Then, instead of pointing directly to this new version, youâll first define a Service Load Balancer (in the example <code>canary-api</code>) and define the proportion for each version (with the <code>weight</code> option).</p><pre><code class=\"language-yaml\">http:\n  services:\n    canary-api:\n      weighted:\n        services:\n        - name: my-api-v1\n          weight: 3\n        - name: my-api-v2\n          weight: 1</code></pre><p>Finally, point to this <code>canary-api</code> service from your router.</p><pre><code class=\"language-yaml\">http:\n  routers:\n    my-route:\n      rule: \"Host(`my.domain`)\"\n      service: canary-api</code></pre><p>Later, youâll be able to update the weight without having to redeploy your <em><em>actual</em></em> services. Youâll also be able to scale them without any impact on the canary deployment itself.</p><h2 id=\"mirroring-with-service-load-balancers\">Mirroring with Service Load Balancers</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-9.png\" class=\"kg-image\"></figure><p>Canary deployments arenât the only tricks available in the service family. Traefik 2.0 introduces Mirroring Services â a way to <a href=\"https://github.com/containous/traefik/issues/2989\" rel=\"noopener\">duplicate the incoming request</a> and send it to different services at the same time. The mirror will get a given percentage of requests, and its answers will be ignored.</p><pre><code class=\"language-toml\">[http.services.mirrored-api]\n    [http.services.mirrored-api.mirroring]\n      service = \"api\"\n    [[http.services.mirrored-api.mirroring.mirrors]]\n      name = \"api-v2\"\n      percent = 10\n\n[http.services.api]\n    [http.services.api.loadBalancer]\n      [[http.services.api.loadBalancer.servers]]\n        url = \"http://private-ip-server-1/\"\n\n[http.services.api-v2]\n    [http.services.api-v2.loadBalancer]\n      [[http.services.api-v2.loadBalancer.servers]]\n        url = \"http://private-ip-server-2/\"</code></pre><p>In the above example, weâre sending 10% of the requests to the mirror.</p><h2 id=\"and-much-much-more-\">And Much, Much More!</h2><p>Traefik 2.0 introduces a syntax (<code>@provider</code>) to allow users to declare elements (middleware, services, routers) in a provider and to reference them from an other one. It provides an easier way to configure <a href=\"https://docs.traefik.io/middlewares/headers/#cors-headers\">CORS headers</a>, embeds a redesigned <a href=\"https://docs.traefik.io/providers/overview/#restrict-the-scope-of-service-discovery\">constraint management</a> to better control services you want to expose, and improves the default rule generation for a quick and easy way to define routes for containers.</p><p>On top of <a href=\"https://docs.traefik.io/operations/api/\">many enhancements</a>, the API now embeds status information for your middleware, services, routers, and reports errors to help you identify and fix problems.</p><p>The polished configuration options ensure that configuring Traefik is always achieved the same way whether expressed with TOML, YAML, labels, or keys, and the <a href=\"https://docs.traefik.io/\">revamped documentation</a> includes examples for every syntax.</p><p>You can define TLS termination separately on each router, configure TLS passthrough, use the new <code>CertResolver</code> to benefit from different challenges for certificate generation (yes, itâs now multiple-DNS-providers-proof!), and dynamically generate wildcard certificates.</p><p>Router rules now use a go-like syntax with <a href=\"https://docs.traefik.io/routing/routers/#rule\">operators and parenthesis</a> for powerful and readable combinations.</p><p>The list goes on and on with bug fixes and other significant tweaks!</p><hr><h2 id=\"migrating-from-1-x\">Migrating From 1.x</h2><p>With so many new features, bug fixes, and enhancements, Traefik 2.0 might ask you to re-think the way you used to route your requests. In order to facilitate the transition and help you leverage the power of these new options, we initiated a <a href=\"https://docs.traefik.io/migration/v1-to-v2/\" rel=\"noopener\">migration guide</a> that goes through every change we made.</p><p>For our <a href=\"https://kubernetes.io/\" rel=\"noopener\">Kubernetes</a> user-base, weâve also written a <a href=\"https://github.com/containous/traefik-migration-tool\" rel=\"noopener\">migration tool</a> to help you convert your Ingress objects to the new IngressRoute format. (This migration tool will also help all users convert their <code>acme.json</code> file.)</p><p>All this is designed for the thousands of people already using Traefik.</p><hr><h2 id=\"behind-the-curtain\">Behind the Curtain</h2><p>Traefik 2.0 is not the only thing that has improved! By the time we released 2.0, we launched <a href=\"https://containous.ghost.io/traefikee/\" rel=\"noopener\">TraefikEE</a>, <a href=\"https://github.com/containous/yaegi\" rel=\"noopener\">Yaegi</a>, <a href=\"https://containous.ghost.io/maesh/\">Maesh</a>, and you can bet weâll keep going further. We also constantly monitor our processes and tools. Weâve launched a <a href=\"https://community.containo.us/\" rel=\"noopener\">Community Forum</a> to foster better communication amongst users, introduced a monthly journal, and scheduled <a href=\"https://containous.ghost.io/events/\">Traefik Online Meetups</a> to promote the community talent.</p><hr><h2 id=\"next-steps\">Next Steps</h2><p>More than anything, this release shows the importance of the community. <a href=\"https://github.com/containous/traefik/issues/10\" rel=\"noopener\">Every</a> <a href=\"https://github.com/containous/traefik/issues/2999\" rel=\"noopener\">feature</a> <a href=\"https://github.com/containous/traefik/issues/7\" rel=\"noopener\">that</a> <a href=\"https://github.com/containous/traefik/issues/727\" rel=\"noopener\">has</a> <a href=\"https://github.com/containous/traefik/issues/895\" rel=\"noopener\">been</a> <a href=\"https://github.com/containous/traefik/issues/1164\" rel=\"noopener\">discussed</a> <a href=\"https://github.com/containous/traefik/issues/160\" rel=\"noopener\">today</a> <a href=\"https://github.com/containous/traefik/issues/2989\" rel=\"noopener\">was born</a> <a href=\"https://github.com/containous/traefik/issues/914\" rel=\"noopener\">from</a> <a href=\"https://github.com/containous/traefik/issues/2653\" rel=\"noopener\">a</a> <a href=\"https://github.com/containous/traefik/issues/966\" rel=\"noopener\">user</a> <a href=\"https://github.com/containous/traefik/issues/3378\" rel=\"noopener\">asking for a new feature</a>, <a href=\"https://github.com/containous/traefik/issues/4069\" rel=\"noopener\">reporting a bug</a>, <a href=\"https://github.com/containous/traefik/issues/3868\" rel=\"noopener\">or just asking</a> <a href=\"https://github.com/containous/traefik/issues/2773\" rel=\"noopener\">for âbetter.â</a></p><p>Traefik 1.X has been downloaded more than a <strong><strong>billion</strong></strong> times, and we hope to double that number with Traefik 2.X.</p><blockquote>â¤ï¸ Thank you for your support!â¤ï¸</blockquote><p>â¦ and keep raising your voice for the (many) version(s) to come!</p><p>P.S. â Stay tuned! There is so much to show you with this new version that our developer team is preparing an Online Meetup for you. :-)</p><hr><h2 id=\"useful-links\">Useful Links</h2><ul><li>Traefik <a href=\"https://docs.traefik.io/\">documentation</a>, <a href=\"https://containous.ghost.io/traefik/\">website</a> &amp; <a href=\"https://github.com/containous/traefik\" rel=\"noopener\">Github page</a></li><li>Containous <a href=\"https://containous.ghost.io/\" rel=\"noopener\">website</a></li><li><a href=\"https://community.containo.us/\" rel=\"noopener\">Community forum</a></li></ul>","url":"https://containous.ghost.io/blog/traefik-2-0-6531ec5196c2/","canonical_url":null,"uuid":"541963bd-f2ae-4fcf-b184-0e9c60d790be","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dd54affec5ed3003878888c","reading_time":7}},{"node":{"id":"Ghost__Post__5dd69298b6de2b00381d3f96","title":"How to Pronounce Traefik?","slug":"how-to-pronounce-traefik-d06696a3f026","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/11/traefik-pron.jpeg","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/0b7d4ac8468e89c4c03827ce915a85b4/47498/traefik-pron.jpg","srcSet":"/static/0b7d4ac8468e89c4c03827ce915a85b4/9dc27/traefik-pron.jpg 300w,\n/static/0b7d4ac8468e89c4c03827ce915a85b4/4fe8c/traefik-pron.jpg 600w,\n/static/0b7d4ac8468e89c4c03827ce915a85b4/47498/traefik-pron.jpg 1200w,\n/static/0b7d4ac8468e89c4c03827ce915a85b4/52258/traefik-pron.jpg 1800w,\n/static/0b7d4ac8468e89c4c03827ce915a85b4/a41d1/traefik-pron.jpg 2000w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"How to Pronounce Traefik?\nThe Answer to the infamous question, âHow do you pronounce Traefik?â lies in the Question...","custom_excerpt":"How to Pronounce Traefik?\nThe Answer to the infamous question, âHow do you pronounce Traefik?â lies in the Question...","visibility":"public","created_at_pretty":"21 November, 2019","published_at_pretty":"June 18, 2019","updated_at_pretty":"04 December, 2019","created_at":"2019-11-21T13:35:20.000+00:00","published_at":"2019-06-18T13:35:00.000+00:00","updated_at":"2019-12-04T00:21:35.000+00:00","meta_title":"How to Pronounce Traefik? The Answer Lies in the Question","meta_description":"How to Pronounce Traefik?\nThe Answer to the infamous question, âHow do you pronounce Traefik?â lies in the Question...","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Company","slug":"company","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"The Answer Lies in the Question\n\nIf youâre here reading (at last!) the official answer to the infamous question,\nâHow do you pronounce Traefik?â, then chances are youâre a Traefik user who has\nhad passionate debates with your colleagues around this weird looking character \nÃ¦ which shares the lines between an a and an e. (And chances are you already\nchose a distinct way to pronounce âTrÃ¦fikâ that avoids confusion when talking\nabout how you handle traffic in Traefik â¦ but thatâs a different story.)\n\nDanish, Norwegian, Icelandic, or Faroese?\nOf course, if you speak Danish, Norwegian, Icelandic, or Faroese, then youâre\nfamiliar with the Ã¦sc grapheme. If so, youâre probably ready to bet a coffee on\nthe answer. On the other hand, the question still lingering in your mind has\ndrifted to, âWhy did they use the Danish character in Traefik? Are they Danish?â\n\nFrench?\nIf youâre French, you know for sure that this ligature looks like the e coulÃ© (a\npun for children to remember that the âe is in the oâ â¦ o sounds like âwaterâ in\nFrench â¦ so âe coulÃ©â literally translates to, âsunken eâ).\n\nBut even if youâve seen this syntax trick in words like âcÅurâ (heart), âÅufâ (\neggs), âsÅurâ (sister), or âÅuvreâ (work), you canât find a single word with the\nsame ligature involving ana and an e (and even if youâd find one eventually, you\nwouldnât put it in your curriculum vitÃ¦ anyways).\n\nEnglish?\nIf youâre a native English speaker, you know for sure that there are no such\nletter combinations in English (OK â¦ apart from phÅnix, but a gopher is not even\nclose to having wings â¦ until you remember that there are other Ã¦therical\ncreatures â¦ that there was a CÃ¦sar Ã¦ra â¦ and that it wonât take you Ã¦ons before\nyou can find other examples â¦ so the Ã¦ in Traefik might not be âjust an Ã¦sthetic\nchoiceâ).\n\nNon-native English speakers?\nTraefik, as an open-source project [https://github.com/containous/traefik], is\nthe result of many people working together. Containous [https://containo.us/],\nas a distributed company, has employees all over the world (and weâre hiring\n[https://containo.us/careers/]!). So the blunt answer could also be, âWe\npronounce Traefik the best we can.â\n\nSo many languages â¦\nSo no, this ligature in Traefik has nothing to do with the etymology of the\nword. This ligature is the result of the very question, âHow do you pronounce\nTraefik?â\n\nTo answer this question, weâll use the International Phonetic Alphabet (IPA) and\nwill write:\n\n> You pronounce Traefik like the regular word Traffic\n[https://dictionary.cambridge.org/dictionary/english/traffic] (/ËtrÃ¦fÉªk/)\nWhile designing the logo, weâve just been sloppy and got rid of the stress Ë and\nsince French people are not able to make a proper Éª sound, we replaced it with\nan i.\n\nNow you know!\nEven though the official answer is out, we still hope to see many Traefik users\napproaching us and asking us the same question over and over again, âHow do you\npronounce Traefik?â simply because itâs the only thing they havenât figured out\nfrom the documentation.","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">The Answer Lies in the Question</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-width-full\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-116.png\" class=\"kg-image\"></figure><p>If youâre here reading (at last!) the official answer to the infamous question, âHow do you pronounce Traefik?â, then chances are youâre a Traefik user who has had passionate debates with your colleagues around this weird looking character <code>Ã¦</code> which shares the lines between an <code>a</code> and an <code>e</code>. (And chances are you already chose a distinct way to pronounce âTrÃ¦fikâ that avoids confusion when talking about how you handle traffic in Traefik â¦ but thatâs a different story.)</p><h3 id=\"danish-norwegian-icelandic-or-faroese\">Danish, Norwegian, Icelandic, or Faroese?</h3><p>Of course, if you speak Danish, Norwegian, Icelandic, or Faroese, then youâre familiar with the <code>Ã¦sc</code> grapheme. If so, youâre probably ready to bet a coffee on the answer.<strong><strong> </strong></strong>On the other hand<strong><strong>, </strong></strong>the question still lingering in your mind has drifted to, âWhy did they use the Danish character in Traefik? Are they Danish?â</p><h3 id=\"french\">French?</h3><p>If youâre French, you know for sure that this ligature looks like the <code><em><em>e coulÃ©</em></em></code> (a pun for children to remember that the â<em><em>e is in the oâ</em></em> â¦ <code>o</code> sounds like âwaterâ in French â¦ so â<em><em>e coulÃ©â</em></em> literally translates to, â<em><em>sunken eâ</em></em>).</p><p>But even if youâve seen this syntax trick in words like âcÅurâ (<em><em>heart</em></em>), âÅufâ (<em><em>eggs</em></em>), âsÅurâ (<em><em>sister</em></em>), or âÅuvreâ (<em><em>work</em></em>), you canât find a single word with the same ligature involving an<code>a</code> and an <code>e</code> (and even if youâd find one eventually, you wouldnât put it in your <em><em>curriculum vitÃ¦</em></em> anyways).</p><h3 id=\"english\">English?</h3><p>If youâre a native English speaker, you know for sure that there are no such letter combinations in English (OK â¦ apart from phÅnix, but a gopher is not even close to having wings â¦ until you remember that there are other Ã¦therical creatures â¦ that there was a CÃ¦sar Ã¦ra â¦ and that it wonât take you Ã¦ons before you can find other examples â¦ so the <code>Ã¦</code> in Traefik might not be âjust an Ã¦sthetic choiceâ).</p><h3 id=\"non-native-english-speakers\">Non-native English speakers?</h3><p>Traefik, as an <a href=\"https://github.com/containous/traefik\" rel=\"noopener\">open-source project</a>, is the result of many people working together. <a href=\"https://containo.us/\" rel=\"noopener\">Containous</a>, as a distributed company, has employees all over the world (and <a href=\"https://containo.us/careers/\" rel=\"noopener\">weâre hiring</a>!). So the blunt answer could also be, âWe pronounce Traefik the best we can.â</p><h3 id=\"so-many-languages-\">So many languages â¦</h3><p>So no, this ligature in Traefik has nothing to do with the etymology of the word. This ligature is the result of the very question, âHow do you pronounce Traefik?â</p><p>To answer this question, weâll use the <em><em>International Phonetic Alphabet (IPA)</em></em> and will write:</p><blockquote><em><em>You pronounce Traefik like the regular word <a href=\"https://dictionary.cambridge.org/dictionary/english/traffic\" rel=\"noopener\">Traffic</a> (<strong><strong>/ËtrÃ¦fÉªk/</strong></strong>)</em></em></blockquote><p>While designing the logo, weâve just been sloppy and got rid of the stress <code>Ë</code> and since French people are not able to make a proper <code>Éª</code><strong> </strong>sound, we replaced it with an <code>i</code>.</p><h3 id=\"now-you-know-\">Now you know!</h3><p>Even though the official answer is out, we still hope to see many Traefik users approaching us and asking us the same question over and over again, âHow do you pronounce Traefik?â simply because itâs the only thing they havenât figured out from the documentation.</p>","url":"https://containous.ghost.io/blog/how-to-pronounce-traefik-d06696a3f026/","canonical_url":null,"uuid":"9add21c5-dcc3-4368-994c-039a86ea5f14","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dd69298b6de2b00381d3f96","reading_time":2}},{"node":{"id":"Ghost__Post__5dd6a17eb6de2b00381d3fa8","title":"With Great Community â¦","slug":"with-great-community-2b9d97485eb8","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/11/great-community.jpeg","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/e69a61d9ae605008e0470bd675753529/47498/great-community.jpg","srcSet":"/static/e69a61d9ae605008e0470bd675753529/9dc27/great-community.jpg 300w,\n/static/e69a61d9ae605008e0470bd675753529/4fe8c/great-community.jpg 600w,\n/static/e69a61d9ae605008e0470bd675753529/47498/great-community.jpg 1200w,\n/static/e69a61d9ae605008e0470bd675753529/52258/great-community.jpg 1800w,\n/static/e69a61d9ae605008e0470bd675753529/a41d1/great-community.jpg 2000w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"Recently, we were made aware that some users had misconfigured instances of Traefik, which could have exposed sensitive data...","custom_excerpt":"Recently, we were made aware that some users had misconfigured instances of Traefik, which could have exposed sensitive data...","visibility":"public","created_at_pretty":"21 November, 2019","published_at_pretty":"June 5, 2019","updated_at_pretty":"21 May, 2020","created_at":"2019-11-21T14:38:54.000+00:00","published_at":"2019-06-05T14:38:00.000+00:00","updated_at":"2020-05-21T22:32:54.000+00:00","meta_title":"With Great Community... Comes Great Responsibility","meta_description":"Recently, we were made aware that some users had misconfigured instances of Traefik, which could have exposed sensitive data...","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Community","slug":"community","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"â¦ Comes Great Responsibility\n\nThere is not a single day when we arenât proud of our community and inspired by\nthe many people using Traefik. One of our greatest accomplishments with Traefik\nis its simplicity: making it possible for everyone to run microservices\narchitecture with ease.\n\nBut, with so many people using Traefik, we realized that itâs not only important\nto make sure that best practices are well documented, but that the time has come\nto think about ways to enforce best practices.\n\nRecently, we were made aware that some users had misconfigured instances of\nTraefik, which could have exposed sensitive data: Traefik embeds a dashboard\nthat lets administrators see the existing routes (and, their parameters). And,\nif this dashboard (and its APIs) was enabled and was made public (no protection,\nand accessible from the outside), then potential attackers would have been able\nto access sensitive configuration data.\n\nIn both cases, we released a fix as quickly as possible, and made a CVE (\nCVE-2019â12452 [https://www.cvedetails.com/cve/CVE-2019-12452/], CVE-2018â15598\n[https://www.cvedetails.com/cve/CVE-2018-15598/]) to disclose the information.\n\n> âEven though we donât like stumbling onto security issues, running an\nopen-source project means being open and transparent about whatâs happening.â\nAm I Impacted by This CVE?\nYou are impacted if you meet all the following criteria:\n\n * Running Traefik v1.7.11 or older,\n * And, the API is enabled (either with the directive [api] in traefik.toml,\n   with the command line flag --api, or with the deprecated directive [web] in \n   traefik.toml),\n * And, the API is not secured with authentication (but should be, see the \n   documentation [https://docs.traefik.io]),\n * And, the API is exposed on a non trusted network.\n\nIn this case, we recommend you to do the following:\n\n * Update to the latest stable version of Traefik (1.7.12\n   [https://github.com/containous/traefik/releases/tag/v1.7.12]),\n * Not expose the API/Dashboard (or, to disable it),\n * Configure the authentication [https://docs.traefik.io/operations/api/] if you\n   need the API/Dashboard to be accessible.\n\nCombining User Experience with Security\nHaving a user-friendly dashboard is one of the praised features of Traefik, but\nitâs our responsibility to make sure people canât misconfigure it in a\npotentially harmful way.\n\nWeâve started a discussion here\n[https://github.com/containous/traefik/issues/4934] to find better ways to let\nour users enjoy a full-featured dashboard, but in a way that enforces security,\nand that doesnât enable this feature unless using proper credentials.\n\nIn the meantime, once again, never ever expose your Traefik dashboard/API to the\noutside with no protection.\n\n\n--------------------------------------------------------------------------------\n\nWe also want to use this opportunity to tell our users enabling the access log\noption to remember to filter/redact sensitive data. Please, validate your\nconfiguration and make sure you donât log sensible data.\n\n# example of how to keep / redact / drop data from the logs\n[accessLog.fields.headers]\n      defaultMode = \"keep\"\n      [accessLog.fields.headers.names]\n        \"User-Agent\" = \"redact\"\n        \"Authorization\" = \"drop\"\n        \"Content-Type\" = \"keep\"\n        # ...\n\n(Thanks goes to captn3m0 [https://github.com/captn3m0] for making sure we added\nthis reminder about logs.)\n\n\n--------------------------------------------------------------------------------\n\nReferences\n * CVE: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-12452\n * Traefik Release with the fix: \n   https://github.com/containous/traefik/releases/tag/v1.7.12\n * Traefikâs Documentation for Securing the API/Dashboard: \n   https://docs.traefik.io/operations/api/\n * Announcement on Traefikâs Security Mailing List: \n   https://groups.google.com/a/traefik.io/forum/#!topic/security/Hez9dsOFCA4\n * Discussion about the Dashboard/API features and security: \n   https://github.com/containous/traefik/issues/4934","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">â¦ Comes Great Responsibility</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-width-full\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-117.png\" class=\"kg-image\"></figure><p>There is not a single day when we arenât proud of our community and inspired by the many people using Traefik. One of our greatest accomplishments with Traefik is its simplicity: making it possible for everyone to run microservices architecture with ease.</p><p>But, with so many people using Traefik, we realized that itâs not only important to make sure that best practices are well documented, but that the time has come to think about ways to <em><em>enforce</em></em> best practices.</p><p>Recently, we were made aware that some users had misconfigured instances of Traefik, which could have exposed sensitive data: Traefik embeds a dashboard that lets administrators see the existing routes (and, their parameters). And, if this dashboard (and its APIs) was enabled and was made public (no protection, and accessible from the outside), then potential attackers would have been able to access sensitive configuration data.</p><p>In both cases, we released a fix as quickly as possible, and made a CVE (<a href=\"https://www.cvedetails.com/cve/CVE-2019-12452/\" rel=\"noopener\">CVE-2019â12452</a>, <a href=\"https://www.cvedetails.com/cve/CVE-2018-15598/\" rel=\"noopener\">CVE-2018â15598</a>) to disclose the information.</p><blockquote>âEven though we donât like stumbling onto security issues, running an open-source project means being open and transparent about whatâs happening.â</blockquote><h2 id=\"am-i-impacted-by-this-cve\">Am I Impacted by This CVE?</h2><p>You are impacted if you meet all the following criteria:</p><ul><li>Running Traefik v1.7.11 or older,</li><li><strong><strong>And,</strong></strong> the API is enabled (either with the directive <code>[api]</code> in <code>traefik.toml</code>, with the command line flag <code>--api</code>, or with the <em><em>deprecated</em></em> directive <code>[web]</code> in <code>traefik.toml</code>),</li><li><strong><strong>And,</strong></strong> the API is not secured with authentication (but should be, see the <a href=\"https://docs.traefik.io\">documentation</a>),</li><li><strong><strong>And,</strong></strong> the API is exposed on a non trusted network.</li></ul><p>In this case, we recommend you to do the following:</p><ul><li>Update to the latest stable version of Traefik (<a href=\"https://github.com/containous/traefik/releases/tag/v1.7.12\" rel=\"noopener\">1.7.12</a>),</li><li><em><em>Not</em></em> expose the API/Dashboard (or, to disable it),</li><li><a href=\"https://docs.traefik.io/operations/api/\">Configure the authentication</a> if you need the API/Dashboard to be accessible.</li></ul><h2 id=\"combining-user-experience-with-security\">Combining User Experience with Security</h2><p>Having a user-friendly dashboard is one of the praised features of Traefik, but itâs our responsibility to make sure people canât misconfigure it in a potentially harmful way.</p><p>Weâve <a href=\"https://github.com/containous/traefik/issues/4934\" rel=\"noopener\">started a discussion here</a> to find better ways to let our users enjoy a full-featured dashboard, but in a way that enforces security, and that doesnât enable this feature unless using proper credentials.</p><p>In the meantime, once again, never <em><em>ever</em></em> expose your Traefik dashboard/API to the outside with no protection.</p><hr><p>We also want to use this opportunity to tell our users enabling the access log option to remember to <em><em>filter/redact </em></em>sensitive data. Please, validate your configuration and make sure you donât log sensible data.</p><pre><code class=\"language-toml\"># example of how to keep / redact / drop data from the logs\n[accessLog.fields.headers]\n      defaultMode = \"keep\"\n      [accessLog.fields.headers.names]\n        \"User-Agent\" = \"redact\"\n        \"Authorization\" = \"drop\"\n        \"Content-Type\" = \"keep\"\n        # ...</code></pre><p><em><em>(Thanks goes to </em></em><a href=\"https://github.com/captn3m0\" rel=\"noopener\"><em><em>captn3m0</em></em></a><em><em> for making sure we added this reminder about logs.)</em></em></p><hr><h2 id=\"references\">References</h2><ul><li>CVE: <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-12452\" rel=\"noopener\">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-12452</a></li><li>Traefik Release with the fix: <a href=\"https://github.com/containous/traefik/releases/tag/v1.7.12\" rel=\"noopener\">https://github.com/containous/traefik/releases/tag/v1.7.12</a></li><li>Traefikâs Documentation for Securing the API/Dashboard: <a href=\"https://docs.traefik.io/operations/api/\">https://docs.traefik.io/operations/api/</a></li><li>Announcement on Traefikâs Security Mailing List: <a href=\"https://groups.google.com/a/traefik.io/forum/#!topic/security/Hez9dsOFCA4\" rel=\"noopener\">https://groups.google.com/a/traefik.io/forum/#!topic/security/Hez9dsOFCA4</a></li><li>Discussion about the Dashboard/API features and security: <a href=\"https://github.com/containous/traefik/issues/4934\" rel=\"noopener\">https://github.com/containous/traefik/issues/4934</a></li></ul>","url":"https://containous.ghost.io/blog/with-great-community-2b9d97485eb8/","canonical_url":null,"uuid":"a7a301fd-9e09-4443-a554-60fca62c4be0","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dd6a17eb6de2b00381d3fa8","reading_time":2}},{"node":{"id":"Ghost__Post__5dd6b329b6de2b00381d4043","title":"Back to Traefik 2.0, the Online Meetup","slug":"back-to-traefik-2-0-the-online-meet-up-4e4b6411fbfa","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/11/back-traefik-2.0-meetup.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/d61a6d2fbcfa83c47c6ab94a7c65ad21/f3583/back-traefik-2.0-meetup.png","srcSet":"/static/d61a6d2fbcfa83c47c6ab94a7c65ad21/630fb/back-traefik-2.0-meetup.png 300w,\n/static/d61a6d2fbcfa83c47c6ab94a7c65ad21/2a4de/back-traefik-2.0-meetup.png 600w,\n/static/d61a6d2fbcfa83c47c6ab94a7c65ad21/f3583/back-traefik-2.0-meetup.png 1200w,\n/static/d61a6d2fbcfa83c47c6ab94a7c65ad21/bbee5/back-traefik-2.0-meetup.png 1800w,\n/static/d61a6d2fbcfa83c47c6ab94a7c65ad21/ed396/back-traefik-2.0-meetup.png 2000w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"Just after the Traefik 2.0 announcement, we aired an Online Meetup to talk about our treasured features...","custom_excerpt":"Just after the Traefik 2.0 announcement, we aired an Online Meetup to talk about our treasured features...","visibility":"public","created_at_pretty":"21 November, 2019","published_at_pretty":"April 1, 2019","updated_at_pretty":"22 May, 2020","created_at":"2019-11-21T15:54:17.000+00:00","published_at":"2019-04-01T15:54:00.000+00:00","updated_at":"2020-05-22T00:07:38.000+00:00","meta_title":"Back to Traefik 2.0, the Online Meetup","meta_description":"Just after the Traefik 2.0 announcement, we aired an Online Meetup to talk about our treasured features...","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Community","slug":"community","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Now Available on YouTube!\n\nWhat a week, everyone! Just after the Traefik 2.0 announcement\n[/blog/back-to-traefik-2-0-2f9aa17be305/https://containo.us/blog/back-to-traefik-2-0-2f9aa17be305/]\n, driven by the relentless enthusiasm of our Head of Community (who did quite \nthe show introducing the team), we aired an Online Meetup to talk about our\ntreasured features in the next iteration of our favorite\nreverse-proxy/edge-router.\n\nI know this is a question we havenât been asked (but, weâll answer it anyway) â\nYes, we (the developer team) were a bit nervous. Because, even though we often\ntalk to the community In Real Life, we were unfamiliar with the \nwe-donât-see-you-while-we-talk format of the online Meetup. And, here is another\nanswer to a question you didnât ask, but, again, weâll answer â Yes, we enjoyed\nthis moment with you, and would do it again.\n\nChances are youâre here for the video only, and not the story behind the movie,\nso letâs proceed!\n\nThe slides are available here\n[https://docs.google.com/presentation/d/e/2PACX-1vS3_WzHd4vOA7pqzFL1YTIom-_t9OrvmKwV3_GuBvqQeWV1jfxFml18M2miCpinL2PP-od5kv1NaN-m/pub?start=false&loop=true&delayms=3000]\n, and code for the demos is available on Github\n[https://github.com/containous/slides/tree/online-meetup-v2/demo/v2-tcp].âQ&A\nTime (Excerpts)â\nAbout TCP (and UDP)\n> Can the TCP entry point use Letâs Encrypt [https://letsencrypt.org/]? Could you\nhave HTTP and TCP endpoints using the same hostname? Is it ready for UDP?\nWe loved bringing TCP support to Traefik [/traefik/], and we wanted it to come\nalong with features our users would expect â one of them being Letâs Encrypt\nsupport (so yes, TCP in Traefik supports Letâs Encrypt for automatic\ncertificates, like with HTTP).\n\nWe also wanted Traefik to be able to route TCP and HTTP requests\n[/blog/the-journey-to-traefik-enterprise-edition-https-for-everyone-90a36b33600/] \non the same entry points, which was quite a challenge. This was made possible\nwith a simple trick â the use of the SNI in TLS connections. But this comes with\na limitation: you wonât be able to route both HTTP and TCP requests on the same \nhost+port combination. If for the same domain youâd like to route TCP and HTTP\nrequests, we encourage you to use two different ports.\n\nTCP was made possible by the re-architectured core. This new core also enables\nus to bring UDP support, and even if it is not written yet, itâs a matter of\nweeks before itâs out.\n\nAbout Middleware\n> Do middleware always applied from left to right? Can a service be a middleware\nCan custom middlewares be created? Can we use middlewares on TCP endpoints? Can\nwe use middleware on the response? Is middleware for ingress only?\nSo middleware [https://docs.traefik.io/middlewares/overview/] is a concept we\nintroduced to enable you to fine-tune the life cycle of the requests. They will\noften act before the request is forwarded to the services\n[https://docs.traefik.io/routing/services/], and can also operate on the\nresponse you get from the services (like the headers\n[https://docs.traefik.io/middlewares/headers/] middleware does). Pieces of\nmiddleware are applied from left to right on the request, and from right to left\non the response. Since you define the order, and since you can define as many \nchains [https://docs.traefik.io/middlewares/chain/] or attach as many pieces of\nmiddleware to your routers [https://docs.traefik.io/routing/routers/] as you\nwant, you have total control. There are currently no available middleware for\nTCP routers, but itâs something weâre looking into (if you have ideas, let us\nknow!). And regarding custom middleware, even though we know our user base is\nlooking for it, it wonât fit in the 2.0 scope (which is already big!).\n\nAbout KV Stores & Distributed Letâs Encrypt\n> Current (pre-2.0) traefik can store ACME certificates in a file or a KV store.\nThe latter helps with running a cluster of traefik, but the storage is\nrestricted to 512kb of certificate information when using Consul. Will this\nimprove? (storing in a key per certificate instead of a single key for all, for\nexample)\nWhile working on 2.0, we decided it was time to rework this part. Sticking with\nthe Unix Philosophy, âMake each program do one thing well,â Traefik is getting\nback to be a good old single-instance pure data plane. At the same time,\nclustering has been redesigned from scratch using a production-proven rock-solid\nraft-based implementation, shipped with Traefik Enterprise Edition (see how\n[/blog/the-journey-to-traefik-enterprise-edition-https-for-everyone-90a36b33600/]\n). Distributed features (like Letâs Encrypt) can now rely on this advanced\ncluster technology for these use cases. But hey! You can still use multiple\nTraefik instances with your favorite KV store, we only removed the unstable and\nexperimental part :)\n\nAbout the Final Release\n> When will the final 2.0 be available?\nShort answer: When itâs ready!\n\nReal answer: We wish we could tell. Even though we can estimate how much time we\nwill need to develop the missing features\n[https://github.com/containous/traefik/projects/3], we donât know fore sure how\nmuch feedback youâll provide, or how many features contributors will be tackling\n(and, as Damien pointed out â weâre ready to help any [new/returning/existing]\ncontributors eager to participate in the project!). Anyways, all we can say is,\nâstay tuned for updates!â\n\nAbout Other Thingsâ¦\nYouâll find other (more specific) questions (and answers) here\n[https://gist.github.com/dduportal/13874113cf5fa1d0901655e3367c31e5]!\n\n\n--------------------------------------------------------------------------------\n\nDonât Miss the Next Meet-Ups!\nIf you enjoyed the meet-up and would like to be notified of upcoming online\nevents and receive the videos from our previous sessions, sign up here\n[http://eepurl.com/gfN5Aj]!","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">Now Available on YouTube!</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-width-full\"><img src=\"https://containous.ghost.io/content/images/2019/12/image-5.png\" class=\"kg-image\"></figure><p>What a week, everyone! Just after the <a href=\"https://containous.ghost.io/blog/back-to-traefik-2-0-2f9aa17be305/https://containo.us/blog/back-to-traefik-2-0-2f9aa17be305/\">Traefik 2.0 announcement</a>, driven by the relentless enthusiasm of our Head of Community (who did quite <em><em>the</em></em> show introducing the team), we aired an Online Meetup to talk about our treasured features in the next iteration of our favorite reverse-proxy/edge-router.</p><p>I know this is a question we havenât been asked (but, weâll answer it anyway) â Yes, we (the developer team) were a bit nervous. Because, even though we often talk to the community <em><em>In Real Life,</em></em> we were unfamiliar with the <em><em>we-donât-see-you-while-we-talk</em></em> format of the online Meetup. And, here is another answer to a question you didnât ask, but, again, weâll answer â Yes, we enjoyed this moment with you, and would do it again.</p><p>Chances are youâre here for the video only, and <em><em>not</em></em> the story behind the movie, so letâs proceed!</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/s8qYWPC6YdI?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe><figcaption>The slides are <a href=\"https://docs.google.com/presentation/d/e/2PACX-1vS3_WzHd4vOA7pqzFL1YTIom-_t9OrvmKwV3_GuBvqQeWV1jfxFml18M2miCpinL2PP-od5kv1NaN-m/pub?start=false&amp;loop=true&amp;delayms=3000\" rel=\"noopener\">available here</a>, and code for the demos is available <a href=\"https://github.com/containous/slides/tree/online-meetup-v2/demo/v2-tcp\" rel=\"noopener\">on Github</a>.</figcaption></figure><h2 id=\"-qa-time-excerpts-\">âQ&amp;A Time (Excerpts)â</h2><h3 id=\"about-tcp-and-udp-\">About TCP (and UDP)</h3><blockquote><em><em>Can the TCP entry point use <a href=\"https://letsencrypt.org/\" rel=\"noopener\">Letâs Encrypt</a>? Could you have HTTP and TCP endpoints using the same hostname? Is it ready for UDP?</em></em></blockquote><p>We loved bringing TCP support to <a href=\"https://containous.ghost.io/traefik/\">Traefik</a>, and we wanted it to come along with features our users would expect â one of them being Letâs Encrypt support (so yes, TCP in Traefik supports Letâs Encrypt for automatic certificates, like with HTTP).</p><p>We also wanted Traefik to be able to route TCP and <a href=\"https://containous.ghost.io/blog/the-journey-to-traefik-enterprise-edition-https-for-everyone-90a36b33600/\">HTTP requests</a> on the same entry points, which was quite a challenge. This was made possible with a simple trick â the use of the SNI in TLS connections. But this comes with a limitation: you wonât be able to route both HTTP and TCP requests on the <em><em>same</em></em> <code>host+port</code> combination. If for the <em><em>same domain</em></em> youâd like to route TCP and HTTP requests, we encourage you to use two different ports.</p><p>TCP was made possible by the re-architectured core. This new core also enables us to bring UDP support, and even if it is not written yet, itâs a matter of weeks before itâs out.</p><h3 id=\"about-middleware\">About Middleware</h3><blockquote><em><em>Do middleware always applied from left to right? Can a service be a middleware Can custom middlewares be created? Can we use middlewares on TCP endpoints? Can we use middleware on the response? Is middleware for ingress only?</em></em></blockquote><p>So <a href=\"https://docs.traefik.io/middlewares/overview/\">middleware</a> is a concept we introduced to enable you to fine-tune the life cycle of the requests. They will often act <em><em>before</em></em> the request is forwarded to the <a href=\"https://docs.traefik.io/routing/services/\">services</a>, and can also operate on the response you get from the services (like the <a href=\"https://docs.traefik.io/middlewares/headers/\">headers</a> middleware does). Pieces of middleware are applied from left to right on the request, and from right to left on the response. Since you define the order, and since you can define as many <a href=\"https://docs.traefik.io/middlewares/chain/\">chains</a> or attach as many pieces of middleware to your <a href=\"https://docs.traefik.io/routing/routers/\">routers</a> as you want, you have total control. There are currently no available middleware for TCP routers, but itâs something weâre looking into (if you have ideas, let us know!). And regarding custom middleware, even though we know our user base is looking for it, it wonât fit in the 2.0 scope (which is already big!).</p><h3 id=\"about-kv-stores-distributed-let-s-encrypt\">About KV Stores &amp; Distributed Letâs Encrypt</h3><blockquote><em><em>Current (pre-2.0) traefik can store ACME certificates in a file or a KV store. The latter helps with running a cluster of traefik, but the storage is restricted to 512kb of certificate information when using Consul. Will this improve? (storing in a key per certificate instead of a single key for all, for example)</em></em></blockquote><p>While working on 2.0, we decided it was time to rework this part. Sticking with the Unix Philosophy, âMake each program do one thing well,â Traefik is getting back to be a good old single-instance pure data plane. At the same time, clustering has been redesigned from scratch using a production-proven rock-solid raft-based implementation, shipped with Traefik Enterprise Edition (<a href=\"https://containous.ghost.io/blog/the-journey-to-traefik-enterprise-edition-https-for-everyone-90a36b33600/\">see how</a>). Distributed features (like Letâs Encrypt) can now rely on this advanced cluster technology for these use cases. But hey! You can still use multiple Traefik instances with your favorite KV store, we only removed the unstable and experimental part :)</p><h3 id=\"about-the-final-release\">About the Final Release</h3><blockquote><em><em>When will the final 2.0 be available?</em></em></blockquote><p>Short answer: When itâs ready!</p><p>Real answer: We wish we could tell. Even though we can estimate how much time we will need to develop the <a href=\"https://github.com/containous/traefik/projects/3\" rel=\"noopener\">missing features</a>, we donât know fore sure how much feedback youâll provide, or how many features contributors will be tackling (and, as Damien pointed out â weâre ready to help any [new/returning/existing] contributors eager to participate in the project!). Anyways, all we can say is, âstay tuned for updates!â</p><h3 id=\"about-other-things-\">About Other Thingsâ¦</h3><p>Youâll find other (more specific) questions (and answers) <a href=\"https://gist.github.com/dduportal/13874113cf5fa1d0901655e3367c31e5\" rel=\"noopener\">here</a>!</p><hr><h2 id=\"don-t-miss-the-next-meet-ups-\">Donât Miss the Next Meet-Ups!</h2><p>If you enjoyed the meet-up and would like to be notified of upcoming online events and receive the videos from our previous sessions, <a href=\"http://eepurl.com/gfN5Aj\" rel=\"noopener\">sign up here</a>!</p>","url":"https://containous.ghost.io/blog/back-to-traefik-2-0-the-online-meet-up-4e4b6411fbfa/","canonical_url":null,"uuid":"d8358245-b2ef-4cfa-bc8a-0f7cc5b785cc","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dd6b329b6de2b00381d4043","reading_time":4}},{"node":{"id":"Ghost__Post__5dd7eb67f1db6f0038c74435","title":"Traefik â Spoiler Season â Episode 1","slug":"traefik-spoiler-season-episode-1-3dbcb1f5d8b9","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/11/wip-traefik.png","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/bf6dc1c716dac26a7c9c89d237a4e47e/9c108/wip-traefik.png","srcSet":"/static/bf6dc1c716dac26a7c9c89d237a4e47e/630fb/wip-traefik.png 300w,\n/static/bf6dc1c716dac26a7c9c89d237a4e47e/9c108/wip-traefik.png 585w","sizes":"(max-width: 585px) 100vw, 585px"}}},"excerpt":"Hi everyone! Today is a very special day: weâre here to talk about changes. Yes, the changes weâve been playing around with, the changes we talked about in...","custom_excerpt":"Hi everyone! Today is a very special day: weâre here to talk about changes. Yes, the changes weâve been playing around with, the changes we talked about in...","visibility":"public","created_at_pretty":"22 November, 2019","published_at_pretty":"November 19, 2018","updated_at_pretty":"22 May, 2020","created_at":"2019-11-22T14:06:31.000+00:00","published_at":"2018-11-19T14:06:00.000+00:00","updated_at":"2020-05-22T00:48:26.000+00:00","meta_title":"Traefik â Spoiler Season â Episode 1","meta_description":"Today is a very special day: weâre here to talk about changes. Yes, the changes weâve been playing around with, the changes we talked about in...","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Product News","slug":"product-news","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"The Story of the Configuration Structure\n\nHi everyone! Today is a very special day: weâre here to talk about changes.\n\nYes, the changes weâve been playing around with, the changes we talked about in \nthe latest release note\n[/blog/traefik-1-7-yet-another-slice-of-awesomeness-2a9c99737889/], the changes\nweâre looking forward to bringing to the next version of Traefik.\n\nBut like in every spoiler undertaking, we wonât disclose everything (where would\nbe the fun in that?).\n\nToday weâre going to discuss the configuration structure â the infamous \nentrypoints, frontends, and backends and how they interact together.\n\n\n--------------------------------------------------------------------------------\n\nNote: In the article, weâll use the file provider to talk about the changes.\nThis provider best exposes the structure of the configuration and is the\nfoundation for the other label / annotation-driven providers. Of course,\neverything that applies to the file provider should apply to the\nlabel/annotation based providers.\n\nNote 2: In this article, weâll assume that youâre a knowledgeable Traefik\nenthusiast.\n\nNote 3: Nope, no note 3, Iâm good, letâs move on.\n\n\n--------------------------------------------------------------------------------\n\nIt All Started withâ¦\nTo this day, Traefikâs configuration is quite simple and accounts for a great\npart of its success.\n\nEntrypoints accept the incoming requests (for the most part: ports & certificate\nmanagement), frontends analyze the requests to determine what should handle\nthem, and backends are responsible for forwarding the requests to your system\n(your both beloved and hated microservices).\n\nSince everyone loves diagrams (at least I do), below is the magic happening.\n\nThis architecture works like a charm because you can configure everything you\nneed, from authentication to redirects, to circuit breaker mechanisms, to retry\nmechanisms, to custom errors, to HTTPS, to load-balancing, to whatever you need.\nAnd better, it works with many providers (k8s, docker, AWS, mesos, â¦).\n\nBut â¦ (always a but) â¦ sometimes people were confused about where to configure\nthese options. Other times, people were confused because some options were\nmagically applied in a predetermined order they could not easily change (and no,\nhacking our way into the bowels of Traefik is not literally easy).\n\nBecause so many options were added since Traefikâs initial launch, weâre in a\nsituation where the magic comes along with a cost: things are less obvious than\nbefore, and it becomes a problem when you need to fine-tune the routing for\nspecific requests.\n\nAlso, since weâre complaining about the configuration, I have to say that I hate\nto repeat myself â which was sometimes a problem when (for example) I wanted to\nput the same auth mechanism on several frontends (but not every one of them).\n\nâ¦ And It Will Become\nSo we took a step back, gave it some thought, and came up with our first\nproposal â¦ What if we wroteâ¦\n\nEntrypoints accept the incoming requests, routers analyze the requests to\ndetermine what should handle them, and services are responsible for handling the\nrequests and ultimately forwarding them to your system (your both beloved and\nhated microservices).\n\n> DÃ©jÃ  vu?\nSee? SO different! Itâs even more obvious in the following diagram.\n\nAre You Kidding?\nWell, weâre not.\n\nAt first sight, apart from the vocabulary update, we agree that nothing has \nobviously changed: same sequence of operations.\n\nWhat really changed is whatâs happening inside.\n\nMiddleware â The (Almost) Newcomer\nIf you look closely to the new diagram, youâll notice that something is missing,\nand then youâll realize that this something is quite important.\n\nYou can pause here, go back to the diagram and keep reading once youâve figured\nit out, but for the impatient amongst us, here it is: In the diagram, nothing \nupdates the request, nothing checks the credentials, nothing tweaks the path or\nthe domain. In the diagram, a whole block of features is missing.\n\nBut how come this crucial element isnât shouting its absence from the diagram?\nItâs simply because the configuration for these updates/tweaks/behaviors used to\nbe spread across the existing components (entrypoints, frontends, and backends).\n\nSoon, they will be configured in dedicated pieces of middleware and referred to\nfrom entrypoints, routers, and services. Whatâs more important â You will decide\nhow, when, and in which order.\n\n> Yes, you will have full control.\nBefore / After (The TL;DR youâre looking for)\nWe Want Examples!\nThatâs a legitimate request â letâs start with a super basic example with a\nfrontend, a backend, and no additional fluff.\n\n> A frontend (router), a backend (service), and no additional fluff\nbefore\n[frontends]\n   [frontends.my-frontend]\n      entrypoint = [\"http\"]\n      backend = my-backend\n      [frontend.my-frontend.routes.route1]\n         rule = \"Host:myhost.com\"\n\n[backends]\n   [backends.my-backend]\n      [backends.my-backend1.servers]          \n         [backends.backend1.servers.server-1]\n            url = \"http://xx.xx.xx.xx\"\n\nafter\n[routers]\n   [routers.my-router]\n      entrypoint = [\"http\"]\n      rule = \"Host:myhost.com\"\n      service = my-service\n\n[services]\n   [services.my-service.load-balancer]\n      [[services.my-services.load-balancer.servers]]\n         url = \"http://xx.xx.xx.xx\"\n\nApart from the vocabulary difference, this one brings nothing new to the table.\n(Yes, Iâll behave as if there was no additional .load-balancer type for the\nservice because this will be for another episode.)\n\nIf we wanted to have another server, of course, we would write:\n\n[routers]\n   [routers.my-router]\n      entrypoint = [\"http\"]\n      rule = \"Host:myhost.com\"\n      service = my-service\n\n[services]\n   [services.my-service.load-balancer]\n      [[services.my-services.load-balancer.servers]]\n         url = \"http://xx.xx.xx.xx\"\n      [[services.my-services.load-balancer.servers]]\n         url = \"http://xx.xx.xx.xx\"\n\n> Now, letâs add basic authentication!\nbefore\n[frontends]\n   [frontends.my-frontend]\n      entrypoint = [\"http\"]\n      backend = my-backend\n      [frontend.my-frontend.routes.route1]\n         rule = \"Host:myhost.com\"\n      [frontend.my-frontend.auth]\n         [frontend.my-frontend.auth.basic]\n            users = [\"admin:xxx\",\"super-admin:xxx\",]\n\n[backends]\n   [backends.my-backend]\n      [backends.my-backend1.servers]          \n         [backends.backend1.servers.server-1]\n            url = \"http://xx.xx.xx.xx\"\n\nafter\n[routers]\n   [routers.my-router]\n      entrypoint = [\"http\"]\n      rule = \"Host:myhost.com\"\n      middlewares = [\"admins-only\"]\n      service = my-service\n\n[middlewares]\n   [middlewares.admins-only.basicauth]\n      users = [\"admin:xxx\",\"super-admin:xxx\",]\n\n[services]\n   [services.my-service.load-balancer]\n      [[services.my-services.load-balancer.servers]]\n         url = \"http://xx.xx.xx.xx\"\n\nThe basic authentication middleware is no longer configured inside the router\nbut in a dedicated middleware section. The good news, besides readability, is\nthat you can now reuse the same middleware in a different router, along with\nother middlewares.\n\n[routers]\n   [routers.my-router]\n      entrypoint = [\"http\"]\n      rule = \"Host:myhost.com\"\n      middlewares = [\"admins-only\"]\n      service = my-service\n   \n   [routers.my-other-router]\n      entrypoint = [\"http\"]\n      rule = \"Host:myhost2.com\"\n      middlewares = [\"admins-only\", \"retry-std\"]\n      service = my-service\n\n[middlewares]\n   [middlewares.admins-only.basicauth]\n      users = [\"admin:xxx\",\"super-admin:xxx\",]\n   [middlewares.retry-std.retry]\n      attempts = 2\n\n[services]\n   [services.my-service.load-balancer]\n      [[services.my-services.load-balancer.servers]]\n         url = \"http://xx.xx.xx.xx\"\n\nAlso, another benefit you probably have noticed â you can now have many separate\nconfigurations for some features (like retry) and choose the one that fits for\nyour routers.\n\nBehind the scenes, many other things have already changed (not yet obvious), but\nweâd like to tease with more episodes!\n\nBesides, weâve decided to show you one âwork in progressâ feature at a time â\nthis gives time to listen to your feedback!\n\n\n--------------------------------------------------------------------------------\n\nTraefik is a project driven by the community! We are more grateful than ever for\nyour feedback on the project. Weâve reached 18k+ stars on Github, and the\nproduct has been downloaded more than 350 million times!\n\n\n--------------------------------------------------------------------------------\n\nJoin us on GitHub [https://github.com/containous/traefik], Twitter\n[https://twitter.com/traefik], on the Community Forum\n[https://community.containo.us], or in the comments below so we can hear your\nvoice!","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">The Story of the Configuration Structure</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/12/image-13.png\" class=\"kg-image\"></figure><p>Hi everyone! Today is a very special day: weâre here to talk about changes.</p><p>Yes, <em><em>the</em></em> changes weâve been playing around with, the changes we talked about in <a href=\"https://containous.ghost.io/blog/traefik-1-7-yet-another-slice-of-awesomeness-2a9c99737889/\">the latest release note</a>, the changes weâre looking forward to bringing to the next version of Traefik.</p><p>But like in every spoiler undertaking, we wonât disclose everything (where would be the fun in that?).</p><p>Today weâre going to discuss the configuration <em><em>structure â</em></em> the infamous <code>entrypoints</code>, <code>frontends</code>, and <code>backends</code> and how they interact together<em><em>.</em></em></p><hr><p><strong><strong><em><em>Note:</em></em></strong></strong><em><em> In the article, weâll use the </em></em><code><em><em>file</em></em></code><em><em> provider to talk about the changes. This provider best exposes the structure of the configuration and is the foundation for the other label / annotation-driven providers. Of course, everything that applies to the </em></em><code><em><em>file</em></em></code><em><em> provider should apply to the label/annotation based providers.</em></em></p><p><strong><strong>Note 2:</strong></strong> In this article, weâll assume that youâre a knowledgeable Traefik enthusiast.</p><p><strong><strong>Note 3:</strong></strong> Nope, no note 3, Iâm good, letâs move on.</p><hr><h2 id=\"it-all-started-with-\">It All Started withâ¦</h2><p>To this day, Traefikâs configuration is quite simple and accounts for a great part of its success.</p><p><code>Entrypoints</code> accept the incoming requests (for the most part: ports &amp; certificate management), <code>frontends</code> analyze the requests to determine what should handle them, and <code>backends</code> are responsible for forwarding the requests to your system (your both beloved and hated microservices).</p><p>Since everyone loves diagrams (at least I do), below is the magic happening.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-56.png\" class=\"kg-image\"></figure><p>This architecture works like a charm because you can configure everything you need, from authentication to redirects, to circuit breaker mechanisms, to retry mechanisms, to custom errors, to HTTPS, to load-balancing, to whatever you need. And better, it works with many providers (k8s, docker, AWS, mesos, â¦).</p><p>But â¦ (always a but) â¦ sometimes people were confused about where to configure these options. Other times, people were confused because some options were magically applied in a predetermined order they could not easily change (and no, hacking our way into the bowels of Traefik is not literally easy).</p><p>Because so many options were added since Traefikâs initial launch, weâre in a situation where the magic comes along with a cost: things are less obvious than before, and it becomes a problem when you need to fine-tune the routing for specific requests.</p><p>Also, since weâre complaining about the configuration, I have to say that I hate to repeat myself â which was sometimes a problem when (for example) I wanted to put the same auth mechanism on several frontends (but not every one of them).</p><h2 id=\"-and-it-will-become\">â¦ And It Will Become</h2><p>So we took a step back, gave it some thought, and came up with our first proposal â¦ What if we wroteâ¦</p><p><code>Entrypoints</code> accept the incoming requests, <code>routers</code> analyze the requests to determine what should handle them, and <code>services</code> are responsible for handling the requests and ultimately forwarding them to your system (your both beloved and hated microservices).</p><blockquote><em><em><em>DÃ©jÃ  vu?</em></em></em></blockquote><p>See? <em><em>SO</em></em> different! Itâs even more obvious in the following diagram.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-57.png\" class=\"kg-image\"></figure><h3 id=\"are-you-kidding\">Are You Kidding?</h3><p>Well, weâre not.</p><p>At first sight, apart from the vocabulary update, we agree that nothing has <em><em>obviously</em></em> changed: same sequence of operations.</p><p>What really changed is whatâs happening <em><em>inside</em></em>.</p><h3 id=\"middleware-the-almost-newcomer\">Middleware â The (Almost) Newcomer</h3><p>If you look closely to the new diagram, youâll notice that <em><em>something</em></em> is missing, and then youâll realize that this <em><em>something</em></em> is quite important.</p><p>You can pause here, go back to the diagram and keep reading once youâve figured it out, but for the impatient amongst us, here it is: In the diagram, <em><em>nothing</em></em> updates the request, <em><em>nothing</em></em> checks the credentials, <em><em>nothing</em></em> tweaks the path or the domain. In the diagram, a whole block of features is missing.</p><p>But how come this crucial element isnât shouting its absence from the diagram? Itâs simply because the configuration for these updates/tweaks/behaviors used to be spread across the existing components (<code>entrypoints</code>, <code>frontends</code>, and <code>backends</code>).</p><p>Soon, they will be configured in dedicated pieces of <code>middleware</code> and referred to from <code>entrypoints</code>, <code>routers</code>, and <code>services</code>. Whatâs more important â <em><em>You</em></em> will decide how, when, and in which order.</p><blockquote><em><em>Yes, you will have full control.</em></em></blockquote><h2 id=\"before-after-the-tl-dr-you-re-looking-for-\">Before / After (The TL;DR youâre looking for)</h2><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2019/11/image-58.png\" class=\"kg-image\"></figure><h2 id=\"we-want-examples-\">We Want Examples!</h2><p>Thatâs a legitimate request â letâs start with a super basic example with a frontend, a backend, and no additional fluff.</p><blockquote>A frontend (router), a backend (service), and no additional fluff</blockquote><h3 id=\"before\">before</h3><pre><code class=\"language-toml\">[frontends]\n   [frontends.my-frontend]\n      entrypoint = [\"http\"]\n      backend = my-backend\n      [frontend.my-frontend.routes.route1]\n         rule = \"Host:myhost.com\"\n\n[backends]\n   [backends.my-backend]\n      [backends.my-backend1.servers]          \n         [backends.backend1.servers.server-1]\n            url = \"http://xx.xx.xx.xx\"</code></pre><h3 id=\"after\">after</h3><pre><code class=\"language-toml\">[routers]\n   [routers.my-router]\n      entrypoint = [\"http\"]\n      rule = \"Host:myhost.com\"\n      service = my-service\n\n[services]\n   [services.my-service.load-balancer]\n      [[services.my-services.load-balancer.servers]]\n         url = \"http://xx.xx.xx.xx\"</code></pre><p>Apart from the vocabulary difference, this one brings nothing new to the table. (Yes, Iâll behave <em><em>as if</em></em> there was no additional <code>.load-balancer</code> type for the service because this will be for another episode.)</p><p>If we wanted to have another server, of course, we would write:</p><pre><code class=\"language-toml\">[routers]\n   [routers.my-router]\n      entrypoint = [\"http\"]\n      rule = \"Host:myhost.com\"\n      service = my-service\n\n[services]\n   [services.my-service.load-balancer]\n      [[services.my-services.load-balancer.servers]]\n         url = \"http://xx.xx.xx.xx\"\n      [[services.my-services.load-balancer.servers]]\n         url = \"http://xx.xx.xx.xx\"</code></pre><blockquote>Now, letâs add basic authentication!</blockquote><h3 id=\"before-1\">before</h3><pre><code class=\"language-toml\">[frontends]\n   [frontends.my-frontend]\n      entrypoint = [\"http\"]\n      backend = my-backend\n      [frontend.my-frontend.routes.route1]\n         rule = \"Host:myhost.com\"\n      [frontend.my-frontend.auth]\n         [frontend.my-frontend.auth.basic]\n            users = [\"admin:xxx\",\"super-admin:xxx\",]\n\n[backends]\n   [backends.my-backend]\n      [backends.my-backend1.servers]          \n         [backends.backend1.servers.server-1]\n            url = \"http://xx.xx.xx.xx\"</code></pre><h3 id=\"after-1\">after</h3><pre><code class=\"language-toml\">[routers]\n   [routers.my-router]\n      entrypoint = [\"http\"]\n      rule = \"Host:myhost.com\"\n      middlewares = [\"admins-only\"]\n      service = my-service\n\n[middlewares]\n   [middlewares.admins-only.basicauth]\n      users = [\"admin:xxx\",\"super-admin:xxx\",]\n\n[services]\n   [services.my-service.load-balancer]\n      [[services.my-services.load-balancer.servers]]\n         url = \"http://xx.xx.xx.xx\"</code></pre><p>The basic authentication middleware is no longer configured inside the router but in a dedicated middleware section. The good news, besides readability, is that you can now reuse the same middleware in a different router, along with other middlewares.</p><pre><code class=\"language-toml\">[routers]\n   [routers.my-router]\n      entrypoint = [\"http\"]\n      rule = \"Host:myhost.com\"\n      middlewares = [\"admins-only\"]\n      service = my-service\n   \n   [routers.my-other-router]\n      entrypoint = [\"http\"]\n      rule = \"Host:myhost2.com\"\n      middlewares = [\"admins-only\", \"retry-std\"]\n      service = my-service\n\n[middlewares]\n   [middlewares.admins-only.basicauth]\n      users = [\"admin:xxx\",\"super-admin:xxx\",]\n   [middlewares.retry-std.retry]\n      attempts = 2\n\n[services]\n   [services.my-service.load-balancer]\n      [[services.my-services.load-balancer.servers]]\n         url = \"http://xx.xx.xx.xx\"</code></pre><p>Also, another benefit you probably have noticed â you can now have many separate configurations for some features (like retry) and choose the one that fits for your routers.</p><p>Behind the scenes, many other things have already changed (not yet obvious), but weâd like to tease with more episodes!</p><p>Besides, weâve decided to show you one âwork in progressâ feature at a time â this gives time to listen to your feedback!</p><hr><p>Traefik is a project driven by the community! We are more grateful than ever for your feedback on the project. Weâve reached <strong><strong>18k+ stars</strong></strong> on Github, and the product has been downloaded more than <strong><strong>350 million</strong></strong> times!</p><hr><p>Join us on <a href=\"https://github.com/containous/traefik\" rel=\"noopener\">GitHub</a>, <a href=\"https://twitter.com/traefik\" rel=\"noopener\">Twitter</a>, on the <a href=\"https://community.containo.us\">Community Forum</a>, or in the comments below so we can hear your voice!</p>","url":"https://containous.ghost.io/blog/traefik-spoiler-season-episode-1-3dbcb1f5d8b9/","canonical_url":null,"uuid":"8422082b-acf9-4d2a-a429-2d1f34259003","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dd7eb67f1db6f0038c74435","reading_time":5}},{"node":{"id":"Ghost__Post__5dd7ec91f1db6f0038c74462","title":"Spread the Love!","slug":"spread-the-love-ba5a40aa72e7","featured":false,"feature_image":"https://containous.ghost.io/content/images/2019/11/traefik-stickers.jpeg","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/4ec6d432415ed44b8445ae39fc79e44b/47498/traefik-stickers.jpg","srcSet":"/static/4ec6d432415ed44b8445ae39fc79e44b/9dc27/traefik-stickers.jpg 300w,\n/static/4ec6d432415ed44b8445ae39fc79e44b/4fe8c/traefik-stickers.jpg 600w,\n/static/4ec6d432415ed44b8445ae39fc79e44b/47498/traefik-stickers.jpg 1200w,\n/static/4ec6d432415ed44b8445ae39fc79e44b/52258/traefik-stickers.jpg 1800w,\n/static/4ec6d432415ed44b8445ae39fc79e44b/a41d1/traefik-stickers.jpg 2000w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"Hi everyone! I hope youâre enjoying Traefik as much as we enjoy building it with you.\nToday, while browsing the web...","custom_excerpt":"Hi everyone! I hope youâre enjoying Traefik as much as we enjoy building it with you.\nToday, while browsing the web...","visibility":"public","created_at_pretty":"22 November, 2019","published_at_pretty":"October 29, 2018","updated_at_pretty":"22 May, 2020","created_at":"2019-11-22T14:11:29.000+00:00","published_at":"2018-10-29T14:11:00.000+00:00","updated_at":"2020-05-22T00:24:50.000+00:00","meta_title":"Spread the Love!","meta_description":"Hi everyone! I hope youâre enjoying Traefik as much as we enjoy building it with you.\nToday, while browsing the web...","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Gerald Croes","slug":"gerald","bio":null,"profile_image":"https://containous.ghost.io/content/images/2019/12/ghost.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Community","slug":"community","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"And Say It with Stickers :-)\n\nOur Beloved GopherHi everyone! I hope youâre enjoying Traefik [/traefik/] as much as we enjoy\nbuilding it with you.\n\nToday, while browsing the web (even though I had better things to do), I\nrealized how many of you have shown love by giving talks\n[https://events.docker.com/events/details/docker-blacksburg-presents-container-orchestration-migrating-to-the-cloud-using-docker-and-traefik#/] \n(or by writing blog posts\n[https://medium.com/@yanick.witschi/automated-kubernetes-deployments-with-gitlab-helm-and-traefik-4e54bec47dcf]\n) which show how you leverage Traefik to enable dazzling architectures.\n\nThen, as I was staring into space (thinking about how that cat video would have\nbeen much cooler with a gopher), I saw my colleaguesâ laptops â¦ covered with\nstickers â¦ and it clicked.\n\n> We should help our fans spread the word with swag to distribute!\nYes, I know that itâs not as mind blowing as the new features weâll soon talk\nabout, but itâs a start, right?\n\nSo, if youâre a Traefik fan (which makes us your fans!), and since the gopher in\nour logo is adorable (not to say utterly, hypnotically handsome), perhaps youâd\nlike some stickers to distribute to your audience at your talks! â They are a\nânice to haveâ we developers enjoy ð\n\nIf youâd like us to send you some stickers, please fill out this form\n[https://docs.google.com/forms/d/e/1FAIpQLSfzLUboLnb5sajJfoYNT34Jiqe_4f71kE0DsUqloWZdaC6UWg/viewform?usp=sf_link] \nand we will ship some to you right away. The form will ask you all the necessary\ndetails we need to help you promote the event. (And give you swag!)\n\nWe are so proud to spread the word with you â Thank you for contributing and\nsharing the value of Traefik.\n\n \n[https://docs.google.com/forms/d/e/1FAIpQLSfzLUboLnb5sajJfoYNT34Jiqe_4f71kE0DsUqloWZdaC6UWg/viewform?usp=sf_link]\n\n> You can use the form to show us your best blog posts too â¦ our favorites will\nget their swag!\n\n--------------------------------------------------------------------------------\n\nAlso, since weâre talking aboutâ¦ talking about Traefik (did that make sense?),\nthere is one more thing I want to mention. Weâre looking for you, a talented\ndeveloper advocate eager to join an incredible team. Check out the role here: \nDeveloper Advocate @ Containous [/careers/].\n\nAnd if youâre interested, well, you know what you have to do. (Apply!)","html":"<!--kg-card-begin: html--><p class=\"post-sub-title\">And Say It with Stickers :-)</p><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-width-full kg-card-hascaption\"><img src=\"https://containous.ghost.io/content/images/2019/12/image-14.png\" class=\"kg-image\"><figcaption>Our Beloved Gopher</figcaption></figure><p>Hi everyone! I hope youâre enjoying <a href=\"https://containous.ghost.io/traefik/\">Traefik</a> as much as we enjoy building it with you.</p><p>Today, while browsing the web (even though I had better things to do), I realized how many of you have shown love by giving <a href=\"https://events.docker.com/events/details/docker-blacksburg-presents-container-orchestration-migrating-to-the-cloud-using-docker-and-traefik#/\" rel=\"noopener\">talks</a> (or by writing <a href=\"https://medium.com/@yanick.witschi/automated-kubernetes-deployments-with-gitlab-helm-and-traefik-4e54bec47dcf\" rel=\"noopener\">blog posts</a>) which show how you leverage Traefik to enable dazzling architectures.</p><p>Then, as I was staring into space (thinking about how that cat video would have been much cooler with a gopher), I saw my colleaguesâ laptops â¦ covered with stickers â¦ and it clicked.</p><blockquote>We should help our fans spread the word with swag to distribute!</blockquote><p>Yes, I know that itâs not as mind blowing as the new features weâll soon talk about, but itâs a start, right?</p><p>So, if youâre a Traefik fan (which makes us <em><em>your</em></em> fans!), and since the gopher in our logo is adorable (not to say utterly, hypnotically handsome), perhaps youâd like some stickers to distribute to your audience at your talks! â They are a ânice to haveâ we developers enjoy ð</p><p>If youâd like us to send you some stickers, please fill out <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfzLUboLnb5sajJfoYNT34Jiqe_4f71kE0DsUqloWZdaC6UWg/viewform?usp=sf_link\" rel=\"noopener\">this form</a> and we will ship some to you right away. The form will ask you all the necessary details we need to help you promote the event. (And give you swag!)</p><p>We are so proud to spread the word with you â Thank you for contributing and sharing the value of Traefik.</p><!--kg-card-begin: markdown--><p><a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfzLUboLnb5sajJfoYNT34Jiqe_4f71kE0DsUqloWZdaC6UWg/viewform?usp=sf_link\"><img src=\"https://containous.ghost.io/content/images/2019/11/iwantswag.png\" alt=\"iwantswag\"></a></p>\n<!--kg-card-end: markdown--><blockquote>You can use the form to show us your best blog posts too â¦ our favorites will get their swag!</blockquote><hr><p>Also, since weâre talking aboutâ¦ talking about Traefik (did that make sense?), there is one more thing I want to mention. Weâre looking for <em><em>you,</em></em> a talented developer advocate eager to join an incredible team. Check out the role here: <a href=\"https://containous.ghost.io/careers/\">Developer Advocate @ Containous</a>.</p><p>And if youâre interested, well, you know what you have to do. (Apply!)</p>","url":"https://containous.ghost.io/blog/spread-the-love-ba5a40aa72e7/","canonical_url":null,"uuid":"5fd7f3cf-06d7-4cb7-a944-160a3a227585","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dd7ec91f1db6f0038c74462","reading_time":2}}]}},"pageContext":{"slug":"gerald","limit":9,"skip":0,"numberOfPages":2,"humanPageNumber":1,"prevPageNumber":null,"nextPageNumber":2,"previousPagePath":null,"nextPagePath":"/author/gerald/page/2/"}},"staticQueryHashes":["1274566015","2561578252","2731221146","394248586","4145280475","749840385"]}