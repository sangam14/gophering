{"componentChunkName":"component---src-templates-author-tsx","path":"/author/containeroo/","result":{"data":{"ghostAuthor":{"slug":"containeroo","name":"containeroo","bio":null,"cover_image":null,"profile_image":"https://containous.ghost.io/content/images/2020/09/Containeroo.jpg","location":"Switzerland","website":"https://containeroo.ch/","twitter":"@containeroo","facebook":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5f5fc262a72a090039800e87","title":"Install And Configure Traefik with Helm","slug":"install-and-configure-traefik-with-helm","featured":false,"feature_image":"https://containous.ghost.io/content/images/2020/09/Kubernetes-and-Helm-blog-1.jpg","featureImageSharp":{"childImageSharp":{"fluid":{"src":"/static/3c8465819333c37d5dc14524c7ba4332/47498/Kubernetes-and-Helm-blog-1.jpg","srcSet":"/static/3c8465819333c37d5dc14524c7ba4332/9dc27/Kubernetes-and-Helm-blog-1.jpg 300w,\n/static/3c8465819333c37d5dc14524c7ba4332/4fe8c/Kubernetes-and-Helm-blog-1.jpg 600w,\n/static/3c8465819333c37d5dc14524c7ba4332/47498/Kubernetes-and-Helm-blog-1.jpg 1200w,\n/static/3c8465819333c37d5dc14524c7ba4332/52258/Kubernetes-and-Helm-blog-1.jpg 1800w,\n/static/3c8465819333c37d5dc14524c7ba4332/a41d1/Kubernetes-and-Helm-blog-1.jpg 2000w","sizes":"(max-width: 1200px) 100vw, 1200px"}}},"excerpt":"Install And Configure Traefik with Helm by Robin Sherrer and Daniele Di Rosa. Learn how they went from Traefik 1.x to 2.0, installing and configuring Helm. ","custom_excerpt":"Install And Configure Traefik with Helm by Robin Sherrer and Daniele Di Rosa. Learn how they went from Traefik 1.x to 2.0, installing and configuring Helm. ","visibility":"public","created_at_pretty":"14 September, 2020","published_at_pretty":"October 6, 2020","updated_at_pretty":"27 October, 2020","created_at":"2020-09-14T19:20:02.000+00:00","published_at":"2020-10-06T14:00:00.000+00:00","updated_at":"2020-10-27T06:10:33.000+00:00","meta_title":"Install And Configure Traefik with Helm","meta_description":"Learn how to install and configure Traefik using the official Helm chart and how to configure Traefik with Cloudflare.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":"https://containous.ghost.io/content/images/2020/09/kubernetes-and-helm-twitter.jpg","twitter_title":null,"authors":[{"name":"containeroo","slug":"containeroo","bio":null,"profile_image":"https://containous.ghost.io/content/images/2020/09/Containeroo.jpg","twitter":"@containeroo","facebook":null,"website":"https://containeroo.ch/"}],"primary_author":{"name":"containeroo","slug":"containeroo","bio":null,"profile_image":"https://containous.ghost.io/content/images/2020/09/Containeroo.jpg","twitter":"@containeroo","facebook":null,"website":"https://containeroo.ch/"},"primary_tag":{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Blog","slug":"blog","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"How To","slug":"how-to","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"#community-related-resource","slug":"hash-community-related-resource","description":null,"feature_image":null,"featureImageSharp":null,"meta_description":null,"meta_title":null,"visibility":"internal"}],"plaintext":"Guest post by Traefik Ambassador, Robin Scherrer and Daniele Di Rosa aka\nContaineroo.\n\nWhen we started our container journey with Docker some years ago, we looked for\nan easy to configure reverse proxy to expose our services to the internet.\nDaniele had seen a video about the best Docker projects where Emile Vauge,\nfounder of Traefik, delivered a presentation about Traefik. And, we decided to\ngive Traefik a shot. We started with using Traefik 1.x, and then moved to\nTraefik 2.0 a couple of years later.\n\nWhen Traefik 2.0 was released, we spent the weekend figuring out how it works,\nand the next week, decided to help others have a tremendous “getting started”\nexperience by writing a simple step by step guide. And, with our roles on the\nKubernetes team at work, we went on to replace the existing reverse proxy\nAmbassador with Traefik.\n\nThe Tutorial\nIn this tutorial, we will show you how to install and configure Traefik using\nthe official Helm chart. We will also show you how to configure Traefik with\nCloudflare. This makes wildcard Let's Encrypt certificates possible.\nHelm makes it easy to deploy applications onto your Kubernetes cluster. Even\nthough Traefik supports both Ingress as well as Traefik IngressRoute, we prefer\nto use the CRD instead of Ingress which results in a lot of annotations.\n\nPrerequisites\n * Kubernetes Cluster\n * Helm official docs [https://helm.sh]\n * Kubeconfig file for Helm to access your Kubernetes Cluster (~/.kube/config)\n\nPrepare Helm Chart\nFirst, you’ll need to add the official Helm repository to your Helm client. You\ncan do that by issuing the following command:\n\nhelm repo add traefik https://helm.traefik.io/traefik\nhelm repo update\n\n\nIn order to configure the Helm chart, you'll need to specify certain values. You\ncan find all the values possible here\n[https://github.com/traefik/traefik-helm-chart/blob/master/traefik/values.yaml].\nOpen your favourite editor and set the values you want to change. Here is an\nexample traefik-chart-values.yaml file:\n\nadditionalArguments:\n  - --providers.file.filename=/data/traefik-config.yaml\n  - --entrypoints.websecure.http.tls.certresolver=cloudflare\n  - --entrypoints.websecure.http.tls.domains[0].main=example.com\n  - --entrypoints.websecure.http.tls.domains[0].sans=*.example.com\n  - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare\n  - --certificatesresolvers.cloudflare.acme.email=mail@example.com\n  - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1\n  - --certificatesresolvers.cloudflare.acme.storage=/certs/acme.json\nports:\n  web:\n    redirectTo: websecure\nenv:\n  - name: CF_API_EMAIL\n    valueFrom:\n      secretKeyRef:\n        key: email\n        name: cloudflare-api-credentials\n  - name: CF_API_KEY\n    valueFrom:\n      secretKeyRef:\n        key: apiKey\n        name: cloudflare-api-credentials\ningressRoute:\n  dashboard:\n    enabled: false\npersistence:\n  enabled: true\n  path: /certs\n  size: 128Mi\nvolumes:\n  - mountPath: /data\n    name: traefik-config\n    type: configMap\n\n\nWith this values file, you are configuring Traefik to:\n\n * use /data/traefik-config.yaml as a static configuration file\n * use Cloudflare as a certificates resolver\n * set the domain example.com as the certificates main domain\n * set *.example.com as the certificates sans\n * store the certificates in /certs/acme.json\n\nInstall Traefik\nAs a first step, you’ll need to create a Kubernetes namespace:\n\nkubectl create namespace traefik\n\n\nBefore you deploy the Helm chart, you’ll need to add the secret containing the\nCloudflare credentials along with the configmap including the static\nconfiguration.\nCreate a traefik-config.yaml file with the following content:\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: cloudflare-api-credentials\n  namespace: traefik\ntype: Opaque\nstringData:\n  email: your@cloudflare.email\n  apiKey: YOURCLOUDFLAREAPIKEY\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: traefik-config\n  namespace: traefik\ndata:\n  traefik-config.yaml: |\n    http:\n      middlewares:\n        headers-default:\n          headers:\n            sslRedirect: true\n            browserXssFilter: true\n            contentTypeNosniff: true\n            forceSTSHeader: true\n            stsIncludeSubdomains: true\n            stsPreload: true\n            stsSeconds: 15552000\n            customFrameOptionsValue: SAMEORIGIN\n\n\nAs an example, we've added a headers-default middleware. For the complete static\nconfiguration, please consult the Traefik docs\n[https://docs.traefik.io/reference/static-configuration/file/].\nNext, you can apply the secret and configmap you created above:\n\nkubectl apply -f traefik-config.yaml\n\n\nThis will create the secret and configmap in the traefik namespace.\nNow it's time to deploy Traefik! The following command will install Traefik in\nthe traefik namespace and with the configuration you created above::\n\nhelm install traefik traefik/traefik --namespace=traefik --values=traefik-chart-values.yaml\n\n\nMake the Dashboard Accessible\nIn order to access the Traefik dashboard, you’ll first need to create an HTTP\nbasic auth middleware. This also requires a secret with the htpasswd\ncredentials.\nUse the following command to create a base64 encoded htpasswd file with a \nkangoroo user and the password jack:\n\nhtpasswd -nb kangoroo jack | openssl base64\n\n\nApply the secret and the middleware to your Kubernetes cluster:\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: traefik-dashboard-auth\n  namespace: traefik\ndata:\n  users: |2\n    a2FuZ29yb286JGFwcjEkdGlQbFBINXYkYlJrUHBSUlYuYUxUWnhFRzdYbmduMAoK\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: traefik-dashboard-basicauth\n  namespace: traefik\nspec:\n  basicAuth:\n    secret: traefik-dashboard-auth\n\n\nNow you can apply the following traefik-dashboard-ingressroute.yaml file:\n\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: traefik-dashboard\n  namespace: traefik\nspec:\n  entryPoints:\n    - websecure\n  routes:\n    - match: Host(`traefik.example.com`)\n      kind: Rule\n      middlewares:\n        - name: traefik-dashboard-basicauth\n          namespace: traefik\n      services:\n        - name: api@internal\n          kind: TraefikService\n\n\nPlease change the matching host rule accordingly under the routes section.\nSince Traefik exposes the dashboard in a special way, you’ll need to tell the\nIngressRoute to use the preconfigured service named api@internal with kind \nTraefikService.\n\nThe IngressRoute CRD\nAs we've mentioned above, Traefik both supports Ingress and IngressRoute as a\nconfiguration.\nThe CRD has a few advantages:\n\n * eliminate or reduce the number of annotations on the Ingress controllers\n * abstract commonly used rules and configuration\n * separate concerns across multiple use-cases and configurations\n   To deploy a simple whoami application service, please refer to the appendix.\n   Here is an example IngressRoute for the whoami service:\n\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: whoami\n  namespace: traefik\nspec:\n  entryPoints:\n    - websecure\n  routes:\n    - match: Host(`whoami.example.com`)\n      kind: Rule\n      middlewares:\n        - name: headers-default@file\n      services:\n        - name: whoami\n          port: 80\n\n\nThis IngressRoute tells Traefik to listen via the websecure entrypoint and\nforward all the traffic matching the host whoami.example.com to the whoami \nKubernetes service. It also configures the route to use the headers-default \nmiddleware you configured in traefik-config.yaml.\n\nConclusion\nAs you can see, getting started with Traefik as an Ingress controller isn't that\nhard :-) Helm makes it really easy to reconfigure or update Traefik.\n\nTraefik documentation has a lot of good information and can be a great resource\nonce you’ve gotten started using this guide. We bet it will answer most of your\nquestions!\n\nYou can find us on Twitter [https://twitter.com/containeroo], Medium\n[https://medium.com/@containeroo] or GitHub [https://github.com/containeroo].\nFeel free to ask any questions regarding Traefik and Kubernetes. We are happy to\nhelp!\n\nAppendix\nWhoami Example Deployment\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: whoami\n  namespace: traefik\n  labels:\n    app: whoami\nspec:\n  containers:\n    - name: whoami\n      image: containous/whoami:latest\n      ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: whoami\n  namespace: traefik\nspec:\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 80\n  selector:\n    app: whoami\n  type: ClusterIP\n\n\nAbout Us\nBecause of our knowledge in Docker, we were able to switch departments at work,\nand are now working in the Kubernetes department. One of the first things we did\nwas eliminate the existing reverse proxy and switch to Traefik :-D\n\nRobin:\nSwiss IT nerd since forever. Interested in open source technologies like\nAnsible, Docker, Kubernetes, Traefik, Python and Golang. Maintainer of several\nGitHub repos and Docker images for containeroo. Addicted to music, tv shows and\nYouTube. Speaking German and English. Twitter [https://twitter.com/rxbn], Reddit\n[https://reddit.com/u/rxbn] or GitHub [https://github.com/rxbn].\n\nDaniele:\nCouch potato, film and series junky, hobby-columnist for Containeroo, likes\nTraefik, Ansible, Docker and K8s. Hates corn and dill. Born and raised in\nSwitzerland. Star me on GitHub [https://github.com/gi8lino].","html":"<p><strong>Guest post by Traefik Ambassador, Robin Scherrer and Daniele Di Rosa aka Containeroo.</strong></p><figure class=\"kg-card kg-image-card\"><img src=\"https://containous.ghost.io/content/images/2020/09/Kubernetes-and-Helm-blog-2.jpg\" class=\"kg-image\" alt=\"Install and Configure Traefik with Helm\" srcset=\"https://containous.ghost.io/content/images/size/w600/2020/09/Kubernetes-and-Helm-blog-2.jpg 600w, https://containous.ghost.io/content/images/size/w1000/2020/09/Kubernetes-and-Helm-blog-2.jpg 1000w, https://containous.ghost.io/content/images/size/w1600/2020/09/Kubernetes-and-Helm-blog-2.jpg 1600w, https://containous.ghost.io/content/images/2020/09/Kubernetes-and-Helm-blog-2.jpg 2400w\" sizes=\"(min-width: 720px) 720px\"></figure><!--kg-card-begin: markdown--><p>When we started our container journey with Docker some years ago, we looked for an easy to configure reverse proxy to expose our services to the internet. Daniele had seen a video about the best Docker projects where Emile Vauge, founder of Traefik, delivered a presentation about Traefik. And, we decided to give Traefik a shot. We started with using Traefik 1.x, and then moved to Traefik 2.0 a couple of years later.</p>\n<p>When Traefik 2.0 was released, we spent the weekend figuring out how it works, and the next week, decided to help others have a tremendous “getting started” experience by writing a simple step by step guide. And, with our roles on the Kubernetes team at work, we went on to replace the existing reverse proxy Ambassador with Traefik.</p>\n<h2 id=\"thetutorial\">The Tutorial</h2>\n<p>In this tutorial, we will show you how to install and configure Traefik using the official Helm chart. We will also show you how to configure Traefik with Cloudflare. This makes wildcard Let's Encrypt certificates possible.<br>\nHelm makes it easy to deploy applications onto your Kubernetes cluster. Even though Traefik supports both Ingress as well as Traefik IngressRoute, we prefer to use the CRD instead of Ingress which results in a lot of annotations.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<ul>\n<li>Kubernetes Cluster</li>\n<li>Helm <a href=\"https://helm.sh\" target=\"_blank\" rel=\"nofollow\">official docs</a></li>\n<li>Kubeconfig file for Helm to access your Kubernetes Cluster (<code>~/.kube/config</code>)</li>\n</ul>\n<h2 id=\"preparehelmchart\">Prepare Helm Chart</h2>\n<p>First, you’ll need to add the official Helm repository to your Helm client. You can do that by issuing the following command:</p>\n<pre><code class=\"language-bash\">helm repo add traefik https://helm.traefik.io/traefik\nhelm repo update\n</code></pre>\n<p>In order to configure the Helm chart, you'll need to specify certain values. You can find all the values possible <a href=\"https://github.com/traefik/traefik-helm-chart/blob/master/traefik/values.yaml\" target=\"_blank\" rel=\"nofollow\">here</a>.<br>\nOpen your favourite editor and set the values you want to change. Here is an example <code>traefik-chart-values.yaml</code> file:</p>\n<pre><code class=\"language-yaml\">additionalArguments:\n  - --providers.file.filename=/data/traefik-config.yaml\n  - --entrypoints.websecure.http.tls.certresolver=cloudflare\n  - --entrypoints.websecure.http.tls.domains[0].main=example.com\n  - --entrypoints.websecure.http.tls.domains[0].sans=*.example.com\n  - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare\n  - --certificatesresolvers.cloudflare.acme.email=mail@example.com\n  - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1\n  - --certificatesresolvers.cloudflare.acme.storage=/certs/acme.json\nports:\n  web:\n    redirectTo: websecure\nenv:\n  - name: CF_API_EMAIL\n    valueFrom:\n      secretKeyRef:\n        key: email\n        name: cloudflare-api-credentials\n  - name: CF_API_KEY\n    valueFrom:\n      secretKeyRef:\n        key: apiKey\n        name: cloudflare-api-credentials\ningressRoute:\n  dashboard:\n    enabled: false\npersistence:\n  enabled: true\n  path: /certs\n  size: 128Mi\nvolumes:\n  - mountPath: /data\n    name: traefik-config\n    type: configMap\n</code></pre>\n<p>With this values file, you are configuring Traefik to:</p>\n<ul>\n<li>use <code>/data/traefik-config.yaml</code> as a static configuration file</li>\n<li>use Cloudflare as a certificates resolver</li>\n<li>set the domain <code>example.com</code> as the certificates main domain</li>\n<li>set <code>*.example.com</code> as the certificates sans</li>\n<li>store the certificates in <code>/certs/acme.json</code></li>\n</ul>\n<h2 id=\"installtraefik\">Install Traefik</h2>\n<p>As a first step, you’ll need to create a Kubernetes namespace:</p>\n<pre><code class=\"language-bash\">kubectl create namespace traefik\n</code></pre>\n<p>Before you deploy the Helm chart, you’ll need to add the secret containing the Cloudflare credentials along with the configmap including the static configuration.<br>\nCreate a <code>traefik-config.yaml</code> file with the following content:</p>\n<pre><code class=\"language-yaml\">---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: cloudflare-api-credentials\n  namespace: traefik\ntype: Opaque\nstringData:\n  email: your@cloudflare.email\n  apiKey: YOURCLOUDFLAREAPIKEY\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: traefik-config\n  namespace: traefik\ndata:\n  traefik-config.yaml: |\n    http:\n      middlewares:\n        headers-default:\n          headers:\n            sslRedirect: true\n            browserXssFilter: true\n            contentTypeNosniff: true\n            forceSTSHeader: true\n            stsIncludeSubdomains: true\n            stsPreload: true\n            stsSeconds: 15552000\n            customFrameOptionsValue: SAMEORIGIN\n</code></pre>\n<p>As an example, we've added a <code>headers-default</code> middleware. For the complete static configuration, please consult the <a href=\"https://docs.traefik.io/reference/static-configuration/file/\">Traefik docs</a>.<br>\nNext, you can apply the secret and configmap you created above:</p>\n<pre><code class=\"language-bash\">kubectl apply -f traefik-config.yaml\n</code></pre>\n<p>This will create the secret and configmap in the <code>traefik</code> namespace.<br>\nNow it's time to deploy Traefik! The following command will install Traefik in the <code>traefik</code> namespace and with the configuration you created above::</p>\n<pre><code class=\"language-bash\">helm install traefik traefik/traefik --namespace=traefik --values=traefik-chart-values.yaml\n</code></pre>\n<h2 id=\"makethedashboardaccessible\">Make the Dashboard Accessible</h2>\n<p>In order to access the Traefik dashboard, you’ll first need to create an HTTP basic auth middleware. This also requires a secret with the htpasswd credentials.<br>\nUse the following command to create a base64 encoded htpasswd file with a <code>kangoroo</code> user and the password <code>jack</code>:</p>\n<pre><code class=\"language-bash\">htpasswd -nb kangoroo jack | openssl base64\n</code></pre>\n<p>Apply the secret and the middleware to your Kubernetes cluster:</p>\n<pre><code class=\"language-yaml\">---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: traefik-dashboard-auth\n  namespace: traefik\ndata:\n  users: |2\n    a2FuZ29yb286JGFwcjEkdGlQbFBINXYkYlJrUHBSUlYuYUxUWnhFRzdYbmduMAoK\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: traefik-dashboard-basicauth\n  namespace: traefik\nspec:\n  basicAuth:\n    secret: traefik-dashboard-auth\n</code></pre>\n<p>Now you can apply the following <code>traefik-dashboard-ingressroute.yaml</code> file:</p>\n<pre><code class=\"language-yaml\">apiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: traefik-dashboard\n  namespace: traefik\nspec:\n  entryPoints:\n    - websecure\n  routes:\n    - match: Host(`traefik.example.com`)\n      kind: Rule\n      middlewares:\n        - name: traefik-dashboard-basicauth\n          namespace: traefik\n      services:\n        - name: api@internal\n          kind: TraefikService\n</code></pre>\n<p>Please change the matching host rule accordingly under the <code>routes</code> section.<br>\nSince Traefik exposes the dashboard in a special way, you’ll need to tell the IngressRoute to use the preconfigured service named <code>api@internal</code> with kind <code>TraefikService</code>.</p>\n<h2 id=\"theingressroutecrd\">The IngressRoute CRD</h2>\n<p>As we've mentioned above, Traefik both supports Ingress and IngressRoute as a configuration.<br>\nThe CRD has a few advantages:</p>\n<ul>\n<li>eliminate or reduce the number of annotations on the Ingress controllers</li>\n<li>abstract commonly used rules and configuration</li>\n<li>separate concerns across multiple use-cases and configurations<br>\nTo deploy a simple <code>whoami</code> application service, please refer to the appendix.<br>\nHere is an example IngressRoute for the <code>whoami</code> service:</li>\n</ul>\n<pre><code class=\"language-yaml\">apiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: whoami\n  namespace: traefik\nspec:\n  entryPoints:\n    - websecure\n  routes:\n    - match: Host(`whoami.example.com`)\n      kind: Rule\n      middlewares:\n        - name: headers-default@file\n      services:\n        - name: whoami\n          port: 80\n</code></pre>\n<p>This IngressRoute tells Traefik to listen via the <code>websecure</code> entrypoint and forward all the traffic matching the host <code>whoami.example.com</code> to the <code>whoami</code> Kubernetes service. It also configures the route to use the <code>headers-default</code> middleware you configured in <code>traefik-config.yaml</code>.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>As you can see, getting started with Traefik as an Ingress controller isn't that hard :-)  Helm makes it really easy to reconfigure or update Traefik.</p>\n<p>Traefik documentation has a lot of good information and can be a great resource once you’ve gotten started using this guide. We bet it will answer most of your questions!</p>\n<p>You can find us on <a href=\"https://twitter.com/containeroo\" target=\"_blank\" rel=\"nofollow\">Twitter</a>, <a href=\"https://medium.com/@containeroo\" target=\"_blank\" rel=\"nofollow\">Medium</a> or <a href=\"https://github.com/containeroo\" target=\"_blank\" rel=\"nofollow\">GitHub</a>. Feel free to ask any questions regarding Traefik and Kubernetes. We are happy to help!</p>\n<h2 id=\"appendix\">Appendix</h2>\n<h3 id=\"whoamiexampledeployment\">Whoami Example Deployment</h3>\n<pre><code class=\"language-yaml\">---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: whoami\n  namespace: traefik\n  labels:\n    app: whoami\nspec:\n  containers:\n    - name: whoami\n      image: containous/whoami:latest\n      ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: whoami\n  namespace: traefik\nspec:\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 80\n  selector:\n    app: whoami\n  type: ClusterIP\n</code></pre>\n<h2 id=\"aboutus\">About Us</h2>\n<p>Because of our knowledge in Docker, we were able to switch departments at work, and are now working in the Kubernetes department. One of the first things we did was eliminate the existing reverse proxy and switch to Traefik :-D</p>\n<p>Robin:<br>\nSwiss IT nerd since forever. Interested in open source technologies like Ansible, Docker, Kubernetes, Traefik, Python and Golang. Maintainer of several GitHub repos and Docker images for containeroo. Addicted to music, tv shows and YouTube. Speaking German and English. <a href=\"https://twitter.com/rxbn\" target=\"_blank\" rel=\"nofollow\">Twitter</a>, <a href=\"https://reddit.com/u/rxbn\" target=\"_blank\" rel=\"nofollow\">Reddit</a> or <a href=\"https://github.com/rxbn\" target=\"_blank\" rel=\"nofollow\">GitHub</a>.</p>\n<p>Daniele:<br>\nCouch potato, film and series junky, hobby-columnist for Containeroo, likes Traefik, Ansible, Docker and K8s. Hates corn and dill. Born and raised in Switzerland. Star me on <a href=\"https://github.com/gi8lino\" target=\"_blank\" rel=\"nofollow\">GitHub</a>.</p>\n<!--kg-card-end: markdown-->","url":"https://containous.ghost.io/blog/install-and-configure-traefik-with-helm/","canonical_url":null,"uuid":"67cb07b2-be3a-461e-979b-92dcdab2d516","codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5f5fc262a72a090039800e87","reading_time":5}}]}},"pageContext":{"slug":"containeroo","limit":9,"skip":0,"numberOfPages":1,"humanPageNumber":1,"prevPageNumber":null,"nextPageNumber":null,"previousPagePath":null,"nextPagePath":null}},"staticQueryHashes":["1274566015","2561578252","2731221146","394248586","4145280475","749840385"]}